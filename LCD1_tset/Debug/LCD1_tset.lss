
LCD1_tset.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e54  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000116  00800060  00002e54  00002ee8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800176  00800176  00002ffe  2**0
                  ALLOC
  3 .stab         00002bd4  00000000  00000000  00003000  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010b4  00000000  00000000  00005bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00006c88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  00006e48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000966e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0000ab3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000be48  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0000c028  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0000c32f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cd49  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e5       	ldi	r30, 0x54	; 84
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 37       	cpi	r26, 0x7D	; 125
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a7 14 	call	0x294e	; 0x294e <main>
      8a:	0c 94 28 17 	jmp	0x2e50	; 0x2e50 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f1 16 	jmp	0x2de2	; 0x2de2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e6       	ldi	r26, 0x64	; 100
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 0d 17 	jmp	0x2e1a	; 0x2e1a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 fd 16 	jmp	0x2dfa	; 0x2dfa <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 19 17 	jmp	0x2e32	; 0x2e32 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 fd 16 	jmp	0x2dfa	; 0x2dfa <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 19 17 	jmp	0x2e32	; 0x2e32 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f1 16 	jmp	0x2de2	; 0x2de2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 e6       	ldi	r24, 0x64	; 100
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 0d 17 	jmp	0x2e1a	; 0x2e1a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f9 16 	jmp	0x2df2	; 0x2df2 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	64 e6       	ldi	r22, 0x64	; 100
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 15 17 	jmp	0x2e2a	; 0x2e2a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 fd 16 	jmp	0x2dfa	; 0x2dfa <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 19 17 	jmp	0x2e32	; 0x2e32 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 fd 16 	jmp	0x2dfa	; 0x2dfa <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 19 17 	jmp	0x2e32	; 0x2e32 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 fd 16 	jmp	0x2dfa	; 0x2dfa <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 19 17 	jmp	0x2e32	; 0x2e32 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 fa 16 	jmp	0x2df4	; 0x2df4 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 16 17 	jmp	0x2e2c	; 0x2e2c <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 01 17 	jmp	0x2e02	; 0x2e02 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 1d 17 	jmp	0x2e3a	; 0x2e3a <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 f9 16 	jmp	0x2df2	; 0x2df2 <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 15 17 	jmp	0x2e2a	; 0x2e2a <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e4 59       	subi	r30, 0x94	; 148
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <CLCD_voidSendCommand>:
#include "../HAL/CLCD_interface.h"
#include "../HAL/CLCD_private.h"

static u8 iniIsFinich=0;
void CLCD_voidSendCommand(u8 Copy_u8Command)//math
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
     ef2:	ac 97       	sbiw	r28, 0x2c	; 44
     ef4:	0f b6       	in	r0, 0x3f	; 63
     ef6:	f8 94       	cli
     ef8:	de bf       	out	0x3e, r29	; 62
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	cd bf       	out	0x3d, r28	; 61
     efe:	8c a7       	std	Y+44, r24	; 0x2c
	/*PIN SET  send pulse (E) */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_PIN_HIGH);
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_PIN_LOW);
#elif CLCD_CHIOCE_MODE==_4_BIT_MODE
	u8 Local_u8Mask = 0b11110000;
     f00:	80 ef       	ldi	r24, 0xF0	; 240
     f02:	8b a7       	std	Y+43, r24	; 0x2b
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_PIN_LOW);
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	60 e0       	ldi	r22, 0x00	; 0
     f08:	40 e0       	ldi	r20, 0x00	; 0
     f0a:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <DIO_u8SetPinValue>
	/*PIN RW SET LOW  */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_PIN_LOW);
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	61 e0       	ldi	r22, 0x01	; 1
     f12:	40 e0       	ldi	r20, 0x00	; 0
     f14:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <DIO_u8SetPinValue>
	/*PORT SET COMMAND*/
	Local_u8Mask &= Copy_u8Command;
     f18:	9b a5       	ldd	r25, Y+43	; 0x2b
     f1a:	8c a5       	ldd	r24, Y+44	; 0x2c
     f1c:	89 23       	and	r24, r25
     f1e:	8b a7       	std	Y+43, r24	; 0x2b
	DIO_u8SetPortValue(CLCD_DATA_PORT, Local_u8Mask);
     f20:	80 e0       	ldi	r24, 0x00	; 0
     f22:	6b a5       	ldd	r22, Y+43	; 0x2b
     f24:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <DIO_u8SetPortValue>
	/*PIN SET  send pulse (E) */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_PIN_HIGH);
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	62 e0       	ldi	r22, 0x02	; 2
     f2c:	41 e0       	ldi	r20, 0x01	; 1
     f2e:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <DIO_u8SetPinValue>
     f32:	80 e0       	ldi	r24, 0x00	; 0
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	a0 e0       	ldi	r26, 0x00	; 0
     f38:	b0 e4       	ldi	r27, 0x40	; 64
     f3a:	8f a3       	std	Y+39, r24	; 0x27
     f3c:	98 a7       	std	Y+40, r25	; 0x28
     f3e:	a9 a7       	std	Y+41, r26	; 0x29
     f40:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f42:	6f a1       	ldd	r22, Y+39	; 0x27
     f44:	78 a5       	ldd	r23, Y+40	; 0x28
     f46:	89 a5       	ldd	r24, Y+41	; 0x29
     f48:	9a a5       	ldd	r25, Y+42	; 0x2a
     f4a:	20 e0       	ldi	r18, 0x00	; 0
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	4a ef       	ldi	r20, 0xFA	; 250
     f50:	54 e4       	ldi	r21, 0x44	; 68
     f52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f56:	dc 01       	movw	r26, r24
     f58:	cb 01       	movw	r24, r22
     f5a:	8b a3       	std	Y+35, r24	; 0x23
     f5c:	9c a3       	std	Y+36, r25	; 0x24
     f5e:	ad a3       	std	Y+37, r26	; 0x25
     f60:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     f62:	6b a1       	ldd	r22, Y+35	; 0x23
     f64:	7c a1       	ldd	r23, Y+36	; 0x24
     f66:	8d a1       	ldd	r24, Y+37	; 0x25
     f68:	9e a1       	ldd	r25, Y+38	; 0x26
     f6a:	20 e0       	ldi	r18, 0x00	; 0
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	40 e8       	ldi	r20, 0x80	; 128
     f70:	5f e3       	ldi	r21, 0x3F	; 63
     f72:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f76:	88 23       	and	r24, r24
     f78:	2c f4       	brge	.+10     	; 0xf84 <CLCD_voidSendCommand+0x9a>
		__ticks = 1;
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	9a a3       	std	Y+34, r25	; 0x22
     f80:	89 a3       	std	Y+33, r24	; 0x21
     f82:	3f c0       	rjmp	.+126    	; 0x1002 <CLCD_voidSendCommand+0x118>
	else if (__tmp > 65535)
     f84:	6b a1       	ldd	r22, Y+35	; 0x23
     f86:	7c a1       	ldd	r23, Y+36	; 0x24
     f88:	8d a1       	ldd	r24, Y+37	; 0x25
     f8a:	9e a1       	ldd	r25, Y+38	; 0x26
     f8c:	20 e0       	ldi	r18, 0x00	; 0
     f8e:	3f ef       	ldi	r19, 0xFF	; 255
     f90:	4f e7       	ldi	r20, 0x7F	; 127
     f92:	57 e4       	ldi	r21, 0x47	; 71
     f94:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f98:	18 16       	cp	r1, r24
     f9a:	4c f5       	brge	.+82     	; 0xfee <CLCD_voidSendCommand+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f9c:	6f a1       	ldd	r22, Y+39	; 0x27
     f9e:	78 a5       	ldd	r23, Y+40	; 0x28
     fa0:	89 a5       	ldd	r24, Y+41	; 0x29
     fa2:	9a a5       	ldd	r25, Y+42	; 0x2a
     fa4:	20 e0       	ldi	r18, 0x00	; 0
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	40 e2       	ldi	r20, 0x20	; 32
     faa:	51 e4       	ldi	r21, 0x41	; 65
     fac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fb0:	dc 01       	movw	r26, r24
     fb2:	cb 01       	movw	r24, r22
     fb4:	bc 01       	movw	r22, r24
     fb6:	cd 01       	movw	r24, r26
     fb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fbc:	dc 01       	movw	r26, r24
     fbe:	cb 01       	movw	r24, r22
     fc0:	9a a3       	std	Y+34, r25	; 0x22
     fc2:	89 a3       	std	Y+33, r24	; 0x21
     fc4:	0f c0       	rjmp	.+30     	; 0xfe4 <CLCD_voidSendCommand+0xfa>
     fc6:	88 ec       	ldi	r24, 0xC8	; 200
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	98 a3       	std	Y+32, r25	; 0x20
     fcc:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     fce:	8f 8d       	ldd	r24, Y+31	; 0x1f
     fd0:	98 a1       	ldd	r25, Y+32	; 0x20
     fd2:	01 97       	sbiw	r24, 0x01	; 1
     fd4:	f1 f7       	brne	.-4      	; 0xfd2 <CLCD_voidSendCommand+0xe8>
     fd6:	98 a3       	std	Y+32, r25	; 0x20
     fd8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fda:	89 a1       	ldd	r24, Y+33	; 0x21
     fdc:	9a a1       	ldd	r25, Y+34	; 0x22
     fde:	01 97       	sbiw	r24, 0x01	; 1
     fe0:	9a a3       	std	Y+34, r25	; 0x22
     fe2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fe4:	89 a1       	ldd	r24, Y+33	; 0x21
     fe6:	9a a1       	ldd	r25, Y+34	; 0x22
     fe8:	00 97       	sbiw	r24, 0x00	; 0
     fea:	69 f7       	brne	.-38     	; 0xfc6 <CLCD_voidSendCommand+0xdc>
     fec:	14 c0       	rjmp	.+40     	; 0x1016 <CLCD_voidSendCommand+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fee:	6b a1       	ldd	r22, Y+35	; 0x23
     ff0:	7c a1       	ldd	r23, Y+36	; 0x24
     ff2:	8d a1       	ldd	r24, Y+37	; 0x25
     ff4:	9e a1       	ldd	r25, Y+38	; 0x26
     ff6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ffa:	dc 01       	movw	r26, r24
     ffc:	cb 01       	movw	r24, r22
     ffe:	9a a3       	std	Y+34, r25	; 0x22
    1000:	89 a3       	std	Y+33, r24	; 0x21
    1002:	89 a1       	ldd	r24, Y+33	; 0x21
    1004:	9a a1       	ldd	r25, Y+34	; 0x22
    1006:	9e 8f       	std	Y+30, r25	; 0x1e
    1008:	8d 8f       	std	Y+29, r24	; 0x1d
    100a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    100c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    100e:	01 97       	sbiw	r24, 0x01	; 1
    1010:	f1 f7       	brne	.-4      	; 0x100e <CLCD_voidSendCommand+0x124>
    1012:	9e 8f       	std	Y+30, r25	; 0x1e
    1014:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_PIN_LOW);
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	62 e0       	ldi	r22, 0x02	; 2
    101a:	40 e0       	ldi	r20, 0x00	; 0
    101c:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <DIO_u8SetPinValue>
	if(iniIsFinich)
    1020:	80 91 76 01 	lds	r24, 0x0176
    1024:	88 23       	and	r24, r24
    1026:	09 f4       	brne	.+2      	; 0x102a <CLCD_voidSendCommand+0x140>
    1028:	8c c0       	rjmp	.+280    	; 0x1142 <CLCD_voidSendCommand+0x258>
	{
		Local_u8Mask = 0b11110000;
    102a:	80 ef       	ldi	r24, 0xF0	; 240
    102c:	8b a7       	std	Y+43, r24	; 0x2b
		Local_u8Mask = ~(Local_u8Mask) & Copy_u8Command;
    102e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1030:	98 2f       	mov	r25, r24
    1032:	90 95       	com	r25
    1034:	8c a5       	ldd	r24, Y+44	; 0x2c
    1036:	89 23       	and	r24, r25
    1038:	8b a7       	std	Y+43, r24	; 0x2b
		DIO_u8SetPortValue(CLCD_DATA_PORT, (Local_u8Mask << 4));
    103a:	8b a5       	ldd	r24, Y+43	; 0x2b
    103c:	98 2f       	mov	r25, r24
    103e:	92 95       	swap	r25
    1040:	90 7f       	andi	r25, 0xF0	; 240
    1042:	80 e0       	ldi	r24, 0x00	; 0
    1044:	69 2f       	mov	r22, r25
    1046:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <DIO_u8SetPortValue>
		DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_PIN_HIGH);
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	62 e0       	ldi	r22, 0x02	; 2
    104e:	41 e0       	ldi	r20, 0x01	; 1
    1050:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <DIO_u8SetPinValue>
    1054:	80 e0       	ldi	r24, 0x00	; 0
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	a0 e0       	ldi	r26, 0x00	; 0
    105a:	b0 e4       	ldi	r27, 0x40	; 64
    105c:	89 8f       	std	Y+25, r24	; 0x19
    105e:	9a 8f       	std	Y+26, r25	; 0x1a
    1060:	ab 8f       	std	Y+27, r26	; 0x1b
    1062:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1064:	69 8d       	ldd	r22, Y+25	; 0x19
    1066:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1068:	8b 8d       	ldd	r24, Y+27	; 0x1b
    106a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    106c:	20 e0       	ldi	r18, 0x00	; 0
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	4a ef       	ldi	r20, 0xFA	; 250
    1072:	54 e4       	ldi	r21, 0x44	; 68
    1074:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1078:	dc 01       	movw	r26, r24
    107a:	cb 01       	movw	r24, r22
    107c:	8d 8b       	std	Y+21, r24	; 0x15
    107e:	9e 8b       	std	Y+22, r25	; 0x16
    1080:	af 8b       	std	Y+23, r26	; 0x17
    1082:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1084:	6d 89       	ldd	r22, Y+21	; 0x15
    1086:	7e 89       	ldd	r23, Y+22	; 0x16
    1088:	8f 89       	ldd	r24, Y+23	; 0x17
    108a:	98 8d       	ldd	r25, Y+24	; 0x18
    108c:	20 e0       	ldi	r18, 0x00	; 0
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	40 e8       	ldi	r20, 0x80	; 128
    1092:	5f e3       	ldi	r21, 0x3F	; 63
    1094:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1098:	88 23       	and	r24, r24
    109a:	2c f4       	brge	.+10     	; 0x10a6 <CLCD_voidSendCommand+0x1bc>
		__ticks = 1;
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	9c 8b       	std	Y+20, r25	; 0x14
    10a2:	8b 8b       	std	Y+19, r24	; 0x13
    10a4:	3f c0       	rjmp	.+126    	; 0x1124 <CLCD_voidSendCommand+0x23a>
	else if (__tmp > 65535)
    10a6:	6d 89       	ldd	r22, Y+21	; 0x15
    10a8:	7e 89       	ldd	r23, Y+22	; 0x16
    10aa:	8f 89       	ldd	r24, Y+23	; 0x17
    10ac:	98 8d       	ldd	r25, Y+24	; 0x18
    10ae:	20 e0       	ldi	r18, 0x00	; 0
    10b0:	3f ef       	ldi	r19, 0xFF	; 255
    10b2:	4f e7       	ldi	r20, 0x7F	; 127
    10b4:	57 e4       	ldi	r21, 0x47	; 71
    10b6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    10ba:	18 16       	cp	r1, r24
    10bc:	4c f5       	brge	.+82     	; 0x1110 <CLCD_voidSendCommand+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10be:	69 8d       	ldd	r22, Y+25	; 0x19
    10c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10c6:	20 e0       	ldi	r18, 0x00	; 0
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	40 e2       	ldi	r20, 0x20	; 32
    10cc:	51 e4       	ldi	r21, 0x41	; 65
    10ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10d2:	dc 01       	movw	r26, r24
    10d4:	cb 01       	movw	r24, r22
    10d6:	bc 01       	movw	r22, r24
    10d8:	cd 01       	movw	r24, r26
    10da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10de:	dc 01       	movw	r26, r24
    10e0:	cb 01       	movw	r24, r22
    10e2:	9c 8b       	std	Y+20, r25	; 0x14
    10e4:	8b 8b       	std	Y+19, r24	; 0x13
    10e6:	0f c0       	rjmp	.+30     	; 0x1106 <CLCD_voidSendCommand+0x21c>
    10e8:	88 ec       	ldi	r24, 0xC8	; 200
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	9a 8b       	std	Y+18, r25	; 0x12
    10ee:	89 8b       	std	Y+17, r24	; 0x11
    10f0:	89 89       	ldd	r24, Y+17	; 0x11
    10f2:	9a 89       	ldd	r25, Y+18	; 0x12
    10f4:	01 97       	sbiw	r24, 0x01	; 1
    10f6:	f1 f7       	brne	.-4      	; 0x10f4 <CLCD_voidSendCommand+0x20a>
    10f8:	9a 8b       	std	Y+18, r25	; 0x12
    10fa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10fc:	8b 89       	ldd	r24, Y+19	; 0x13
    10fe:	9c 89       	ldd	r25, Y+20	; 0x14
    1100:	01 97       	sbiw	r24, 0x01	; 1
    1102:	9c 8b       	std	Y+20, r25	; 0x14
    1104:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1106:	8b 89       	ldd	r24, Y+19	; 0x13
    1108:	9c 89       	ldd	r25, Y+20	; 0x14
    110a:	00 97       	sbiw	r24, 0x00	; 0
    110c:	69 f7       	brne	.-38     	; 0x10e8 <CLCD_voidSendCommand+0x1fe>
    110e:	14 c0       	rjmp	.+40     	; 0x1138 <CLCD_voidSendCommand+0x24e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1110:	6d 89       	ldd	r22, Y+21	; 0x15
    1112:	7e 89       	ldd	r23, Y+22	; 0x16
    1114:	8f 89       	ldd	r24, Y+23	; 0x17
    1116:	98 8d       	ldd	r25, Y+24	; 0x18
    1118:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    111c:	dc 01       	movw	r26, r24
    111e:	cb 01       	movw	r24, r22
    1120:	9c 8b       	std	Y+20, r25	; 0x14
    1122:	8b 8b       	std	Y+19, r24	; 0x13
    1124:	8b 89       	ldd	r24, Y+19	; 0x13
    1126:	9c 89       	ldd	r25, Y+20	; 0x14
    1128:	98 8b       	std	Y+16, r25	; 0x10
    112a:	8f 87       	std	Y+15, r24	; 0x0f
    112c:	8f 85       	ldd	r24, Y+15	; 0x0f
    112e:	98 89       	ldd	r25, Y+16	; 0x10
    1130:	01 97       	sbiw	r24, 0x01	; 1
    1132:	f1 f7       	brne	.-4      	; 0x1130 <CLCD_voidSendCommand+0x246>
    1134:	98 8b       	std	Y+16, r25	; 0x10
    1136:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);
		DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_PIN_LOW);
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	62 e0       	ldi	r22, 0x02	; 2
    113c:	40 e0       	ldi	r20, 0x00	; 0
    113e:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <DIO_u8SetPinValue>
    1142:	80 e0       	ldi	r24, 0x00	; 0
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	a0 e0       	ldi	r26, 0x00	; 0
    1148:	b0 e4       	ldi	r27, 0x40	; 64
    114a:	8b 87       	std	Y+11, r24	; 0x0b
    114c:	9c 87       	std	Y+12, r25	; 0x0c
    114e:	ad 87       	std	Y+13, r26	; 0x0d
    1150:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1152:	6b 85       	ldd	r22, Y+11	; 0x0b
    1154:	7c 85       	ldd	r23, Y+12	; 0x0c
    1156:	8d 85       	ldd	r24, Y+13	; 0x0d
    1158:	9e 85       	ldd	r25, Y+14	; 0x0e
    115a:	20 e0       	ldi	r18, 0x00	; 0
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	4a ef       	ldi	r20, 0xFA	; 250
    1160:	54 e4       	ldi	r21, 0x44	; 68
    1162:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1166:	dc 01       	movw	r26, r24
    1168:	cb 01       	movw	r24, r22
    116a:	8f 83       	std	Y+7, r24	; 0x07
    116c:	98 87       	std	Y+8, r25	; 0x08
    116e:	a9 87       	std	Y+9, r26	; 0x09
    1170:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1172:	6f 81       	ldd	r22, Y+7	; 0x07
    1174:	78 85       	ldd	r23, Y+8	; 0x08
    1176:	89 85       	ldd	r24, Y+9	; 0x09
    1178:	9a 85       	ldd	r25, Y+10	; 0x0a
    117a:	20 e0       	ldi	r18, 0x00	; 0
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	40 e8       	ldi	r20, 0x80	; 128
    1180:	5f e3       	ldi	r21, 0x3F	; 63
    1182:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1186:	88 23       	and	r24, r24
    1188:	2c f4       	brge	.+10     	; 0x1194 <CLCD_voidSendCommand+0x2aa>
		__ticks = 1;
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	9e 83       	std	Y+6, r25	; 0x06
    1190:	8d 83       	std	Y+5, r24	; 0x05
    1192:	3f c0       	rjmp	.+126    	; 0x1212 <CLCD_voidSendCommand+0x328>
	else if (__tmp > 65535)
    1194:	6f 81       	ldd	r22, Y+7	; 0x07
    1196:	78 85       	ldd	r23, Y+8	; 0x08
    1198:	89 85       	ldd	r24, Y+9	; 0x09
    119a:	9a 85       	ldd	r25, Y+10	; 0x0a
    119c:	20 e0       	ldi	r18, 0x00	; 0
    119e:	3f ef       	ldi	r19, 0xFF	; 255
    11a0:	4f e7       	ldi	r20, 0x7F	; 127
    11a2:	57 e4       	ldi	r21, 0x47	; 71
    11a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    11a8:	18 16       	cp	r1, r24
    11aa:	4c f5       	brge	.+82     	; 0x11fe <CLCD_voidSendCommand+0x314>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    11ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    11b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    11b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    11b4:	20 e0       	ldi	r18, 0x00	; 0
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	40 e2       	ldi	r20, 0x20	; 32
    11ba:	51 e4       	ldi	r21, 0x41	; 65
    11bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11c0:	dc 01       	movw	r26, r24
    11c2:	cb 01       	movw	r24, r22
    11c4:	bc 01       	movw	r22, r24
    11c6:	cd 01       	movw	r24, r26
    11c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11cc:	dc 01       	movw	r26, r24
    11ce:	cb 01       	movw	r24, r22
    11d0:	9e 83       	std	Y+6, r25	; 0x06
    11d2:	8d 83       	std	Y+5, r24	; 0x05
    11d4:	0f c0       	rjmp	.+30     	; 0x11f4 <CLCD_voidSendCommand+0x30a>
    11d6:	88 ec       	ldi	r24, 0xC8	; 200
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	9c 83       	std	Y+4, r25	; 0x04
    11dc:	8b 83       	std	Y+3, r24	; 0x03
    11de:	8b 81       	ldd	r24, Y+3	; 0x03
    11e0:	9c 81       	ldd	r25, Y+4	; 0x04
    11e2:	01 97       	sbiw	r24, 0x01	; 1
    11e4:	f1 f7       	brne	.-4      	; 0x11e2 <CLCD_voidSendCommand+0x2f8>
    11e6:	9c 83       	std	Y+4, r25	; 0x04
    11e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11ea:	8d 81       	ldd	r24, Y+5	; 0x05
    11ec:	9e 81       	ldd	r25, Y+6	; 0x06
    11ee:	01 97       	sbiw	r24, 0x01	; 1
    11f0:	9e 83       	std	Y+6, r25	; 0x06
    11f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11f4:	8d 81       	ldd	r24, Y+5	; 0x05
    11f6:	9e 81       	ldd	r25, Y+6	; 0x06
    11f8:	00 97       	sbiw	r24, 0x00	; 0
    11fa:	69 f7       	brne	.-38     	; 0x11d6 <CLCD_voidSendCommand+0x2ec>
    11fc:	14 c0       	rjmp	.+40     	; 0x1226 <CLCD_voidSendCommand+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1200:	78 85       	ldd	r23, Y+8	; 0x08
    1202:	89 85       	ldd	r24, Y+9	; 0x09
    1204:	9a 85       	ldd	r25, Y+10	; 0x0a
    1206:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    120a:	dc 01       	movw	r26, r24
    120c:	cb 01       	movw	r24, r22
    120e:	9e 83       	std	Y+6, r25	; 0x06
    1210:	8d 83       	std	Y+5, r24	; 0x05
    1212:	8d 81       	ldd	r24, Y+5	; 0x05
    1214:	9e 81       	ldd	r25, Y+6	; 0x06
    1216:	9a 83       	std	Y+2, r25	; 0x02
    1218:	89 83       	std	Y+1, r24	; 0x01
    121a:	89 81       	ldd	r24, Y+1	; 0x01
    121c:	9a 81       	ldd	r25, Y+2	; 0x02
    121e:	01 97       	sbiw	r24, 0x01	; 1
    1220:	f1 f7       	brne	.-4      	; 0x121e <CLCD_voidSendCommand+0x334>
    1222:	9a 83       	std	Y+2, r25	; 0x02
    1224:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
#else
#error "In correct cconfigrtion of LCD_MODE"
#endif

}
    1226:	ac 96       	adiw	r28, 0x2c	; 44
    1228:	0f b6       	in	r0, 0x3f	; 63
    122a:	f8 94       	cli
    122c:	de bf       	out	0x3e, r29	; 62
    122e:	0f be       	out	0x3f, r0	; 63
    1230:	cd bf       	out	0x3d, r28	; 61
    1232:	cf 91       	pop	r28
    1234:	df 91       	pop	r29
    1236:	08 95       	ret

00001238 <CLCD_Read_BF_AC>:
u8 CLCD_Read_BF_AC() {
    1238:	df 93       	push	r29
    123a:	cf 93       	push	r28
    123c:	00 d0       	rcall	.+0      	; 0x123e <CLCD_Read_BF_AC+0x6>
    123e:	cd b7       	in	r28, 0x3d	; 61
    1240:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8Address = 0;
    1242:	1a 82       	std	Y+2, r1	; 0x02
	/*PIN RS SET LOW  */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_PIN_LOW);
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	60 e0       	ldi	r22, 0x00	; 0
    1248:	40 e0       	ldi	r20, 0x00	; 0
    124a:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <DIO_u8SetPinValue>
	/*PIN RW SET HIGH  */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_PIN_HIGH);
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	61 e0       	ldi	r22, 0x01	; 1
    1252:	41 e0       	ldi	r20, 0x01	; 1
    1254:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <DIO_u8SetPinValue>
	/*PIN SET  send pulse (E) */
	for (u8 i = 0; i < 7; i++) {
    1258:	19 82       	std	Y+1, r1	; 0x01
    125a:	1c c0       	rjmp	.+56     	; 0x1294 <CLCD_Read_BF_AC+0x5c>
		DIO_u8GetPinValue(CLCD_DATA_PORT, i, &Local_u8Address);
    125c:	9e 01       	movw	r18, r28
    125e:	2e 5f       	subi	r18, 0xFE	; 254
    1260:	3f 4f       	sbci	r19, 0xFF	; 255
    1262:	80 e0       	ldi	r24, 0x00	; 0
    1264:	69 81       	ldd	r22, Y+1	; 0x01
    1266:	a9 01       	movw	r20, r18
    1268:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <DIO_u8GetPinValue>
		Local_u8Address += Local_u8Address << i;
    126c:	8a 81       	ldd	r24, Y+2	; 0x02
    126e:	28 2f       	mov	r18, r24
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	89 81       	ldd	r24, Y+1	; 0x01
    1274:	88 2f       	mov	r24, r24
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	a9 01       	movw	r20, r18
    127a:	02 c0       	rjmp	.+4      	; 0x1280 <CLCD_Read_BF_AC+0x48>
    127c:	44 0f       	add	r20, r20
    127e:	55 1f       	adc	r21, r21
    1280:	8a 95       	dec	r24
    1282:	e2 f7       	brpl	.-8      	; 0x127c <CLCD_Read_BF_AC+0x44>
    1284:	ca 01       	movw	r24, r20
    1286:	98 2f       	mov	r25, r24
    1288:	8a 81       	ldd	r24, Y+2	; 0x02
    128a:	89 0f       	add	r24, r25
    128c:	8a 83       	std	Y+2, r24	; 0x02
	/*PIN RS SET LOW  */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_PIN_LOW);
	/*PIN RW SET HIGH  */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_PIN_HIGH);
	/*PIN SET  send pulse (E) */
	for (u8 i = 0; i < 7; i++) {
    128e:	89 81       	ldd	r24, Y+1	; 0x01
    1290:	8f 5f       	subi	r24, 0xFF	; 255
    1292:	89 83       	std	Y+1, r24	; 0x01
    1294:	89 81       	ldd	r24, Y+1	; 0x01
    1296:	87 30       	cpi	r24, 0x07	; 7
    1298:	08 f3       	brcs	.-62     	; 0x125c <CLCD_Read_BF_AC+0x24>
		DIO_u8GetPinValue(CLCD_DATA_PORT, i, &Local_u8Address);
		Local_u8Address += Local_u8Address << i;
	}
	return Local_u8Address;
    129a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    129c:	0f 90       	pop	r0
    129e:	0f 90       	pop	r0
    12a0:	cf 91       	pop	r28
    12a2:	df 91       	pop	r29
    12a4:	08 95       	ret

000012a6 <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
    12a6:	df 93       	push	r29
    12a8:	cf 93       	push	r28
    12aa:	cd b7       	in	r28, 0x3d	; 61
    12ac:	de b7       	in	r29, 0x3e	; 62
    12ae:	ac 97       	sbiw	r28, 0x2c	; 44
    12b0:	0f b6       	in	r0, 0x3f	; 63
    12b2:	f8 94       	cli
    12b4:	de bf       	out	0x3e, r29	; 62
    12b6:	0f be       	out	0x3f, r0	; 63
    12b8:	cd bf       	out	0x3d, r28	; 61
    12ba:	8c a7       	std	Y+44, r24	; 0x2c
	if (Local_u8Address > 0x0f)
		CLCD_voidSendCommand(0x0C);
	else
		CLCD_voidSendCommand(0x06);
#elif CLCD_CHIOCE_MODE==_4_BIT_MODE
	u8 Local_u8Mask = 0b11110000;
    12bc:	80 ef       	ldi	r24, 0xF0	; 240
    12be:	8b a7       	std	Y+43, r24	; 0x2b
	/*PIN RS SET LOW  */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_PIN_HIGH);
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	60 e0       	ldi	r22, 0x00	; 0
    12c4:	41 e0       	ldi	r20, 0x01	; 1
    12c6:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <DIO_u8SetPinValue>
	/*PIN RW SET LOW  */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_PIN_LOW);
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	61 e0       	ldi	r22, 0x01	; 1
    12ce:	40 e0       	ldi	r20, 0x00	; 0
    12d0:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <DIO_u8SetPinValue>
	/*PORT SET COMMAND*/
	Local_u8Mask &= Copy_u8Data;
    12d4:	9b a5       	ldd	r25, Y+43	; 0x2b
    12d6:	8c a5       	ldd	r24, Y+44	; 0x2c
    12d8:	89 23       	and	r24, r25
    12da:	8b a7       	std	Y+43, r24	; 0x2b
	DIO_u8SetPortValue(CLCD_DATA_PORT,Local_u8Mask);
    12dc:	80 e0       	ldi	r24, 0x00	; 0
    12de:	6b a5       	ldd	r22, Y+43	; 0x2b
    12e0:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <DIO_u8SetPortValue>
	/*PIN SET send pulse (E) */
	DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_PIN_HIGH);
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	62 e0       	ldi	r22, 0x02	; 2
    12e8:	41 e0       	ldi	r20, 0x01	; 1
    12ea:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <DIO_u8SetPinValue>
    12ee:	80 e0       	ldi	r24, 0x00	; 0
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	a0 e0       	ldi	r26, 0x00	; 0
    12f4:	b0 e4       	ldi	r27, 0x40	; 64
    12f6:	8f a3       	std	Y+39, r24	; 0x27
    12f8:	98 a7       	std	Y+40, r25	; 0x28
    12fa:	a9 a7       	std	Y+41, r26	; 0x29
    12fc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12fe:	6f a1       	ldd	r22, Y+39	; 0x27
    1300:	78 a5       	ldd	r23, Y+40	; 0x28
    1302:	89 a5       	ldd	r24, Y+41	; 0x29
    1304:	9a a5       	ldd	r25, Y+42	; 0x2a
    1306:	20 e0       	ldi	r18, 0x00	; 0
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	4a ef       	ldi	r20, 0xFA	; 250
    130c:	54 e4       	ldi	r21, 0x44	; 68
    130e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1312:	dc 01       	movw	r26, r24
    1314:	cb 01       	movw	r24, r22
    1316:	8b a3       	std	Y+35, r24	; 0x23
    1318:	9c a3       	std	Y+36, r25	; 0x24
    131a:	ad a3       	std	Y+37, r26	; 0x25
    131c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    131e:	6b a1       	ldd	r22, Y+35	; 0x23
    1320:	7c a1       	ldd	r23, Y+36	; 0x24
    1322:	8d a1       	ldd	r24, Y+37	; 0x25
    1324:	9e a1       	ldd	r25, Y+38	; 0x26
    1326:	20 e0       	ldi	r18, 0x00	; 0
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	40 e8       	ldi	r20, 0x80	; 128
    132c:	5f e3       	ldi	r21, 0x3F	; 63
    132e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1332:	88 23       	and	r24, r24
    1334:	2c f4       	brge	.+10     	; 0x1340 <CLCD_voidSendData+0x9a>
		__ticks = 1;
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	9a a3       	std	Y+34, r25	; 0x22
    133c:	89 a3       	std	Y+33, r24	; 0x21
    133e:	3f c0       	rjmp	.+126    	; 0x13be <CLCD_voidSendData+0x118>
	else if (__tmp > 65535)
    1340:	6b a1       	ldd	r22, Y+35	; 0x23
    1342:	7c a1       	ldd	r23, Y+36	; 0x24
    1344:	8d a1       	ldd	r24, Y+37	; 0x25
    1346:	9e a1       	ldd	r25, Y+38	; 0x26
    1348:	20 e0       	ldi	r18, 0x00	; 0
    134a:	3f ef       	ldi	r19, 0xFF	; 255
    134c:	4f e7       	ldi	r20, 0x7F	; 127
    134e:	57 e4       	ldi	r21, 0x47	; 71
    1350:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1354:	18 16       	cp	r1, r24
    1356:	4c f5       	brge	.+82     	; 0x13aa <CLCD_voidSendData+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1358:	6f a1       	ldd	r22, Y+39	; 0x27
    135a:	78 a5       	ldd	r23, Y+40	; 0x28
    135c:	89 a5       	ldd	r24, Y+41	; 0x29
    135e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1360:	20 e0       	ldi	r18, 0x00	; 0
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	40 e2       	ldi	r20, 0x20	; 32
    1366:	51 e4       	ldi	r21, 0x41	; 65
    1368:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    136c:	dc 01       	movw	r26, r24
    136e:	cb 01       	movw	r24, r22
    1370:	bc 01       	movw	r22, r24
    1372:	cd 01       	movw	r24, r26
    1374:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1378:	dc 01       	movw	r26, r24
    137a:	cb 01       	movw	r24, r22
    137c:	9a a3       	std	Y+34, r25	; 0x22
    137e:	89 a3       	std	Y+33, r24	; 0x21
    1380:	0f c0       	rjmp	.+30     	; 0x13a0 <CLCD_voidSendData+0xfa>
    1382:	88 ec       	ldi	r24, 0xC8	; 200
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	98 a3       	std	Y+32, r25	; 0x20
    1388:	8f 8f       	std	Y+31, r24	; 0x1f
    138a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    138c:	98 a1       	ldd	r25, Y+32	; 0x20
    138e:	01 97       	sbiw	r24, 0x01	; 1
    1390:	f1 f7       	brne	.-4      	; 0x138e <CLCD_voidSendData+0xe8>
    1392:	98 a3       	std	Y+32, r25	; 0x20
    1394:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1396:	89 a1       	ldd	r24, Y+33	; 0x21
    1398:	9a a1       	ldd	r25, Y+34	; 0x22
    139a:	01 97       	sbiw	r24, 0x01	; 1
    139c:	9a a3       	std	Y+34, r25	; 0x22
    139e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13a0:	89 a1       	ldd	r24, Y+33	; 0x21
    13a2:	9a a1       	ldd	r25, Y+34	; 0x22
    13a4:	00 97       	sbiw	r24, 0x00	; 0
    13a6:	69 f7       	brne	.-38     	; 0x1382 <CLCD_voidSendData+0xdc>
    13a8:	14 c0       	rjmp	.+40     	; 0x13d2 <CLCD_voidSendData+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13aa:	6b a1       	ldd	r22, Y+35	; 0x23
    13ac:	7c a1       	ldd	r23, Y+36	; 0x24
    13ae:	8d a1       	ldd	r24, Y+37	; 0x25
    13b0:	9e a1       	ldd	r25, Y+38	; 0x26
    13b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13b6:	dc 01       	movw	r26, r24
    13b8:	cb 01       	movw	r24, r22
    13ba:	9a a3       	std	Y+34, r25	; 0x22
    13bc:	89 a3       	std	Y+33, r24	; 0x21
    13be:	89 a1       	ldd	r24, Y+33	; 0x21
    13c0:	9a a1       	ldd	r25, Y+34	; 0x22
    13c2:	9e 8f       	std	Y+30, r25	; 0x1e
    13c4:	8d 8f       	std	Y+29, r24	; 0x1d
    13c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13c8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    13ca:	01 97       	sbiw	r24, 0x01	; 1
    13cc:	f1 f7       	brne	.-4      	; 0x13ca <CLCD_voidSendData+0x124>
    13ce:	9e 8f       	std	Y+30, r25	; 0x1e
    13d0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_PIN_LOW);
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	62 e0       	ldi	r22, 0x02	; 2
    13d6:	40 e0       	ldi	r20, 0x00	; 0
    13d8:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <DIO_u8SetPinValue>
	Local_u8Mask=0b11110000;
    13dc:	80 ef       	ldi	r24, 0xF0	; 240
    13de:	8b a7       	std	Y+43, r24	; 0x2b
	Local_u8Mask = ~(Local_u8Mask) & Copy_u8Data;
    13e0:	8b a5       	ldd	r24, Y+43	; 0x2b
    13e2:	98 2f       	mov	r25, r24
    13e4:	90 95       	com	r25
    13e6:	8c a5       	ldd	r24, Y+44	; 0x2c
    13e8:	89 23       	and	r24, r25
    13ea:	8b a7       	std	Y+43, r24	; 0x2b
	DIO_u8SetPortValue(CLCD_DATA_PORT, (Local_u8Mask << 4));
    13ec:	8b a5       	ldd	r24, Y+43	; 0x2b
    13ee:	98 2f       	mov	r25, r24
    13f0:	92 95       	swap	r25
    13f2:	90 7f       	andi	r25, 0xF0	; 240
    13f4:	80 e0       	ldi	r24, 0x00	; 0
    13f6:	69 2f       	mov	r22, r25
    13f8:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <DIO_u8SetPortValue>
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_PIN_HIGH);
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	62 e0       	ldi	r22, 0x02	; 2
    1400:	41 e0       	ldi	r20, 0x01	; 1
    1402:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <DIO_u8SetPinValue>
    1406:	80 e0       	ldi	r24, 0x00	; 0
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	a0 e0       	ldi	r26, 0x00	; 0
    140c:	b0 e4       	ldi	r27, 0x40	; 64
    140e:	89 8f       	std	Y+25, r24	; 0x19
    1410:	9a 8f       	std	Y+26, r25	; 0x1a
    1412:	ab 8f       	std	Y+27, r26	; 0x1b
    1414:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1416:	69 8d       	ldd	r22, Y+25	; 0x19
    1418:	7a 8d       	ldd	r23, Y+26	; 0x1a
    141a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    141c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    141e:	20 e0       	ldi	r18, 0x00	; 0
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	4a ef       	ldi	r20, 0xFA	; 250
    1424:	54 e4       	ldi	r21, 0x44	; 68
    1426:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    142a:	dc 01       	movw	r26, r24
    142c:	cb 01       	movw	r24, r22
    142e:	8d 8b       	std	Y+21, r24	; 0x15
    1430:	9e 8b       	std	Y+22, r25	; 0x16
    1432:	af 8b       	std	Y+23, r26	; 0x17
    1434:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1436:	6d 89       	ldd	r22, Y+21	; 0x15
    1438:	7e 89       	ldd	r23, Y+22	; 0x16
    143a:	8f 89       	ldd	r24, Y+23	; 0x17
    143c:	98 8d       	ldd	r25, Y+24	; 0x18
    143e:	20 e0       	ldi	r18, 0x00	; 0
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	40 e8       	ldi	r20, 0x80	; 128
    1444:	5f e3       	ldi	r21, 0x3F	; 63
    1446:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    144a:	88 23       	and	r24, r24
    144c:	2c f4       	brge	.+10     	; 0x1458 <CLCD_voidSendData+0x1b2>
		__ticks = 1;
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	9c 8b       	std	Y+20, r25	; 0x14
    1454:	8b 8b       	std	Y+19, r24	; 0x13
    1456:	3f c0       	rjmp	.+126    	; 0x14d6 <CLCD_voidSendData+0x230>
	else if (__tmp > 65535)
    1458:	6d 89       	ldd	r22, Y+21	; 0x15
    145a:	7e 89       	ldd	r23, Y+22	; 0x16
    145c:	8f 89       	ldd	r24, Y+23	; 0x17
    145e:	98 8d       	ldd	r25, Y+24	; 0x18
    1460:	20 e0       	ldi	r18, 0x00	; 0
    1462:	3f ef       	ldi	r19, 0xFF	; 255
    1464:	4f e7       	ldi	r20, 0x7F	; 127
    1466:	57 e4       	ldi	r21, 0x47	; 71
    1468:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    146c:	18 16       	cp	r1, r24
    146e:	4c f5       	brge	.+82     	; 0x14c2 <CLCD_voidSendData+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1470:	69 8d       	ldd	r22, Y+25	; 0x19
    1472:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1474:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1476:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1478:	20 e0       	ldi	r18, 0x00	; 0
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	40 e2       	ldi	r20, 0x20	; 32
    147e:	51 e4       	ldi	r21, 0x41	; 65
    1480:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1484:	dc 01       	movw	r26, r24
    1486:	cb 01       	movw	r24, r22
    1488:	bc 01       	movw	r22, r24
    148a:	cd 01       	movw	r24, r26
    148c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1490:	dc 01       	movw	r26, r24
    1492:	cb 01       	movw	r24, r22
    1494:	9c 8b       	std	Y+20, r25	; 0x14
    1496:	8b 8b       	std	Y+19, r24	; 0x13
    1498:	0f c0       	rjmp	.+30     	; 0x14b8 <CLCD_voidSendData+0x212>
    149a:	88 ec       	ldi	r24, 0xC8	; 200
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	9a 8b       	std	Y+18, r25	; 0x12
    14a0:	89 8b       	std	Y+17, r24	; 0x11
    14a2:	89 89       	ldd	r24, Y+17	; 0x11
    14a4:	9a 89       	ldd	r25, Y+18	; 0x12
    14a6:	01 97       	sbiw	r24, 0x01	; 1
    14a8:	f1 f7       	brne	.-4      	; 0x14a6 <CLCD_voidSendData+0x200>
    14aa:	9a 8b       	std	Y+18, r25	; 0x12
    14ac:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14ae:	8b 89       	ldd	r24, Y+19	; 0x13
    14b0:	9c 89       	ldd	r25, Y+20	; 0x14
    14b2:	01 97       	sbiw	r24, 0x01	; 1
    14b4:	9c 8b       	std	Y+20, r25	; 0x14
    14b6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14b8:	8b 89       	ldd	r24, Y+19	; 0x13
    14ba:	9c 89       	ldd	r25, Y+20	; 0x14
    14bc:	00 97       	sbiw	r24, 0x00	; 0
    14be:	69 f7       	brne	.-38     	; 0x149a <CLCD_voidSendData+0x1f4>
    14c0:	14 c0       	rjmp	.+40     	; 0x14ea <CLCD_voidSendData+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14c2:	6d 89       	ldd	r22, Y+21	; 0x15
    14c4:	7e 89       	ldd	r23, Y+22	; 0x16
    14c6:	8f 89       	ldd	r24, Y+23	; 0x17
    14c8:	98 8d       	ldd	r25, Y+24	; 0x18
    14ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ce:	dc 01       	movw	r26, r24
    14d0:	cb 01       	movw	r24, r22
    14d2:	9c 8b       	std	Y+20, r25	; 0x14
    14d4:	8b 8b       	std	Y+19, r24	; 0x13
    14d6:	8b 89       	ldd	r24, Y+19	; 0x13
    14d8:	9c 89       	ldd	r25, Y+20	; 0x14
    14da:	98 8b       	std	Y+16, r25	; 0x10
    14dc:	8f 87       	std	Y+15, r24	; 0x0f
    14de:	8f 85       	ldd	r24, Y+15	; 0x0f
    14e0:	98 89       	ldd	r25, Y+16	; 0x10
    14e2:	01 97       	sbiw	r24, 0x01	; 1
    14e4:	f1 f7       	brne	.-4      	; 0x14e2 <CLCD_voidSendData+0x23c>
    14e6:	98 8b       	std	Y+16, r25	; 0x10
    14e8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_PIN_LOW);
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	62 e0       	ldi	r22, 0x02	; 2
    14ee:	40 e0       	ldi	r20, 0x00	; 0
    14f0:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <DIO_u8SetPinValue>
    14f4:	80 e0       	ldi	r24, 0x00	; 0
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	a0 e0       	ldi	r26, 0x00	; 0
    14fa:	b0 e4       	ldi	r27, 0x40	; 64
    14fc:	8b 87       	std	Y+11, r24	; 0x0b
    14fe:	9c 87       	std	Y+12, r25	; 0x0c
    1500:	ad 87       	std	Y+13, r26	; 0x0d
    1502:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1504:	6b 85       	ldd	r22, Y+11	; 0x0b
    1506:	7c 85       	ldd	r23, Y+12	; 0x0c
    1508:	8d 85       	ldd	r24, Y+13	; 0x0d
    150a:	9e 85       	ldd	r25, Y+14	; 0x0e
    150c:	20 e0       	ldi	r18, 0x00	; 0
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	4a ef       	ldi	r20, 0xFA	; 250
    1512:	54 e4       	ldi	r21, 0x44	; 68
    1514:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1518:	dc 01       	movw	r26, r24
    151a:	cb 01       	movw	r24, r22
    151c:	8f 83       	std	Y+7, r24	; 0x07
    151e:	98 87       	std	Y+8, r25	; 0x08
    1520:	a9 87       	std	Y+9, r26	; 0x09
    1522:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1524:	6f 81       	ldd	r22, Y+7	; 0x07
    1526:	78 85       	ldd	r23, Y+8	; 0x08
    1528:	89 85       	ldd	r24, Y+9	; 0x09
    152a:	9a 85       	ldd	r25, Y+10	; 0x0a
    152c:	20 e0       	ldi	r18, 0x00	; 0
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	40 e8       	ldi	r20, 0x80	; 128
    1532:	5f e3       	ldi	r21, 0x3F	; 63
    1534:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1538:	88 23       	and	r24, r24
    153a:	2c f4       	brge	.+10     	; 0x1546 <CLCD_voidSendData+0x2a0>
		__ticks = 1;
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	9e 83       	std	Y+6, r25	; 0x06
    1542:	8d 83       	std	Y+5, r24	; 0x05
    1544:	3f c0       	rjmp	.+126    	; 0x15c4 <CLCD_voidSendData+0x31e>
	else if (__tmp > 65535)
    1546:	6f 81       	ldd	r22, Y+7	; 0x07
    1548:	78 85       	ldd	r23, Y+8	; 0x08
    154a:	89 85       	ldd	r24, Y+9	; 0x09
    154c:	9a 85       	ldd	r25, Y+10	; 0x0a
    154e:	20 e0       	ldi	r18, 0x00	; 0
    1550:	3f ef       	ldi	r19, 0xFF	; 255
    1552:	4f e7       	ldi	r20, 0x7F	; 127
    1554:	57 e4       	ldi	r21, 0x47	; 71
    1556:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    155a:	18 16       	cp	r1, r24
    155c:	4c f5       	brge	.+82     	; 0x15b0 <CLCD_voidSendData+0x30a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    155e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1560:	7c 85       	ldd	r23, Y+12	; 0x0c
    1562:	8d 85       	ldd	r24, Y+13	; 0x0d
    1564:	9e 85       	ldd	r25, Y+14	; 0x0e
    1566:	20 e0       	ldi	r18, 0x00	; 0
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	40 e2       	ldi	r20, 0x20	; 32
    156c:	51 e4       	ldi	r21, 0x41	; 65
    156e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1572:	dc 01       	movw	r26, r24
    1574:	cb 01       	movw	r24, r22
    1576:	bc 01       	movw	r22, r24
    1578:	cd 01       	movw	r24, r26
    157a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    157e:	dc 01       	movw	r26, r24
    1580:	cb 01       	movw	r24, r22
    1582:	9e 83       	std	Y+6, r25	; 0x06
    1584:	8d 83       	std	Y+5, r24	; 0x05
    1586:	0f c0       	rjmp	.+30     	; 0x15a6 <CLCD_voidSendData+0x300>
    1588:	88 ec       	ldi	r24, 0xC8	; 200
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	9c 83       	std	Y+4, r25	; 0x04
    158e:	8b 83       	std	Y+3, r24	; 0x03
    1590:	8b 81       	ldd	r24, Y+3	; 0x03
    1592:	9c 81       	ldd	r25, Y+4	; 0x04
    1594:	01 97       	sbiw	r24, 0x01	; 1
    1596:	f1 f7       	brne	.-4      	; 0x1594 <CLCD_voidSendData+0x2ee>
    1598:	9c 83       	std	Y+4, r25	; 0x04
    159a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    159c:	8d 81       	ldd	r24, Y+5	; 0x05
    159e:	9e 81       	ldd	r25, Y+6	; 0x06
    15a0:	01 97       	sbiw	r24, 0x01	; 1
    15a2:	9e 83       	std	Y+6, r25	; 0x06
    15a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15a6:	8d 81       	ldd	r24, Y+5	; 0x05
    15a8:	9e 81       	ldd	r25, Y+6	; 0x06
    15aa:	00 97       	sbiw	r24, 0x00	; 0
    15ac:	69 f7       	brne	.-38     	; 0x1588 <CLCD_voidSendData+0x2e2>
    15ae:	14 c0       	rjmp	.+40     	; 0x15d8 <CLCD_voidSendData+0x332>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15b0:	6f 81       	ldd	r22, Y+7	; 0x07
    15b2:	78 85       	ldd	r23, Y+8	; 0x08
    15b4:	89 85       	ldd	r24, Y+9	; 0x09
    15b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    15b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15bc:	dc 01       	movw	r26, r24
    15be:	cb 01       	movw	r24, r22
    15c0:	9e 83       	std	Y+6, r25	; 0x06
    15c2:	8d 83       	std	Y+5, r24	; 0x05
    15c4:	8d 81       	ldd	r24, Y+5	; 0x05
    15c6:	9e 81       	ldd	r25, Y+6	; 0x06
    15c8:	9a 83       	std	Y+2, r25	; 0x02
    15ca:	89 83       	std	Y+1, r24	; 0x01
    15cc:	89 81       	ldd	r24, Y+1	; 0x01
    15ce:	9a 81       	ldd	r25, Y+2	; 0x02
    15d0:	01 97       	sbiw	r24, 0x01	; 1
    15d2:	f1 f7       	brne	.-4      	; 0x15d0 <CLCD_voidSendData+0x32a>
    15d4:	9a 83       	std	Y+2, r25	; 0x02
    15d6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	CLCD_voidSendCommand(0x06);
    15d8:	86 e0       	ldi	r24, 0x06	; 6
    15da:	0e 94 75 07 	call	0xeea	; 0xeea <CLCD_voidSendCommand>
#else
#error "In correct cconfigrtion of LCD_MODE"
#endif
}
    15de:	ac 96       	adiw	r28, 0x2c	; 44
    15e0:	0f b6       	in	r0, 0x3f	; 63
    15e2:	f8 94       	cli
    15e4:	de bf       	out	0x3e, r29	; 62
    15e6:	0f be       	out	0x3f, r0	; 63
    15e8:	cd bf       	out	0x3d, r28	; 61
    15ea:	cf 91       	pop	r28
    15ec:	df 91       	pop	r29
    15ee:	08 95       	ret

000015f0 <CLCD_voidInit>:

void CLCD_voidInit(void)
{
    15f0:	df 93       	push	r29
    15f2:	cf 93       	push	r28
    15f4:	cd b7       	in	r28, 0x3d	; 61
    15f6:	de b7       	in	r29, 0x3e	; 62
    15f8:	e8 97       	sbiw	r28, 0x38	; 56
    15fa:	0f b6       	in	r0, 0x3f	; 63
    15fc:	f8 94       	cli
    15fe:	de bf       	out	0x3e, r29	; 62
    1600:	0f be       	out	0x3f, r0	; 63
    1602:	cd bf       	out	0x3d, r28	; 61
    1604:	80 e0       	ldi	r24, 0x00	; 0
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	a0 e2       	ldi	r26, 0x20	; 32
    160a:	b2 e4       	ldi	r27, 0x42	; 66
    160c:	8d ab       	std	Y+53, r24	; 0x35
    160e:	9e ab       	std	Y+54, r25	; 0x36
    1610:	af ab       	std	Y+55, r26	; 0x37
    1612:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1614:	6d a9       	ldd	r22, Y+53	; 0x35
    1616:	7e a9       	ldd	r23, Y+54	; 0x36
    1618:	8f a9       	ldd	r24, Y+55	; 0x37
    161a:	98 ad       	ldd	r25, Y+56	; 0x38
    161c:	20 e0       	ldi	r18, 0x00	; 0
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	4a ef       	ldi	r20, 0xFA	; 250
    1622:	54 e4       	ldi	r21, 0x44	; 68
    1624:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1628:	dc 01       	movw	r26, r24
    162a:	cb 01       	movw	r24, r22
    162c:	89 ab       	std	Y+49, r24	; 0x31
    162e:	9a ab       	std	Y+50, r25	; 0x32
    1630:	ab ab       	std	Y+51, r26	; 0x33
    1632:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1634:	69 a9       	ldd	r22, Y+49	; 0x31
    1636:	7a a9       	ldd	r23, Y+50	; 0x32
    1638:	8b a9       	ldd	r24, Y+51	; 0x33
    163a:	9c a9       	ldd	r25, Y+52	; 0x34
    163c:	20 e0       	ldi	r18, 0x00	; 0
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	40 e8       	ldi	r20, 0x80	; 128
    1642:	5f e3       	ldi	r21, 0x3F	; 63
    1644:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1648:	88 23       	and	r24, r24
    164a:	2c f4       	brge	.+10     	; 0x1656 <CLCD_voidInit+0x66>
		__ticks = 1;
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	98 ab       	std	Y+48, r25	; 0x30
    1652:	8f a7       	std	Y+47, r24	; 0x2f
    1654:	3f c0       	rjmp	.+126    	; 0x16d4 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    1656:	69 a9       	ldd	r22, Y+49	; 0x31
    1658:	7a a9       	ldd	r23, Y+50	; 0x32
    165a:	8b a9       	ldd	r24, Y+51	; 0x33
    165c:	9c a9       	ldd	r25, Y+52	; 0x34
    165e:	20 e0       	ldi	r18, 0x00	; 0
    1660:	3f ef       	ldi	r19, 0xFF	; 255
    1662:	4f e7       	ldi	r20, 0x7F	; 127
    1664:	57 e4       	ldi	r21, 0x47	; 71
    1666:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    166a:	18 16       	cp	r1, r24
    166c:	4c f5       	brge	.+82     	; 0x16c0 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    166e:	6d a9       	ldd	r22, Y+53	; 0x35
    1670:	7e a9       	ldd	r23, Y+54	; 0x36
    1672:	8f a9       	ldd	r24, Y+55	; 0x37
    1674:	98 ad       	ldd	r25, Y+56	; 0x38
    1676:	20 e0       	ldi	r18, 0x00	; 0
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	40 e2       	ldi	r20, 0x20	; 32
    167c:	51 e4       	ldi	r21, 0x41	; 65
    167e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1682:	dc 01       	movw	r26, r24
    1684:	cb 01       	movw	r24, r22
    1686:	bc 01       	movw	r22, r24
    1688:	cd 01       	movw	r24, r26
    168a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    168e:	dc 01       	movw	r26, r24
    1690:	cb 01       	movw	r24, r22
    1692:	98 ab       	std	Y+48, r25	; 0x30
    1694:	8f a7       	std	Y+47, r24	; 0x2f
    1696:	0f c0       	rjmp	.+30     	; 0x16b6 <CLCD_voidInit+0xc6>
    1698:	88 ec       	ldi	r24, 0xC8	; 200
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	9e a7       	std	Y+46, r25	; 0x2e
    169e:	8d a7       	std	Y+45, r24	; 0x2d
    16a0:	8d a5       	ldd	r24, Y+45	; 0x2d
    16a2:	9e a5       	ldd	r25, Y+46	; 0x2e
    16a4:	01 97       	sbiw	r24, 0x01	; 1
    16a6:	f1 f7       	brne	.-4      	; 0x16a4 <CLCD_voidInit+0xb4>
    16a8:	9e a7       	std	Y+46, r25	; 0x2e
    16aa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    16ae:	98 a9       	ldd	r25, Y+48	; 0x30
    16b0:	01 97       	sbiw	r24, 0x01	; 1
    16b2:	98 ab       	std	Y+48, r25	; 0x30
    16b4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    16b8:	98 a9       	ldd	r25, Y+48	; 0x30
    16ba:	00 97       	sbiw	r24, 0x00	; 0
    16bc:	69 f7       	brne	.-38     	; 0x1698 <CLCD_voidInit+0xa8>
    16be:	14 c0       	rjmp	.+40     	; 0x16e8 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16c0:	69 a9       	ldd	r22, Y+49	; 0x31
    16c2:	7a a9       	ldd	r23, Y+50	; 0x32
    16c4:	8b a9       	ldd	r24, Y+51	; 0x33
    16c6:	9c a9       	ldd	r25, Y+52	; 0x34
    16c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16cc:	dc 01       	movw	r26, r24
    16ce:	cb 01       	movw	r24, r22
    16d0:	98 ab       	std	Y+48, r25	; 0x30
    16d2:	8f a7       	std	Y+47, r24	; 0x2f
    16d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    16d6:	98 a9       	ldd	r25, Y+48	; 0x30
    16d8:	9c a7       	std	Y+44, r25	; 0x2c
    16da:	8b a7       	std	Y+43, r24	; 0x2b
    16dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    16de:	9c a5       	ldd	r25, Y+44	; 0x2c
    16e0:	01 97       	sbiw	r24, 0x01	; 1
    16e2:	f1 f7       	brne	.-4      	; 0x16e0 <CLCD_voidInit+0xf0>
    16e4:	9c a7       	std	Y+44, r25	; 0x2c
    16e6:	8b a7       	std	Y+43, r24	; 0x2b
	CLCD_voidSendCommand(0b00000001);
#elif CLCD_CHIOCE_MODE==_4_BIT_MODE
	/*WAIT FOR MORE THEN 30 MS*/
	_delay_ms(40);
	/*function set command: Set Bit 5 */
	CLCD_voidSendCommand(0b00100000);
    16e8:	80 e2       	ldi	r24, 0x20	; 32
    16ea:	0e 94 75 07 	call	0xeea	; 0xeea <CLCD_voidSendCommand>
	CLCD_voidSendCommand(0b00100000);
    16ee:	80 e2       	ldi	r24, 0x20	; 32
    16f0:	0e 94 75 07 	call	0xeea	; 0xeea <CLCD_voidSendCommand>

	/*function set command:(7_Bit) N --> Lines,(6_Bit) F --> 5*8 font */
	CLCD_voidSendCommand(0b10000000);
    16f4:	80 e8       	ldi	r24, 0x80	; 128
    16f6:	0e 94 75 07 	call	0xeea	; 0xeea <CLCD_voidSendCommand>
    16fa:	80 e0       	ldi	r24, 0x00	; 0
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	a0 e8       	ldi	r26, 0x80	; 128
    1700:	bf e3       	ldi	r27, 0x3F	; 63
    1702:	8f a3       	std	Y+39, r24	; 0x27
    1704:	98 a7       	std	Y+40, r25	; 0x28
    1706:	a9 a7       	std	Y+41, r26	; 0x29
    1708:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    170a:	6f a1       	ldd	r22, Y+39	; 0x27
    170c:	78 a5       	ldd	r23, Y+40	; 0x28
    170e:	89 a5       	ldd	r24, Y+41	; 0x29
    1710:	9a a5       	ldd	r25, Y+42	; 0x2a
    1712:	20 e0       	ldi	r18, 0x00	; 0
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	4a ef       	ldi	r20, 0xFA	; 250
    1718:	54 e4       	ldi	r21, 0x44	; 68
    171a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    171e:	dc 01       	movw	r26, r24
    1720:	cb 01       	movw	r24, r22
    1722:	8b a3       	std	Y+35, r24	; 0x23
    1724:	9c a3       	std	Y+36, r25	; 0x24
    1726:	ad a3       	std	Y+37, r26	; 0x25
    1728:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    172a:	6b a1       	ldd	r22, Y+35	; 0x23
    172c:	7c a1       	ldd	r23, Y+36	; 0x24
    172e:	8d a1       	ldd	r24, Y+37	; 0x25
    1730:	9e a1       	ldd	r25, Y+38	; 0x26
    1732:	20 e0       	ldi	r18, 0x00	; 0
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	40 e8       	ldi	r20, 0x80	; 128
    1738:	5f e3       	ldi	r21, 0x3F	; 63
    173a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    173e:	88 23       	and	r24, r24
    1740:	2c f4       	brge	.+10     	; 0x174c <CLCD_voidInit+0x15c>
		__ticks = 1;
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	9a a3       	std	Y+34, r25	; 0x22
    1748:	89 a3       	std	Y+33, r24	; 0x21
    174a:	3f c0       	rjmp	.+126    	; 0x17ca <CLCD_voidInit+0x1da>
	else if (__tmp > 65535)
    174c:	6b a1       	ldd	r22, Y+35	; 0x23
    174e:	7c a1       	ldd	r23, Y+36	; 0x24
    1750:	8d a1       	ldd	r24, Y+37	; 0x25
    1752:	9e a1       	ldd	r25, Y+38	; 0x26
    1754:	20 e0       	ldi	r18, 0x00	; 0
    1756:	3f ef       	ldi	r19, 0xFF	; 255
    1758:	4f e7       	ldi	r20, 0x7F	; 127
    175a:	57 e4       	ldi	r21, 0x47	; 71
    175c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1760:	18 16       	cp	r1, r24
    1762:	4c f5       	brge	.+82     	; 0x17b6 <CLCD_voidInit+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1764:	6f a1       	ldd	r22, Y+39	; 0x27
    1766:	78 a5       	ldd	r23, Y+40	; 0x28
    1768:	89 a5       	ldd	r24, Y+41	; 0x29
    176a:	9a a5       	ldd	r25, Y+42	; 0x2a
    176c:	20 e0       	ldi	r18, 0x00	; 0
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	40 e2       	ldi	r20, 0x20	; 32
    1772:	51 e4       	ldi	r21, 0x41	; 65
    1774:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1778:	dc 01       	movw	r26, r24
    177a:	cb 01       	movw	r24, r22
    177c:	bc 01       	movw	r22, r24
    177e:	cd 01       	movw	r24, r26
    1780:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1784:	dc 01       	movw	r26, r24
    1786:	cb 01       	movw	r24, r22
    1788:	9a a3       	std	Y+34, r25	; 0x22
    178a:	89 a3       	std	Y+33, r24	; 0x21
    178c:	0f c0       	rjmp	.+30     	; 0x17ac <CLCD_voidInit+0x1bc>
    178e:	88 ec       	ldi	r24, 0xC8	; 200
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	98 a3       	std	Y+32, r25	; 0x20
    1794:	8f 8f       	std	Y+31, r24	; 0x1f
    1796:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1798:	98 a1       	ldd	r25, Y+32	; 0x20
    179a:	01 97       	sbiw	r24, 0x01	; 1
    179c:	f1 f7       	brne	.-4      	; 0x179a <CLCD_voidInit+0x1aa>
    179e:	98 a3       	std	Y+32, r25	; 0x20
    17a0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17a2:	89 a1       	ldd	r24, Y+33	; 0x21
    17a4:	9a a1       	ldd	r25, Y+34	; 0x22
    17a6:	01 97       	sbiw	r24, 0x01	; 1
    17a8:	9a a3       	std	Y+34, r25	; 0x22
    17aa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17ac:	89 a1       	ldd	r24, Y+33	; 0x21
    17ae:	9a a1       	ldd	r25, Y+34	; 0x22
    17b0:	00 97       	sbiw	r24, 0x00	; 0
    17b2:	69 f7       	brne	.-38     	; 0x178e <CLCD_voidInit+0x19e>
    17b4:	14 c0       	rjmp	.+40     	; 0x17de <CLCD_voidInit+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17b6:	6b a1       	ldd	r22, Y+35	; 0x23
    17b8:	7c a1       	ldd	r23, Y+36	; 0x24
    17ba:	8d a1       	ldd	r24, Y+37	; 0x25
    17bc:	9e a1       	ldd	r25, Y+38	; 0x26
    17be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17c2:	dc 01       	movw	r26, r24
    17c4:	cb 01       	movw	r24, r22
    17c6:	9a a3       	std	Y+34, r25	; 0x22
    17c8:	89 a3       	std	Y+33, r24	; 0x21
    17ca:	89 a1       	ldd	r24, Y+33	; 0x21
    17cc:	9a a1       	ldd	r25, Y+34	; 0x22
    17ce:	9e 8f       	std	Y+30, r25	; 0x1e
    17d0:	8d 8f       	std	Y+29, r24	; 0x1d
    17d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17d4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17d6:	01 97       	sbiw	r24, 0x01	; 1
    17d8:	f1 f7       	brne	.-4      	; 0x17d6 <CLCD_voidInit+0x1e6>
    17da:	9e 8f       	std	Y+30, r25	; 0x1e
    17dc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	CLCD_voidSendCommand(0b0000);
    17de:	80 e0       	ldi	r24, 0x00	; 0
    17e0:	0e 94 75 07 	call	0xeea	; 0xeea <CLCD_voidSendCommand>
	/*Display No/00f ctrl  */
	/*Set Bit 7 ,(6_Bit) D --> display enable ,C --> disable cursor ,B --> no blink cursor*/
	CLCD_voidSendCommand(0b11000000);
    17e4:	80 ec       	ldi	r24, 0xC0	; 192
    17e6:	0e 94 75 07 	call	0xeea	; 0xeea <CLCD_voidSendCommand>
    17ea:	80 e0       	ldi	r24, 0x00	; 0
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	a0 e8       	ldi	r26, 0x80	; 128
    17f0:	bf e3       	ldi	r27, 0x3F	; 63
    17f2:	89 8f       	std	Y+25, r24	; 0x19
    17f4:	9a 8f       	std	Y+26, r25	; 0x1a
    17f6:	ab 8f       	std	Y+27, r26	; 0x1b
    17f8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17fa:	69 8d       	ldd	r22, Y+25	; 0x19
    17fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1800:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1802:	20 e0       	ldi	r18, 0x00	; 0
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	4a ef       	ldi	r20, 0xFA	; 250
    1808:	54 e4       	ldi	r21, 0x44	; 68
    180a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    180e:	dc 01       	movw	r26, r24
    1810:	cb 01       	movw	r24, r22
    1812:	8d 8b       	std	Y+21, r24	; 0x15
    1814:	9e 8b       	std	Y+22, r25	; 0x16
    1816:	af 8b       	std	Y+23, r26	; 0x17
    1818:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    181a:	6d 89       	ldd	r22, Y+21	; 0x15
    181c:	7e 89       	ldd	r23, Y+22	; 0x16
    181e:	8f 89       	ldd	r24, Y+23	; 0x17
    1820:	98 8d       	ldd	r25, Y+24	; 0x18
    1822:	20 e0       	ldi	r18, 0x00	; 0
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	40 e8       	ldi	r20, 0x80	; 128
    1828:	5f e3       	ldi	r21, 0x3F	; 63
    182a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    182e:	88 23       	and	r24, r24
    1830:	2c f4       	brge	.+10     	; 0x183c <CLCD_voidInit+0x24c>
		__ticks = 1;
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	9c 8b       	std	Y+20, r25	; 0x14
    1838:	8b 8b       	std	Y+19, r24	; 0x13
    183a:	3f c0       	rjmp	.+126    	; 0x18ba <CLCD_voidInit+0x2ca>
	else if (__tmp > 65535)
    183c:	6d 89       	ldd	r22, Y+21	; 0x15
    183e:	7e 89       	ldd	r23, Y+22	; 0x16
    1840:	8f 89       	ldd	r24, Y+23	; 0x17
    1842:	98 8d       	ldd	r25, Y+24	; 0x18
    1844:	20 e0       	ldi	r18, 0x00	; 0
    1846:	3f ef       	ldi	r19, 0xFF	; 255
    1848:	4f e7       	ldi	r20, 0x7F	; 127
    184a:	57 e4       	ldi	r21, 0x47	; 71
    184c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1850:	18 16       	cp	r1, r24
    1852:	4c f5       	brge	.+82     	; 0x18a6 <CLCD_voidInit+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1854:	69 8d       	ldd	r22, Y+25	; 0x19
    1856:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1858:	8b 8d       	ldd	r24, Y+27	; 0x1b
    185a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    185c:	20 e0       	ldi	r18, 0x00	; 0
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	40 e2       	ldi	r20, 0x20	; 32
    1862:	51 e4       	ldi	r21, 0x41	; 65
    1864:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1868:	dc 01       	movw	r26, r24
    186a:	cb 01       	movw	r24, r22
    186c:	bc 01       	movw	r22, r24
    186e:	cd 01       	movw	r24, r26
    1870:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1874:	dc 01       	movw	r26, r24
    1876:	cb 01       	movw	r24, r22
    1878:	9c 8b       	std	Y+20, r25	; 0x14
    187a:	8b 8b       	std	Y+19, r24	; 0x13
    187c:	0f c0       	rjmp	.+30     	; 0x189c <CLCD_voidInit+0x2ac>
    187e:	88 ec       	ldi	r24, 0xC8	; 200
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	9a 8b       	std	Y+18, r25	; 0x12
    1884:	89 8b       	std	Y+17, r24	; 0x11
    1886:	89 89       	ldd	r24, Y+17	; 0x11
    1888:	9a 89       	ldd	r25, Y+18	; 0x12
    188a:	01 97       	sbiw	r24, 0x01	; 1
    188c:	f1 f7       	brne	.-4      	; 0x188a <CLCD_voidInit+0x29a>
    188e:	9a 8b       	std	Y+18, r25	; 0x12
    1890:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1892:	8b 89       	ldd	r24, Y+19	; 0x13
    1894:	9c 89       	ldd	r25, Y+20	; 0x14
    1896:	01 97       	sbiw	r24, 0x01	; 1
    1898:	9c 8b       	std	Y+20, r25	; 0x14
    189a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    189c:	8b 89       	ldd	r24, Y+19	; 0x13
    189e:	9c 89       	ldd	r25, Y+20	; 0x14
    18a0:	00 97       	sbiw	r24, 0x00	; 0
    18a2:	69 f7       	brne	.-38     	; 0x187e <CLCD_voidInit+0x28e>
    18a4:	14 c0       	rjmp	.+40     	; 0x18ce <CLCD_voidInit+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18a6:	6d 89       	ldd	r22, Y+21	; 0x15
    18a8:	7e 89       	ldd	r23, Y+22	; 0x16
    18aa:	8f 89       	ldd	r24, Y+23	; 0x17
    18ac:	98 8d       	ldd	r25, Y+24	; 0x18
    18ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18b2:	dc 01       	movw	r26, r24
    18b4:	cb 01       	movw	r24, r22
    18b6:	9c 8b       	std	Y+20, r25	; 0x14
    18b8:	8b 8b       	std	Y+19, r24	; 0x13
    18ba:	8b 89       	ldd	r24, Y+19	; 0x13
    18bc:	9c 89       	ldd	r25, Y+20	; 0x14
    18be:	98 8b       	std	Y+16, r25	; 0x10
    18c0:	8f 87       	std	Y+15, r24	; 0x0f
    18c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    18c4:	98 89       	ldd	r25, Y+16	; 0x10
    18c6:	01 97       	sbiw	r24, 0x01	; 1
    18c8:	f1 f7       	brne	.-4      	; 0x18c6 <CLCD_voidInit+0x2d6>
    18ca:	98 8b       	std	Y+16, r25	; 0x10
    18cc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	CLCD_voidSendCommand(0b0000);
    18ce:	80 e0       	ldi	r24, 0x00	; 0
    18d0:	0e 94 75 07 	call	0xeea	; 0xeea <CLCD_voidSendCommand>
	/*Display Clear */
	CLCD_voidSendCommand(0b00010000);
    18d4:	80 e1       	ldi	r24, 0x10	; 16
    18d6:	0e 94 75 07 	call	0xeea	; 0xeea <CLCD_voidSendCommand>
    18da:	80 e0       	ldi	r24, 0x00	; 0
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	a0 e0       	ldi	r26, 0x00	; 0
    18e0:	b0 e4       	ldi	r27, 0x40	; 64
    18e2:	8b 87       	std	Y+11, r24	; 0x0b
    18e4:	9c 87       	std	Y+12, r25	; 0x0c
    18e6:	ad 87       	std	Y+13, r26	; 0x0d
    18e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    18ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    18ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    18f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    18f2:	20 e0       	ldi	r18, 0x00	; 0
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	4a ef       	ldi	r20, 0xFA	; 250
    18f8:	54 e4       	ldi	r21, 0x44	; 68
    18fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18fe:	dc 01       	movw	r26, r24
    1900:	cb 01       	movw	r24, r22
    1902:	8f 83       	std	Y+7, r24	; 0x07
    1904:	98 87       	std	Y+8, r25	; 0x08
    1906:	a9 87       	std	Y+9, r26	; 0x09
    1908:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    190a:	6f 81       	ldd	r22, Y+7	; 0x07
    190c:	78 85       	ldd	r23, Y+8	; 0x08
    190e:	89 85       	ldd	r24, Y+9	; 0x09
    1910:	9a 85       	ldd	r25, Y+10	; 0x0a
    1912:	20 e0       	ldi	r18, 0x00	; 0
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	40 e8       	ldi	r20, 0x80	; 128
    1918:	5f e3       	ldi	r21, 0x3F	; 63
    191a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    191e:	88 23       	and	r24, r24
    1920:	2c f4       	brge	.+10     	; 0x192c <CLCD_voidInit+0x33c>
		__ticks = 1;
    1922:	81 e0       	ldi	r24, 0x01	; 1
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	9e 83       	std	Y+6, r25	; 0x06
    1928:	8d 83       	std	Y+5, r24	; 0x05
    192a:	3f c0       	rjmp	.+126    	; 0x19aa <CLCD_voidInit+0x3ba>
	else if (__tmp > 65535)
    192c:	6f 81       	ldd	r22, Y+7	; 0x07
    192e:	78 85       	ldd	r23, Y+8	; 0x08
    1930:	89 85       	ldd	r24, Y+9	; 0x09
    1932:	9a 85       	ldd	r25, Y+10	; 0x0a
    1934:	20 e0       	ldi	r18, 0x00	; 0
    1936:	3f ef       	ldi	r19, 0xFF	; 255
    1938:	4f e7       	ldi	r20, 0x7F	; 127
    193a:	57 e4       	ldi	r21, 0x47	; 71
    193c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1940:	18 16       	cp	r1, r24
    1942:	4c f5       	brge	.+82     	; 0x1996 <CLCD_voidInit+0x3a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1944:	6b 85       	ldd	r22, Y+11	; 0x0b
    1946:	7c 85       	ldd	r23, Y+12	; 0x0c
    1948:	8d 85       	ldd	r24, Y+13	; 0x0d
    194a:	9e 85       	ldd	r25, Y+14	; 0x0e
    194c:	20 e0       	ldi	r18, 0x00	; 0
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	40 e2       	ldi	r20, 0x20	; 32
    1952:	51 e4       	ldi	r21, 0x41	; 65
    1954:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1958:	dc 01       	movw	r26, r24
    195a:	cb 01       	movw	r24, r22
    195c:	bc 01       	movw	r22, r24
    195e:	cd 01       	movw	r24, r26
    1960:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1964:	dc 01       	movw	r26, r24
    1966:	cb 01       	movw	r24, r22
    1968:	9e 83       	std	Y+6, r25	; 0x06
    196a:	8d 83       	std	Y+5, r24	; 0x05
    196c:	0f c0       	rjmp	.+30     	; 0x198c <CLCD_voidInit+0x39c>
    196e:	88 ec       	ldi	r24, 0xC8	; 200
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	9c 83       	std	Y+4, r25	; 0x04
    1974:	8b 83       	std	Y+3, r24	; 0x03
    1976:	8b 81       	ldd	r24, Y+3	; 0x03
    1978:	9c 81       	ldd	r25, Y+4	; 0x04
    197a:	01 97       	sbiw	r24, 0x01	; 1
    197c:	f1 f7       	brne	.-4      	; 0x197a <CLCD_voidInit+0x38a>
    197e:	9c 83       	std	Y+4, r25	; 0x04
    1980:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1982:	8d 81       	ldd	r24, Y+5	; 0x05
    1984:	9e 81       	ldd	r25, Y+6	; 0x06
    1986:	01 97       	sbiw	r24, 0x01	; 1
    1988:	9e 83       	std	Y+6, r25	; 0x06
    198a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    198c:	8d 81       	ldd	r24, Y+5	; 0x05
    198e:	9e 81       	ldd	r25, Y+6	; 0x06
    1990:	00 97       	sbiw	r24, 0x00	; 0
    1992:	69 f7       	brne	.-38     	; 0x196e <CLCD_voidInit+0x37e>
    1994:	14 c0       	rjmp	.+40     	; 0x19be <CLCD_voidInit+0x3ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1996:	6f 81       	ldd	r22, Y+7	; 0x07
    1998:	78 85       	ldd	r23, Y+8	; 0x08
    199a:	89 85       	ldd	r24, Y+9	; 0x09
    199c:	9a 85       	ldd	r25, Y+10	; 0x0a
    199e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19a2:	dc 01       	movw	r26, r24
    19a4:	cb 01       	movw	r24, r22
    19a6:	9e 83       	std	Y+6, r25	; 0x06
    19a8:	8d 83       	std	Y+5, r24	; 0x05
    19aa:	8d 81       	ldd	r24, Y+5	; 0x05
    19ac:	9e 81       	ldd	r25, Y+6	; 0x06
    19ae:	9a 83       	std	Y+2, r25	; 0x02
    19b0:	89 83       	std	Y+1, r24	; 0x01
    19b2:	89 81       	ldd	r24, Y+1	; 0x01
    19b4:	9a 81       	ldd	r25, Y+2	; 0x02
    19b6:	01 97       	sbiw	r24, 0x01	; 1
    19b8:	f1 f7       	brne	.-4      	; 0x19b6 <CLCD_voidInit+0x3c6>
    19ba:	9a 83       	std	Y+2, r25	; 0x02
    19bc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

	iniIsFinich=1;
    19be:	81 e0       	ldi	r24, 0x01	; 1
    19c0:	80 93 76 01 	sts	0x0176, r24
#else
#error "In correct cconfigrtion of LCD_MODE"
#endif
}
    19c4:	e8 96       	adiw	r28, 0x38	; 56
    19c6:	0f b6       	in	r0, 0x3f	; 63
    19c8:	f8 94       	cli
    19ca:	de bf       	out	0x3e, r29	; 62
    19cc:	0f be       	out	0x3f, r0	; 63
    19ce:	cd bf       	out	0x3d, r28	; 61
    19d0:	cf 91       	pop	r28
    19d2:	df 91       	pop	r29
    19d4:	08 95       	ret

000019d6 <CLCD_voidSendString>:
void CLCD_voidSendString(const char* Copy_pcString)//char ASCII Value Constant not allow the func to change the sent string
{
    19d6:	df 93       	push	r29
    19d8:	cf 93       	push	r28
    19da:	00 d0       	rcall	.+0      	; 0x19dc <CLCD_voidSendString+0x6>
    19dc:	0f 92       	push	r0
    19de:	cd b7       	in	r28, 0x3d	; 61
    19e0:	de b7       	in	r29, 0x3e	; 62
    19e2:	9b 83       	std	Y+3, r25	; 0x03
    19e4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8cnt=0;
    19e6:	19 82       	std	Y+1, r1	; 0x01
    19e8:	0e c0       	rjmp	.+28     	; 0x1a06 <CLCD_voidSendString+0x30>
	while(Copy_pcString[Local_u8cnt]!='\0')
	{
		CLCD_voidSendData(Copy_pcString[Local_u8cnt]);
    19ea:	89 81       	ldd	r24, Y+1	; 0x01
    19ec:	28 2f       	mov	r18, r24
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	8a 81       	ldd	r24, Y+2	; 0x02
    19f2:	9b 81       	ldd	r25, Y+3	; 0x03
    19f4:	fc 01       	movw	r30, r24
    19f6:	e2 0f       	add	r30, r18
    19f8:	f3 1f       	adc	r31, r19
    19fa:	80 81       	ld	r24, Z
    19fc:	0e 94 53 09 	call	0x12a6	; 0x12a6 <CLCD_voidSendData>
		Local_u8cnt++;
    1a00:	89 81       	ldd	r24, Y+1	; 0x01
    1a02:	8f 5f       	subi	r24, 0xFF	; 255
    1a04:	89 83       	std	Y+1, r24	; 0x01
#endif
}
void CLCD_voidSendString(const char* Copy_pcString)//char ASCII Value Constant not allow the func to change the sent string
{
	u8 Local_u8cnt=0;
	while(Copy_pcString[Local_u8cnt]!='\0')
    1a06:	89 81       	ldd	r24, Y+1	; 0x01
    1a08:	28 2f       	mov	r18, r24
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0e:	9b 81       	ldd	r25, Y+3	; 0x03
    1a10:	fc 01       	movw	r30, r24
    1a12:	e2 0f       	add	r30, r18
    1a14:	f3 1f       	adc	r31, r19
    1a16:	80 81       	ld	r24, Z
    1a18:	88 23       	and	r24, r24
    1a1a:	39 f7       	brne	.-50     	; 0x19ea <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(Copy_pcString[Local_u8cnt]);
		Local_u8cnt++;
	}
}
    1a1c:	0f 90       	pop	r0
    1a1e:	0f 90       	pop	r0
    1a20:	0f 90       	pop	r0
    1a22:	cf 91       	pop	r28
    1a24:	df 91       	pop	r29
    1a26:	08 95       	ret

00001a28 <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    1a28:	df 93       	push	r29
    1a2a:	cf 93       	push	r28
    1a2c:	00 d0       	rcall	.+0      	; 0x1a2e <CLCD_voidGoToXY+0x6>
    1a2e:	0f 92       	push	r0
    1a30:	cd b7       	in	r28, 0x3d	; 61
    1a32:	de b7       	in	r29, 0x3e	; 62
    1a34:	8a 83       	std	Y+2, r24	; 0x02
    1a36:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;
	if(Copy_u8XPos==0)
    1a38:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3a:	88 23       	and	r24, r24
    1a3c:	51 f4       	brne	.+20     	; 0x1a52 <CLCD_voidGoToXY+0x2a>
	{
		if (Copy_u8YPos > 15) {
    1a3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a40:	80 31       	cpi	r24, 0x10	; 16
    1a42:	20 f0       	brcs	.+8      	; 0x1a4c <CLCD_voidGoToXY+0x24>
			Local_u8Address = 0x40 + Copy_u8YPos;
    1a44:	8b 81       	ldd	r24, Y+3	; 0x03
    1a46:	80 5c       	subi	r24, 0xC0	; 192
    1a48:	89 83       	std	Y+1, r24	; 0x01
    1a4a:	09 c0       	rjmp	.+18     	; 0x1a5e <CLCD_voidGoToXY+0x36>
		} else {
			Local_u8Address = Copy_u8YPos;
    1a4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4e:	89 83       	std	Y+1, r24	; 0x01
    1a50:	06 c0       	rjmp	.+12     	; 0x1a5e <CLCD_voidGoToXY+0x36>
		}
	}
	else if(Copy_u8XPos==1)
    1a52:	8a 81       	ldd	r24, Y+2	; 0x02
    1a54:	81 30       	cpi	r24, 0x01	; 1
    1a56:	19 f4       	brne	.+6      	; 0x1a5e <CLCD_voidGoToXY+0x36>
	{
		Local_u8Address=0x40+Copy_u8YPos;
    1a58:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5a:	80 5c       	subi	r24, 0xC0	; 192
    1a5c:	89 83       	std	Y+1, r24	; 0x01
	}
	//put command from data sheet
	CLCD_voidSendCommand(Local_u8Address+128);
    1a5e:	89 81       	ldd	r24, Y+1	; 0x01
    1a60:	80 58       	subi	r24, 0x80	; 128
    1a62:	0e 94 75 07 	call	0xeea	; 0xeea <CLCD_voidSendCommand>
}
    1a66:	0f 90       	pop	r0
    1a68:	0f 90       	pop	r0
    1a6a:	0f 90       	pop	r0
    1a6c:	cf 91       	pop	r28
    1a6e:	df 91       	pop	r29
    1a70:	08 95       	ret

00001a72 <CLCD_voidWriteSpecialCharacter>:

void CLCD_voidWriteSpecialCharacter(u8* Copy_pu8Pattern, u8 Copy_u8PatternNmber,u8 Copy_u8XPos,u8 Copy_u8Ypos)
{
    1a72:	df 93       	push	r29
    1a74:	cf 93       	push	r28
    1a76:	cd b7       	in	r28, 0x3d	; 61
    1a78:	de b7       	in	r29, 0x3e	; 62
    1a7a:	27 97       	sbiw	r28, 0x07	; 7
    1a7c:	0f b6       	in	r0, 0x3f	; 63
    1a7e:	f8 94       	cli
    1a80:	de bf       	out	0x3e, r29	; 62
    1a82:	0f be       	out	0x3f, r0	; 63
    1a84:	cd bf       	out	0x3d, r28	; 61
    1a86:	9c 83       	std	Y+4, r25	; 0x04
    1a88:	8b 83       	std	Y+3, r24	; 0x03
    1a8a:	6d 83       	std	Y+5, r22	; 0x05
    1a8c:	4e 83       	std	Y+6, r20	; 0x06
    1a8e:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress=0;
    1a90:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8iterator;
	/*Calculate the CGRAM address whose each block is 8 bytes */
	Local_u8CGRAMAddress= Copy_u8PatternNmber*8;
    1a92:	8d 81       	ldd	r24, Y+5	; 0x05
    1a94:	88 2f       	mov	r24, r24
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	88 0f       	add	r24, r24
    1a9a:	99 1f       	adc	r25, r25
    1a9c:	88 0f       	add	r24, r24
    1a9e:	99 1f       	adc	r25, r25
    1aa0:	88 0f       	add	r24, r24
    1aa2:	99 1f       	adc	r25, r25
    1aa4:	8a 83       	std	Y+2, r24	; 0x02

	/*Send CGRAM address command to LCD, with setting bit 6 , clear bit 7 */
	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);
    1aa6:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa8:	80 5c       	subi	r24, 0xC0	; 192
    1aaa:	0e 94 75 07 	call	0xeea	; 0xeea <CLCD_voidSendCommand>

	/*Write the pattern into CGRAM */
	for(Local_u8iterator=0;Local_u8iterator<8;Local_u8iterator++)
    1aae:	19 82       	std	Y+1, r1	; 0x01
    1ab0:	0e c0       	rjmp	.+28     	; 0x1ace <CLCD_voidWriteSpecialCharacter+0x5c>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8iterator]);
    1ab2:	89 81       	ldd	r24, Y+1	; 0x01
    1ab4:	28 2f       	mov	r18, r24
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aba:	9c 81       	ldd	r25, Y+4	; 0x04
    1abc:	fc 01       	movw	r30, r24
    1abe:	e2 0f       	add	r30, r18
    1ac0:	f3 1f       	adc	r31, r19
    1ac2:	80 81       	ld	r24, Z
    1ac4:	0e 94 53 09 	call	0x12a6	; 0x12a6 <CLCD_voidSendData>

	/*Send CGRAM address command to LCD, with setting bit 6 , clear bit 7 */
	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);

	/*Write the pattern into CGRAM */
	for(Local_u8iterator=0;Local_u8iterator<8;Local_u8iterator++)
    1ac8:	89 81       	ldd	r24, Y+1	; 0x01
    1aca:	8f 5f       	subi	r24, 0xFF	; 255
    1acc:	89 83       	std	Y+1, r24	; 0x01
    1ace:	89 81       	ldd	r24, Y+1	; 0x01
    1ad0:	88 30       	cpi	r24, 0x08	; 8
    1ad2:	78 f3       	brcs	.-34     	; 0x1ab2 <CLCD_voidWriteSpecialCharacter+0x40>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8iterator]);
	}
	/* Go back to DDRAM to display the pattern */
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8Ypos);
    1ad4:	8e 81       	ldd	r24, Y+6	; 0x06
    1ad6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ad8:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <CLCD_voidGoToXY>

	/* Display the pattern written  in the CGRAM */
	CLCD_voidSendData(Copy_u8PatternNmber);
    1adc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ade:	0e 94 53 09 	call	0x12a6	; 0x12a6 <CLCD_voidSendData>

}
    1ae2:	27 96       	adiw	r28, 0x07	; 7
    1ae4:	0f b6       	in	r0, 0x3f	; 63
    1ae6:	f8 94       	cli
    1ae8:	de bf       	out	0x3e, r29	; 62
    1aea:	0f be       	out	0x3f, r0	; 63
    1aec:	cd bf       	out	0x3d, r28	; 61
    1aee:	cf 91       	pop	r28
    1af0:	df 91       	pop	r29
    1af2:	08 95       	ret

00001af4 <CLCD_voidWriteNumber>:

void CLCD_voidWriteNumber(u16 Copy_u16Number)
{
    1af4:	df 93       	push	r29
    1af6:	cf 93       	push	r28
    1af8:	00 d0       	rcall	.+0      	; 0x1afa <CLCD_voidWriteNumber+0x6>
    1afa:	00 d0       	rcall	.+0      	; 0x1afc <CLCD_voidWriteNumber+0x8>
    1afc:	cd b7       	in	r28, 0x3d	; 61
    1afe:	de b7       	in	r29, 0x3e	; 62
    1b00:	9c 83       	std	Y+4, r25	; 0x04
    1b02:	8b 83       	std	Y+3, r24	; 0x03

	u8 Max_Digits = Num_length(Copy_u16Number);
    1b04:	8b 81       	ldd	r24, Y+3	; 0x03
    1b06:	9c 81       	ldd	r25, Y+4	; 0x04
    1b08:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <Num_length>
    1b0c:	8a 83       	std	Y+2, r24	; 0x02
	for (s8 i = Max_Digits; i > 0; i--) {
    1b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b10:	89 83       	std	Y+1, r24	; 0x01
    1b12:	1d c0       	rjmp	.+58     	; 0x1b4e <CLCD_voidWriteNumber+0x5a>
		CLCD_voidSendData((Copy_u16Number / Multi_N_10(i - 1)) + '0');
    1b14:	89 81       	ldd	r24, Y+1	; 0x01
    1b16:	81 50       	subi	r24, 0x01	; 1
    1b18:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <Multi_N_10>
    1b1c:	9c 01       	movw	r18, r24
    1b1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b20:	9c 81       	ldd	r25, Y+4	; 0x04
    1b22:	b9 01       	movw	r22, r18
    1b24:	0e 94 dd 16 	call	0x2dba	; 0x2dba <__udivmodhi4>
    1b28:	cb 01       	movw	r24, r22
    1b2a:	80 5d       	subi	r24, 0xD0	; 208
    1b2c:	0e 94 53 09 	call	0x12a6	; 0x12a6 <CLCD_voidSendData>
		Copy_u16Number = (Copy_u16Number % Multi_N_10(i - 1));
    1b30:	89 81       	ldd	r24, Y+1	; 0x01
    1b32:	81 50       	subi	r24, 0x01	; 1
    1b34:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <Multi_N_10>
    1b38:	9c 01       	movw	r18, r24
    1b3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b3e:	b9 01       	movw	r22, r18
    1b40:	0e 94 dd 16 	call	0x2dba	; 0x2dba <__udivmodhi4>
    1b44:	9c 83       	std	Y+4, r25	; 0x04
    1b46:	8b 83       	std	Y+3, r24	; 0x03

void CLCD_voidWriteNumber(u16 Copy_u16Number)
{

	u8 Max_Digits = Num_length(Copy_u16Number);
	for (s8 i = Max_Digits; i > 0; i--) {
    1b48:	89 81       	ldd	r24, Y+1	; 0x01
    1b4a:	81 50       	subi	r24, 0x01	; 1
    1b4c:	89 83       	std	Y+1, r24	; 0x01
    1b4e:	89 81       	ldd	r24, Y+1	; 0x01
    1b50:	18 16       	cp	r1, r24
    1b52:	04 f3       	brlt	.-64     	; 0x1b14 <CLCD_voidWriteNumber+0x20>
		CLCD_voidSendData((Copy_u16Number / Multi_N_10(i - 1)) + '0');
		Copy_u16Number = (Copy_u16Number % Multi_N_10(i - 1));
	}
}
    1b54:	0f 90       	pop	r0
    1b56:	0f 90       	pop	r0
    1b58:	0f 90       	pop	r0
    1b5a:	0f 90       	pop	r0
    1b5c:	cf 91       	pop	r28
    1b5e:	df 91       	pop	r29
    1b60:	08 95       	ret

00001b62 <Num_length>:


static u8 Num_length(u16 num) {
    1b62:	df 93       	push	r29
    1b64:	cf 93       	push	r28
    1b66:	00 d0       	rcall	.+0      	; 0x1b68 <Num_length+0x6>
    1b68:	00 d0       	rcall	.+0      	; 0x1b6a <Num_length+0x8>
    1b6a:	cd b7       	in	r28, 0x3d	; 61
    1b6c:	de b7       	in	r29, 0x3e	; 62
    1b6e:	9b 83       	std	Y+3, r25	; 0x03
    1b70:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Cnt = 0;
    1b72:	19 82       	std	Y+1, r1	; 0x01
	if(num == 0)
    1b74:	8a 81       	ldd	r24, Y+2	; 0x02
    1b76:	9b 81       	ldd	r25, Y+3	; 0x03
    1b78:	00 97       	sbiw	r24, 0x00	; 0
    1b7a:	81 f4       	brne	.+32     	; 0x1b9c <Num_length+0x3a>
		return 1;
    1b7c:	81 e0       	ldi	r24, 0x01	; 1
    1b7e:	8c 83       	std	Y+4, r24	; 0x04
    1b80:	13 c0       	rjmp	.+38     	; 0x1ba8 <Num_length+0x46>
	while (num != 0) {
		num /= 10;
    1b82:	8a 81       	ldd	r24, Y+2	; 0x02
    1b84:	9b 81       	ldd	r25, Y+3	; 0x03
    1b86:	2a e0       	ldi	r18, 0x0A	; 10
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	b9 01       	movw	r22, r18
    1b8c:	0e 94 dd 16 	call	0x2dba	; 0x2dba <__udivmodhi4>
    1b90:	cb 01       	movw	r24, r22
    1b92:	9b 83       	std	Y+3, r25	; 0x03
    1b94:	8a 83       	std	Y+2, r24	; 0x02
		Local_u8Cnt++;
    1b96:	89 81       	ldd	r24, Y+1	; 0x01
    1b98:	8f 5f       	subi	r24, 0xFF	; 255
    1b9a:	89 83       	std	Y+1, r24	; 0x01

static u8 Num_length(u16 num) {
	u8 Local_u8Cnt = 0;
	if(num == 0)
		return 1;
	while (num != 0) {
    1b9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9e:	9b 81       	ldd	r25, Y+3	; 0x03
    1ba0:	00 97       	sbiw	r24, 0x00	; 0
    1ba2:	79 f7       	brne	.-34     	; 0x1b82 <Num_length+0x20>
		num /= 10;
		Local_u8Cnt++;
	}
	return Local_u8Cnt;
    1ba4:	89 81       	ldd	r24, Y+1	; 0x01
    1ba6:	8c 83       	std	Y+4, r24	; 0x04
    1ba8:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1baa:	0f 90       	pop	r0
    1bac:	0f 90       	pop	r0
    1bae:	0f 90       	pop	r0
    1bb0:	0f 90       	pop	r0
    1bb2:	cf 91       	pop	r28
    1bb4:	df 91       	pop	r29
    1bb6:	08 95       	ret

00001bb8 <Multi_N_10>:
static u16 Multi_N_10(u8 N) {
    1bb8:	df 93       	push	r29
    1bba:	cf 93       	push	r28
    1bbc:	00 d0       	rcall	.+0      	; 0x1bbe <Multi_N_10+0x6>
    1bbe:	00 d0       	rcall	.+0      	; 0x1bc0 <Multi_N_10+0x8>
    1bc0:	cd b7       	in	r28, 0x3d	; 61
    1bc2:	de b7       	in	r29, 0x3e	; 62
    1bc4:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_u8Cnt;
	u16 p = 1;
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	9a 83       	std	Y+2, r25	; 0x02
    1bcc:	89 83       	std	Y+1, r24	; 0x01
	for (Local_u8Cnt = 0; Local_u8Cnt < N; Local_u8Cnt++)
    1bce:	1b 82       	std	Y+3, r1	; 0x03
    1bd0:	11 c0       	rjmp	.+34     	; 0x1bf4 <Multi_N_10+0x3c>
		p *= 10;
    1bd2:	89 81       	ldd	r24, Y+1	; 0x01
    1bd4:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd6:	9c 01       	movw	r18, r24
    1bd8:	22 0f       	add	r18, r18
    1bda:	33 1f       	adc	r19, r19
    1bdc:	c9 01       	movw	r24, r18
    1bde:	88 0f       	add	r24, r24
    1be0:	99 1f       	adc	r25, r25
    1be2:	88 0f       	add	r24, r24
    1be4:	99 1f       	adc	r25, r25
    1be6:	82 0f       	add	r24, r18
    1be8:	93 1f       	adc	r25, r19
    1bea:	9a 83       	std	Y+2, r25	; 0x02
    1bec:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8Cnt;
}
static u16 Multi_N_10(u8 N) {
	u8 Local_u8Cnt;
	u16 p = 1;
	for (Local_u8Cnt = 0; Local_u8Cnt < N; Local_u8Cnt++)
    1bee:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf0:	8f 5f       	subi	r24, 0xFF	; 255
    1bf2:	8b 83       	std	Y+3, r24	; 0x03
    1bf4:	9b 81       	ldd	r25, Y+3	; 0x03
    1bf6:	8c 81       	ldd	r24, Y+4	; 0x04
    1bf8:	98 17       	cp	r25, r24
    1bfa:	58 f3       	brcs	.-42     	; 0x1bd2 <Multi_N_10+0x1a>
		p *= 10;
	return p;
    1bfc:	89 81       	ldd	r24, Y+1	; 0x01
    1bfe:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1c00:	0f 90       	pop	r0
    1c02:	0f 90       	pop	r0
    1c04:	0f 90       	pop	r0
    1c06:	0f 90       	pop	r0
    1c08:	cf 91       	pop	r28
    1c0a:	df 91       	pop	r29
    1c0c:	08 95       	ret

00001c0e <DIO_u8SetPinValue>:

#include "../MCAL/DIO_interface.h"
#include "../MCAL/DIO_register.h"

u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
    1c0e:	df 93       	push	r29
    1c10:	cf 93       	push	r28
    1c12:	cd b7       	in	r28, 0x3d	; 61
    1c14:	de b7       	in	r29, 0x3e	; 62
    1c16:	28 97       	sbiw	r28, 0x08	; 8
    1c18:	0f b6       	in	r0, 0x3f	; 63
    1c1a:	f8 94       	cli
    1c1c:	de bf       	out	0x3e, r29	; 62
    1c1e:	0f be       	out	0x3f, r0	; 63
    1c20:	cd bf       	out	0x3d, r28	; 61
    1c22:	8a 83       	std	Y+2, r24	; 0x02
    1c24:	6b 83       	std	Y+3, r22	; 0x03
    1c26:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    1c28:	19 82       	std	Y+1, r1	; 0x01
	if(DIO_PIN_HIGH==Copy_u8Value)
    1c2a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c2c:	81 30       	cpi	r24, 0x01	; 1
    1c2e:	09 f0       	breq	.+2      	; 0x1c32 <DIO_u8SetPinValue+0x24>
    1c30:	79 c0       	rjmp	.+242    	; 0x1d24 <DIO_u8SetPinValue+0x116>
	{
		if((0<=Copy_u8Pin)&&(Copy_u8Pin<=7))
    1c32:	8b 81       	ldd	r24, Y+3	; 0x03
    1c34:	88 30       	cpi	r24, 0x08	; 8
    1c36:	08 f0       	brcs	.+2      	; 0x1c3a <DIO_u8SetPinValue+0x2c>
    1c38:	72 c0       	rjmp	.+228    	; 0x1d1e <DIO_u8SetPinValue+0x110>
		{
			switch(Copy_u8Port)
    1c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3c:	28 2f       	mov	r18, r24
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	38 87       	std	Y+8, r19	; 0x08
    1c42:	2f 83       	std	Y+7, r18	; 0x07
    1c44:	8f 81       	ldd	r24, Y+7	; 0x07
    1c46:	98 85       	ldd	r25, Y+8	; 0x08
    1c48:	81 30       	cpi	r24, 0x01	; 1
    1c4a:	91 05       	cpc	r25, r1
    1c4c:	49 f1       	breq	.+82     	; 0x1ca0 <DIO_u8SetPinValue+0x92>
    1c4e:	2f 81       	ldd	r18, Y+7	; 0x07
    1c50:	38 85       	ldd	r19, Y+8	; 0x08
    1c52:	22 30       	cpi	r18, 0x02	; 2
    1c54:	31 05       	cpc	r19, r1
    1c56:	2c f4       	brge	.+10     	; 0x1c62 <DIO_u8SetPinValue+0x54>
    1c58:	8f 81       	ldd	r24, Y+7	; 0x07
    1c5a:	98 85       	ldd	r25, Y+8	; 0x08
    1c5c:	00 97       	sbiw	r24, 0x00	; 0
    1c5e:	61 f0       	breq	.+24     	; 0x1c78 <DIO_u8SetPinValue+0x6a>
    1c60:	5b c0       	rjmp	.+182    	; 0x1d18 <DIO_u8SetPinValue+0x10a>
    1c62:	2f 81       	ldd	r18, Y+7	; 0x07
    1c64:	38 85       	ldd	r19, Y+8	; 0x08
    1c66:	22 30       	cpi	r18, 0x02	; 2
    1c68:	31 05       	cpc	r19, r1
    1c6a:	71 f1       	breq	.+92     	; 0x1cc8 <DIO_u8SetPinValue+0xba>
    1c6c:	8f 81       	ldd	r24, Y+7	; 0x07
    1c6e:	98 85       	ldd	r25, Y+8	; 0x08
    1c70:	83 30       	cpi	r24, 0x03	; 3
    1c72:	91 05       	cpc	r25, r1
    1c74:	e9 f1       	breq	.+122    	; 0x1cf0 <DIO_u8SetPinValue+0xe2>
    1c76:	50 c0       	rjmp	.+160    	; 0x1d18 <DIO_u8SetPinValue+0x10a>
			{
				case DIO_PORTA:SET_BIT(PORTA,Copy_u8Pin);break;
    1c78:	ab e3       	ldi	r26, 0x3B	; 59
    1c7a:	b0 e0       	ldi	r27, 0x00	; 0
    1c7c:	eb e3       	ldi	r30, 0x3B	; 59
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	80 81       	ld	r24, Z
    1c82:	48 2f       	mov	r20, r24
    1c84:	8b 81       	ldd	r24, Y+3	; 0x03
    1c86:	28 2f       	mov	r18, r24
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	81 e0       	ldi	r24, 0x01	; 1
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	02 2e       	mov	r0, r18
    1c90:	02 c0       	rjmp	.+4      	; 0x1c96 <DIO_u8SetPinValue+0x88>
    1c92:	88 0f       	add	r24, r24
    1c94:	99 1f       	adc	r25, r25
    1c96:	0a 94       	dec	r0
    1c98:	e2 f7       	brpl	.-8      	; 0x1c92 <DIO_u8SetPinValue+0x84>
    1c9a:	84 2b       	or	r24, r20
    1c9c:	8c 93       	st	X, r24
    1c9e:	c6 c0       	rjmp	.+396    	; 0x1e2c <DIO_u8SetPinValue+0x21e>
				case DIO_PORTB:SET_BIT(PORTB,Copy_u8Pin);break;
    1ca0:	a8 e3       	ldi	r26, 0x38	; 56
    1ca2:	b0 e0       	ldi	r27, 0x00	; 0
    1ca4:	e8 e3       	ldi	r30, 0x38	; 56
    1ca6:	f0 e0       	ldi	r31, 0x00	; 0
    1ca8:	80 81       	ld	r24, Z
    1caa:	48 2f       	mov	r20, r24
    1cac:	8b 81       	ldd	r24, Y+3	; 0x03
    1cae:	28 2f       	mov	r18, r24
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	81 e0       	ldi	r24, 0x01	; 1
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	02 2e       	mov	r0, r18
    1cb8:	02 c0       	rjmp	.+4      	; 0x1cbe <DIO_u8SetPinValue+0xb0>
    1cba:	88 0f       	add	r24, r24
    1cbc:	99 1f       	adc	r25, r25
    1cbe:	0a 94       	dec	r0
    1cc0:	e2 f7       	brpl	.-8      	; 0x1cba <DIO_u8SetPinValue+0xac>
    1cc2:	84 2b       	or	r24, r20
    1cc4:	8c 93       	st	X, r24
    1cc6:	b2 c0       	rjmp	.+356    	; 0x1e2c <DIO_u8SetPinValue+0x21e>
				case DIO_PORTC:SET_BIT(PORTC,Copy_u8Pin);break;
    1cc8:	a5 e3       	ldi	r26, 0x35	; 53
    1cca:	b0 e0       	ldi	r27, 0x00	; 0
    1ccc:	e5 e3       	ldi	r30, 0x35	; 53
    1cce:	f0 e0       	ldi	r31, 0x00	; 0
    1cd0:	80 81       	ld	r24, Z
    1cd2:	48 2f       	mov	r20, r24
    1cd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd6:	28 2f       	mov	r18, r24
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	02 2e       	mov	r0, r18
    1ce0:	02 c0       	rjmp	.+4      	; 0x1ce6 <DIO_u8SetPinValue+0xd8>
    1ce2:	88 0f       	add	r24, r24
    1ce4:	99 1f       	adc	r25, r25
    1ce6:	0a 94       	dec	r0
    1ce8:	e2 f7       	brpl	.-8      	; 0x1ce2 <DIO_u8SetPinValue+0xd4>
    1cea:	84 2b       	or	r24, r20
    1cec:	8c 93       	st	X, r24
    1cee:	9e c0       	rjmp	.+316    	; 0x1e2c <DIO_u8SetPinValue+0x21e>
				case DIO_PORTD:SET_BIT(PORTD,Copy_u8Pin);break;
    1cf0:	a2 e3       	ldi	r26, 0x32	; 50
    1cf2:	b0 e0       	ldi	r27, 0x00	; 0
    1cf4:	e2 e3       	ldi	r30, 0x32	; 50
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	80 81       	ld	r24, Z
    1cfa:	48 2f       	mov	r20, r24
    1cfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfe:	28 2f       	mov	r18, r24
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	02 2e       	mov	r0, r18
    1d08:	02 c0       	rjmp	.+4      	; 0x1d0e <DIO_u8SetPinValue+0x100>
    1d0a:	88 0f       	add	r24, r24
    1d0c:	99 1f       	adc	r25, r25
    1d0e:	0a 94       	dec	r0
    1d10:	e2 f7       	brpl	.-8      	; 0x1d0a <DIO_u8SetPinValue+0xfc>
    1d12:	84 2b       	or	r24, r20
    1d14:	8c 93       	st	X, r24
    1d16:	8a c0       	rjmp	.+276    	; 0x1e2c <DIO_u8SetPinValue+0x21e>
				default: Local_u8ErrorState=1;				
    1d18:	81 e0       	ldi	r24, 0x01	; 1
    1d1a:	89 83       	std	Y+1, r24	; 0x01
    1d1c:	87 c0       	rjmp	.+270    	; 0x1e2c <DIO_u8SetPinValue+0x21e>
			}
		}
		else
			Local_u8ErrorState=1;
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	89 83       	std	Y+1, r24	; 0x01
    1d22:	84 c0       	rjmp	.+264    	; 0x1e2c <DIO_u8SetPinValue+0x21e>
	}
	else if(DIO_PIN_LOW==Copy_u8Value)
    1d24:	8c 81       	ldd	r24, Y+4	; 0x04
    1d26:	88 23       	and	r24, r24
    1d28:	09 f0       	breq	.+2      	; 0x1d2c <DIO_u8SetPinValue+0x11e>
    1d2a:	7e c0       	rjmp	.+252    	; 0x1e28 <DIO_u8SetPinValue+0x21a>
	{
		if((0<=Copy_u8Pin)&&(Copy_u8Pin<=7))
    1d2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2e:	88 30       	cpi	r24, 0x08	; 8
    1d30:	08 f0       	brcs	.+2      	; 0x1d34 <DIO_u8SetPinValue+0x126>
    1d32:	77 c0       	rjmp	.+238    	; 0x1e22 <DIO_u8SetPinValue+0x214>
		{
			switch(Copy_u8Port)
    1d34:	8a 81       	ldd	r24, Y+2	; 0x02
    1d36:	28 2f       	mov	r18, r24
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	3e 83       	std	Y+6, r19	; 0x06
    1d3c:	2d 83       	std	Y+5, r18	; 0x05
    1d3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d40:	9e 81       	ldd	r25, Y+6	; 0x06
    1d42:	81 30       	cpi	r24, 0x01	; 1
    1d44:	91 05       	cpc	r25, r1
    1d46:	59 f1       	breq	.+86     	; 0x1d9e <DIO_u8SetPinValue+0x190>
    1d48:	2d 81       	ldd	r18, Y+5	; 0x05
    1d4a:	3e 81       	ldd	r19, Y+6	; 0x06
    1d4c:	22 30       	cpi	r18, 0x02	; 2
    1d4e:	31 05       	cpc	r19, r1
    1d50:	2c f4       	brge	.+10     	; 0x1d5c <DIO_u8SetPinValue+0x14e>
    1d52:	8d 81       	ldd	r24, Y+5	; 0x05
    1d54:	9e 81       	ldd	r25, Y+6	; 0x06
    1d56:	00 97       	sbiw	r24, 0x00	; 0
    1d58:	69 f0       	breq	.+26     	; 0x1d74 <DIO_u8SetPinValue+0x166>
    1d5a:	60 c0       	rjmp	.+192    	; 0x1e1c <DIO_u8SetPinValue+0x20e>
    1d5c:	2d 81       	ldd	r18, Y+5	; 0x05
    1d5e:	3e 81       	ldd	r19, Y+6	; 0x06
    1d60:	22 30       	cpi	r18, 0x02	; 2
    1d62:	31 05       	cpc	r19, r1
    1d64:	89 f1       	breq	.+98     	; 0x1dc8 <DIO_u8SetPinValue+0x1ba>
    1d66:	8d 81       	ldd	r24, Y+5	; 0x05
    1d68:	9e 81       	ldd	r25, Y+6	; 0x06
    1d6a:	83 30       	cpi	r24, 0x03	; 3
    1d6c:	91 05       	cpc	r25, r1
    1d6e:	09 f4       	brne	.+2      	; 0x1d72 <DIO_u8SetPinValue+0x164>
    1d70:	40 c0       	rjmp	.+128    	; 0x1df2 <DIO_u8SetPinValue+0x1e4>
    1d72:	54 c0       	rjmp	.+168    	; 0x1e1c <DIO_u8SetPinValue+0x20e>
			{
				case DIO_PORTA:CLR_BIT(PORTA,Copy_u8Pin);break;
    1d74:	ab e3       	ldi	r26, 0x3B	; 59
    1d76:	b0 e0       	ldi	r27, 0x00	; 0
    1d78:	eb e3       	ldi	r30, 0x3B	; 59
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	80 81       	ld	r24, Z
    1d7e:	48 2f       	mov	r20, r24
    1d80:	8b 81       	ldd	r24, Y+3	; 0x03
    1d82:	28 2f       	mov	r18, r24
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	02 2e       	mov	r0, r18
    1d8c:	02 c0       	rjmp	.+4      	; 0x1d92 <DIO_u8SetPinValue+0x184>
    1d8e:	88 0f       	add	r24, r24
    1d90:	99 1f       	adc	r25, r25
    1d92:	0a 94       	dec	r0
    1d94:	e2 f7       	brpl	.-8      	; 0x1d8e <DIO_u8SetPinValue+0x180>
    1d96:	80 95       	com	r24
    1d98:	84 23       	and	r24, r20
    1d9a:	8c 93       	st	X, r24
    1d9c:	47 c0       	rjmp	.+142    	; 0x1e2c <DIO_u8SetPinValue+0x21e>
				case DIO_PORTB:CLR_BIT(PORTB,Copy_u8Pin);break;
    1d9e:	a8 e3       	ldi	r26, 0x38	; 56
    1da0:	b0 e0       	ldi	r27, 0x00	; 0
    1da2:	e8 e3       	ldi	r30, 0x38	; 56
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	80 81       	ld	r24, Z
    1da8:	48 2f       	mov	r20, r24
    1daa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dac:	28 2f       	mov	r18, r24
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	02 2e       	mov	r0, r18
    1db6:	02 c0       	rjmp	.+4      	; 0x1dbc <DIO_u8SetPinValue+0x1ae>
    1db8:	88 0f       	add	r24, r24
    1dba:	99 1f       	adc	r25, r25
    1dbc:	0a 94       	dec	r0
    1dbe:	e2 f7       	brpl	.-8      	; 0x1db8 <DIO_u8SetPinValue+0x1aa>
    1dc0:	80 95       	com	r24
    1dc2:	84 23       	and	r24, r20
    1dc4:	8c 93       	st	X, r24
    1dc6:	32 c0       	rjmp	.+100    	; 0x1e2c <DIO_u8SetPinValue+0x21e>
				case DIO_PORTC:CLR_BIT(PORTC,Copy_u8Pin);break;
    1dc8:	a5 e3       	ldi	r26, 0x35	; 53
    1dca:	b0 e0       	ldi	r27, 0x00	; 0
    1dcc:	e5 e3       	ldi	r30, 0x35	; 53
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	80 81       	ld	r24, Z
    1dd2:	48 2f       	mov	r20, r24
    1dd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd6:	28 2f       	mov	r18, r24
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	02 2e       	mov	r0, r18
    1de0:	02 c0       	rjmp	.+4      	; 0x1de6 <DIO_u8SetPinValue+0x1d8>
    1de2:	88 0f       	add	r24, r24
    1de4:	99 1f       	adc	r25, r25
    1de6:	0a 94       	dec	r0
    1de8:	e2 f7       	brpl	.-8      	; 0x1de2 <DIO_u8SetPinValue+0x1d4>
    1dea:	80 95       	com	r24
    1dec:	84 23       	and	r24, r20
    1dee:	8c 93       	st	X, r24
    1df0:	1d c0       	rjmp	.+58     	; 0x1e2c <DIO_u8SetPinValue+0x21e>
				case DIO_PORTD:CLR_BIT(PORTD,Copy_u8Pin);break;
    1df2:	a2 e3       	ldi	r26, 0x32	; 50
    1df4:	b0 e0       	ldi	r27, 0x00	; 0
    1df6:	e2 e3       	ldi	r30, 0x32	; 50
    1df8:	f0 e0       	ldi	r31, 0x00	; 0
    1dfa:	80 81       	ld	r24, Z
    1dfc:	48 2f       	mov	r20, r24
    1dfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1e00:	28 2f       	mov	r18, r24
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	02 2e       	mov	r0, r18
    1e0a:	02 c0       	rjmp	.+4      	; 0x1e10 <DIO_u8SetPinValue+0x202>
    1e0c:	88 0f       	add	r24, r24
    1e0e:	99 1f       	adc	r25, r25
    1e10:	0a 94       	dec	r0
    1e12:	e2 f7       	brpl	.-8      	; 0x1e0c <DIO_u8SetPinValue+0x1fe>
    1e14:	80 95       	com	r24
    1e16:	84 23       	and	r24, r20
    1e18:	8c 93       	st	X, r24
    1e1a:	08 c0       	rjmp	.+16     	; 0x1e2c <DIO_u8SetPinValue+0x21e>
				default: Local_u8ErrorState=1;	
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	89 83       	std	Y+1, r24	; 0x01
    1e20:	05 c0       	rjmp	.+10     	; 0x1e2c <DIO_u8SetPinValue+0x21e>
			}
		}
		else
			Local_u8ErrorState=1;	
    1e22:	81 e0       	ldi	r24, 0x01	; 1
    1e24:	89 83       	std	Y+1, r24	; 0x01
    1e26:	02 c0       	rjmp	.+4      	; 0x1e2c <DIO_u8SetPinValue+0x21e>
	}
	else
		Local_u8ErrorState=1;	
    1e28:	81 e0       	ldi	r24, 0x01	; 1
    1e2a:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    1e2c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e2e:	28 96       	adiw	r28, 0x08	; 8
    1e30:	0f b6       	in	r0, 0x3f	; 63
    1e32:	f8 94       	cli
    1e34:	de bf       	out	0x3e, r29	; 62
    1e36:	0f be       	out	0x3f, r0	; 63
    1e38:	cd bf       	out	0x3d, r28	; 61
    1e3a:	cf 91       	pop	r28
    1e3c:	df 91       	pop	r29
    1e3e:	08 95       	ret

00001e40 <DIO_u8SetPortValue>:
u8 DIO_u8SetPortValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
    1e40:	df 93       	push	r29
    1e42:	cf 93       	push	r28
    1e44:	00 d0       	rcall	.+0      	; 0x1e46 <DIO_u8SetPortValue+0x6>
    1e46:	00 d0       	rcall	.+0      	; 0x1e48 <DIO_u8SetPortValue+0x8>
    1e48:	0f 92       	push	r0
    1e4a:	cd b7       	in	r28, 0x3d	; 61
    1e4c:	de b7       	in	r29, 0x3e	; 62
    1e4e:	8a 83       	std	Y+2, r24	; 0x02
    1e50:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    1e52:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Port<=7)
    1e54:	8a 81       	ldd	r24, Y+2	; 0x02
    1e56:	88 30       	cpi	r24, 0x08	; 8
    1e58:	b0 f5       	brcc	.+108    	; 0x1ec6 <DIO_u8SetPortValue+0x86>
	{
		switch(Copy_u8Port)
    1e5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5c:	28 2f       	mov	r18, r24
    1e5e:	30 e0       	ldi	r19, 0x00	; 0
    1e60:	3d 83       	std	Y+5, r19	; 0x05
    1e62:	2c 83       	std	Y+4, r18	; 0x04
    1e64:	8c 81       	ldd	r24, Y+4	; 0x04
    1e66:	9d 81       	ldd	r25, Y+5	; 0x05
    1e68:	81 30       	cpi	r24, 0x01	; 1
    1e6a:	91 05       	cpc	r25, r1
    1e6c:	d1 f0       	breq	.+52     	; 0x1ea2 <DIO_u8SetPortValue+0x62>
    1e6e:	2c 81       	ldd	r18, Y+4	; 0x04
    1e70:	3d 81       	ldd	r19, Y+5	; 0x05
    1e72:	22 30       	cpi	r18, 0x02	; 2
    1e74:	31 05       	cpc	r19, r1
    1e76:	2c f4       	brge	.+10     	; 0x1e82 <DIO_u8SetPortValue+0x42>
    1e78:	8c 81       	ldd	r24, Y+4	; 0x04
    1e7a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e7c:	00 97       	sbiw	r24, 0x00	; 0
    1e7e:	61 f0       	breq	.+24     	; 0x1e98 <DIO_u8SetPortValue+0x58>
    1e80:	1f c0       	rjmp	.+62     	; 0x1ec0 <DIO_u8SetPortValue+0x80>
    1e82:	2c 81       	ldd	r18, Y+4	; 0x04
    1e84:	3d 81       	ldd	r19, Y+5	; 0x05
    1e86:	22 30       	cpi	r18, 0x02	; 2
    1e88:	31 05       	cpc	r19, r1
    1e8a:	81 f0       	breq	.+32     	; 0x1eac <DIO_u8SetPortValue+0x6c>
    1e8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e8e:	9d 81       	ldd	r25, Y+5	; 0x05
    1e90:	83 30       	cpi	r24, 0x03	; 3
    1e92:	91 05       	cpc	r25, r1
    1e94:	81 f0       	breq	.+32     	; 0x1eb6 <DIO_u8SetPortValue+0x76>
    1e96:	14 c0       	rjmp	.+40     	; 0x1ec0 <DIO_u8SetPortValue+0x80>
		{
			case DIO_PORTA:PORTA=Copy_u8Value;break;
    1e98:	eb e3       	ldi	r30, 0x3B	; 59
    1e9a:	f0 e0       	ldi	r31, 0x00	; 0
    1e9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9e:	80 83       	st	Z, r24
    1ea0:	14 c0       	rjmp	.+40     	; 0x1eca <DIO_u8SetPortValue+0x8a>
			case DIO_PORTB:PORTB=Copy_u8Value;break;
    1ea2:	e8 e3       	ldi	r30, 0x38	; 56
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea8:	80 83       	st	Z, r24
    1eaa:	0f c0       	rjmp	.+30     	; 0x1eca <DIO_u8SetPortValue+0x8a>
			case DIO_PORTC:PORTC=Copy_u8Value;break;
    1eac:	e5 e3       	ldi	r30, 0x35	; 53
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb2:	80 83       	st	Z, r24
    1eb4:	0a c0       	rjmp	.+20     	; 0x1eca <DIO_u8SetPortValue+0x8a>
			case DIO_PORTD:PORTD=Copy_u8Value;break;
    1eb6:	e2 e3       	ldi	r30, 0x32	; 50
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	8b 81       	ldd	r24, Y+3	; 0x03
    1ebc:	80 83       	st	Z, r24
    1ebe:	05 c0       	rjmp	.+10     	; 0x1eca <DIO_u8SetPortValue+0x8a>
			default: Local_u8ErrorState=1;
    1ec0:	81 e0       	ldi	r24, 0x01	; 1
    1ec2:	89 83       	std	Y+1, r24	; 0x01
    1ec4:	02 c0       	rjmp	.+4      	; 0x1eca <DIO_u8SetPortValue+0x8a>
		}
	}
	else
		Local_u8ErrorState = NOTOK;
    1ec6:	81 e0       	ldi	r24, 0x01	; 1
    1ec8:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    1eca:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ecc:	0f 90       	pop	r0
    1ece:	0f 90       	pop	r0
    1ed0:	0f 90       	pop	r0
    1ed2:	0f 90       	pop	r0
    1ed4:	0f 90       	pop	r0
    1ed6:	cf 91       	pop	r28
    1ed8:	df 91       	pop	r29
    1eda:	08 95       	ret

00001edc <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 *Copy_pu8Value)
{
    1edc:	df 93       	push	r29
    1ede:	cf 93       	push	r28
    1ee0:	cd b7       	in	r28, 0x3d	; 61
    1ee2:	de b7       	in	r29, 0x3e	; 62
    1ee4:	27 97       	sbiw	r28, 0x07	; 7
    1ee6:	0f b6       	in	r0, 0x3f	; 63
    1ee8:	f8 94       	cli
    1eea:	de bf       	out	0x3e, r29	; 62
    1eec:	0f be       	out	0x3f, r0	; 63
    1eee:	cd bf       	out	0x3d, r28	; 61
    1ef0:	8a 83       	std	Y+2, r24	; 0x02
    1ef2:	6b 83       	std	Y+3, r22	; 0x03
    1ef4:	5d 83       	std	Y+5, r21	; 0x05
    1ef6:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    1ef8:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu8Value!=NULL)
    1efa:	8c 81       	ldd	r24, Y+4	; 0x04
    1efc:	9d 81       	ldd	r25, Y+5	; 0x05
    1efe:	00 97       	sbiw	r24, 0x00	; 0
    1f00:	09 f4       	brne	.+2      	; 0x1f04 <DIO_u8GetPinValue+0x28>
    1f02:	7b c0       	rjmp	.+246    	; 0x1ffa <DIO_u8GetPinValue+0x11e>
	{


		if((0<=Copy_u8Pin)&&(Copy_u8Pin<=7))
    1f04:	8b 81       	ldd	r24, Y+3	; 0x03
    1f06:	88 30       	cpi	r24, 0x08	; 8
    1f08:	08 f0       	brcs	.+2      	; 0x1f0c <DIO_u8GetPinValue+0x30>
    1f0a:	74 c0       	rjmp	.+232    	; 0x1ff4 <DIO_u8GetPinValue+0x118>
		{
			switch(Copy_u8Port)
    1f0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0e:	28 2f       	mov	r18, r24
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	3f 83       	std	Y+7, r19	; 0x07
    1f14:	2e 83       	std	Y+6, r18	; 0x06
    1f16:	4e 81       	ldd	r20, Y+6	; 0x06
    1f18:	5f 81       	ldd	r21, Y+7	; 0x07
    1f1a:	41 30       	cpi	r20, 0x01	; 1
    1f1c:	51 05       	cpc	r21, r1
    1f1e:	59 f1       	breq	.+86     	; 0x1f76 <DIO_u8GetPinValue+0x9a>
    1f20:	8e 81       	ldd	r24, Y+6	; 0x06
    1f22:	9f 81       	ldd	r25, Y+7	; 0x07
    1f24:	82 30       	cpi	r24, 0x02	; 2
    1f26:	91 05       	cpc	r25, r1
    1f28:	34 f4       	brge	.+12     	; 0x1f36 <DIO_u8GetPinValue+0x5a>
    1f2a:	2e 81       	ldd	r18, Y+6	; 0x06
    1f2c:	3f 81       	ldd	r19, Y+7	; 0x07
    1f2e:	21 15       	cp	r18, r1
    1f30:	31 05       	cpc	r19, r1
    1f32:	69 f0       	breq	.+26     	; 0x1f4e <DIO_u8GetPinValue+0x72>
    1f34:	5c c0       	rjmp	.+184    	; 0x1fee <DIO_u8GetPinValue+0x112>
    1f36:	4e 81       	ldd	r20, Y+6	; 0x06
    1f38:	5f 81       	ldd	r21, Y+7	; 0x07
    1f3a:	42 30       	cpi	r20, 0x02	; 2
    1f3c:	51 05       	cpc	r21, r1
    1f3e:	79 f1       	breq	.+94     	; 0x1f9e <DIO_u8GetPinValue+0xc2>
    1f40:	8e 81       	ldd	r24, Y+6	; 0x06
    1f42:	9f 81       	ldd	r25, Y+7	; 0x07
    1f44:	83 30       	cpi	r24, 0x03	; 3
    1f46:	91 05       	cpc	r25, r1
    1f48:	09 f4       	brne	.+2      	; 0x1f4c <DIO_u8GetPinValue+0x70>
    1f4a:	3d c0       	rjmp	.+122    	; 0x1fc6 <DIO_u8GetPinValue+0xea>
    1f4c:	50 c0       	rjmp	.+160    	; 0x1fee <DIO_u8GetPinValue+0x112>
			{
				case DIO_PORTA:*Copy_pu8Value=GET_BIT(PINA,Copy_u8Pin);break;
    1f4e:	e9 e3       	ldi	r30, 0x39	; 57
    1f50:	f0 e0       	ldi	r31, 0x00	; 0
    1f52:	80 81       	ld	r24, Z
    1f54:	28 2f       	mov	r18, r24
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5a:	88 2f       	mov	r24, r24
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	a9 01       	movw	r20, r18
    1f60:	02 c0       	rjmp	.+4      	; 0x1f66 <DIO_u8GetPinValue+0x8a>
    1f62:	55 95       	asr	r21
    1f64:	47 95       	ror	r20
    1f66:	8a 95       	dec	r24
    1f68:	e2 f7       	brpl	.-8      	; 0x1f62 <DIO_u8GetPinValue+0x86>
    1f6a:	ca 01       	movw	r24, r20
    1f6c:	81 70       	andi	r24, 0x01	; 1
    1f6e:	ec 81       	ldd	r30, Y+4	; 0x04
    1f70:	fd 81       	ldd	r31, Y+5	; 0x05
    1f72:	80 83       	st	Z, r24
    1f74:	44 c0       	rjmp	.+136    	; 0x1ffe <DIO_u8GetPinValue+0x122>
				case DIO_PORTB:*Copy_pu8Value=GET_BIT(PINB,Copy_u8Pin);break;
    1f76:	e6 e3       	ldi	r30, 0x36	; 54
    1f78:	f0 e0       	ldi	r31, 0x00	; 0
    1f7a:	80 81       	ld	r24, Z
    1f7c:	28 2f       	mov	r18, r24
    1f7e:	30 e0       	ldi	r19, 0x00	; 0
    1f80:	8b 81       	ldd	r24, Y+3	; 0x03
    1f82:	88 2f       	mov	r24, r24
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	a9 01       	movw	r20, r18
    1f88:	02 c0       	rjmp	.+4      	; 0x1f8e <DIO_u8GetPinValue+0xb2>
    1f8a:	55 95       	asr	r21
    1f8c:	47 95       	ror	r20
    1f8e:	8a 95       	dec	r24
    1f90:	e2 f7       	brpl	.-8      	; 0x1f8a <DIO_u8GetPinValue+0xae>
    1f92:	ca 01       	movw	r24, r20
    1f94:	81 70       	andi	r24, 0x01	; 1
    1f96:	ec 81       	ldd	r30, Y+4	; 0x04
    1f98:	fd 81       	ldd	r31, Y+5	; 0x05
    1f9a:	80 83       	st	Z, r24
    1f9c:	30 c0       	rjmp	.+96     	; 0x1ffe <DIO_u8GetPinValue+0x122>
				case DIO_PORTC:*Copy_pu8Value=GET_BIT(PINC,Copy_u8Pin);break;
    1f9e:	e3 e3       	ldi	r30, 0x33	; 51
    1fa0:	f0 e0       	ldi	r31, 0x00	; 0
    1fa2:	80 81       	ld	r24, Z
    1fa4:	28 2f       	mov	r18, r24
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	8b 81       	ldd	r24, Y+3	; 0x03
    1faa:	88 2f       	mov	r24, r24
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	a9 01       	movw	r20, r18
    1fb0:	02 c0       	rjmp	.+4      	; 0x1fb6 <DIO_u8GetPinValue+0xda>
    1fb2:	55 95       	asr	r21
    1fb4:	47 95       	ror	r20
    1fb6:	8a 95       	dec	r24
    1fb8:	e2 f7       	brpl	.-8      	; 0x1fb2 <DIO_u8GetPinValue+0xd6>
    1fba:	ca 01       	movw	r24, r20
    1fbc:	81 70       	andi	r24, 0x01	; 1
    1fbe:	ec 81       	ldd	r30, Y+4	; 0x04
    1fc0:	fd 81       	ldd	r31, Y+5	; 0x05
    1fc2:	80 83       	st	Z, r24
    1fc4:	1c c0       	rjmp	.+56     	; 0x1ffe <DIO_u8GetPinValue+0x122>
				case DIO_PORTD:*Copy_pu8Value=GET_BIT(PIND,Copy_u8Pin);break;
    1fc6:	e0 e3       	ldi	r30, 0x30	; 48
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	80 81       	ld	r24, Z
    1fcc:	28 2f       	mov	r18, r24
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd2:	88 2f       	mov	r24, r24
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	a9 01       	movw	r20, r18
    1fd8:	02 c0       	rjmp	.+4      	; 0x1fde <DIO_u8GetPinValue+0x102>
    1fda:	55 95       	asr	r21
    1fdc:	47 95       	ror	r20
    1fde:	8a 95       	dec	r24
    1fe0:	e2 f7       	brpl	.-8      	; 0x1fda <DIO_u8GetPinValue+0xfe>
    1fe2:	ca 01       	movw	r24, r20
    1fe4:	81 70       	andi	r24, 0x01	; 1
    1fe6:	ec 81       	ldd	r30, Y+4	; 0x04
    1fe8:	fd 81       	ldd	r31, Y+5	; 0x05
    1fea:	80 83       	st	Z, r24
    1fec:	08 c0       	rjmp	.+16     	; 0x1ffe <DIO_u8GetPinValue+0x122>
				default: Local_u8ErrorState=1;
    1fee:	81 e0       	ldi	r24, 0x01	; 1
    1ff0:	89 83       	std	Y+1, r24	; 0x01
    1ff2:	05 c0       	rjmp	.+10     	; 0x1ffe <DIO_u8GetPinValue+0x122>
			}
		}
		else
			Local_u8ErrorState=1;
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	89 83       	std	Y+1, r24	; 0x01
    1ff8:	02 c0       	rjmp	.+4      	; 0x1ffe <DIO_u8GetPinValue+0x122>
	}
	else
		Local_u8ErrorState = NULL_POINTER;
    1ffa:	82 e0       	ldi	r24, 0x02	; 2
    1ffc:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    1ffe:	89 81       	ldd	r24, Y+1	; 0x01
}
    2000:	27 96       	adiw	r28, 0x07	; 7
    2002:	0f b6       	in	r0, 0x3f	; 63
    2004:	f8 94       	cli
    2006:	de bf       	out	0x3e, r29	; 62
    2008:	0f be       	out	0x3f, r0	; 63
    200a:	cd bf       	out	0x3d, r28	; 61
    200c:	cf 91       	pop	r28
    200e:	df 91       	pop	r29
    2010:	08 95       	ret

00002012 <DIO_u8TogglePinValue>:
u8 DIO_u8TogglePinValue(u8 Copy_u8Port,u8 Copy_u8Pin)
{
    2012:	df 93       	push	r29
    2014:	cf 93       	push	r28
    2016:	00 d0       	rcall	.+0      	; 0x2018 <DIO_u8TogglePinValue+0x6>
    2018:	00 d0       	rcall	.+0      	; 0x201a <DIO_u8TogglePinValue+0x8>
    201a:	0f 92       	push	r0
    201c:	cd b7       	in	r28, 0x3d	; 61
    201e:	de b7       	in	r29, 0x3e	; 62
    2020:	8a 83       	std	Y+2, r24	; 0x02
    2022:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    2024:	19 82       	std	Y+1, r1	; 0x01
	if((0<=Copy_u8Pin)&&(Copy_u8Pin<=7))
    2026:	8b 81       	ldd	r24, Y+3	; 0x03
    2028:	88 30       	cpi	r24, 0x08	; 8
    202a:	08 f0       	brcs	.+2      	; 0x202e <DIO_u8TogglePinValue+0x1c>
    202c:	72 c0       	rjmp	.+228    	; 0x2112 <DIO_u8TogglePinValue+0x100>
	{
		switch(Copy_u8Port)
    202e:	8a 81       	ldd	r24, Y+2	; 0x02
    2030:	28 2f       	mov	r18, r24
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	3d 83       	std	Y+5, r19	; 0x05
    2036:	2c 83       	std	Y+4, r18	; 0x04
    2038:	8c 81       	ldd	r24, Y+4	; 0x04
    203a:	9d 81       	ldd	r25, Y+5	; 0x05
    203c:	81 30       	cpi	r24, 0x01	; 1
    203e:	91 05       	cpc	r25, r1
    2040:	49 f1       	breq	.+82     	; 0x2094 <DIO_u8TogglePinValue+0x82>
    2042:	2c 81       	ldd	r18, Y+4	; 0x04
    2044:	3d 81       	ldd	r19, Y+5	; 0x05
    2046:	22 30       	cpi	r18, 0x02	; 2
    2048:	31 05       	cpc	r19, r1
    204a:	2c f4       	brge	.+10     	; 0x2056 <DIO_u8TogglePinValue+0x44>
    204c:	8c 81       	ldd	r24, Y+4	; 0x04
    204e:	9d 81       	ldd	r25, Y+5	; 0x05
    2050:	00 97       	sbiw	r24, 0x00	; 0
    2052:	61 f0       	breq	.+24     	; 0x206c <DIO_u8TogglePinValue+0x5a>
    2054:	5b c0       	rjmp	.+182    	; 0x210c <DIO_u8TogglePinValue+0xfa>
    2056:	2c 81       	ldd	r18, Y+4	; 0x04
    2058:	3d 81       	ldd	r19, Y+5	; 0x05
    205a:	22 30       	cpi	r18, 0x02	; 2
    205c:	31 05       	cpc	r19, r1
    205e:	71 f1       	breq	.+92     	; 0x20bc <DIO_u8TogglePinValue+0xaa>
    2060:	8c 81       	ldd	r24, Y+4	; 0x04
    2062:	9d 81       	ldd	r25, Y+5	; 0x05
    2064:	83 30       	cpi	r24, 0x03	; 3
    2066:	91 05       	cpc	r25, r1
    2068:	e9 f1       	breq	.+122    	; 0x20e4 <DIO_u8TogglePinValue+0xd2>
    206a:	50 c0       	rjmp	.+160    	; 0x210c <DIO_u8TogglePinValue+0xfa>
		{
			case DIO_PORTA:TOG_BIT(PORTA,Copy_u8Pin);break;
    206c:	ab e3       	ldi	r26, 0x3B	; 59
    206e:	b0 e0       	ldi	r27, 0x00	; 0
    2070:	eb e3       	ldi	r30, 0x3B	; 59
    2072:	f0 e0       	ldi	r31, 0x00	; 0
    2074:	80 81       	ld	r24, Z
    2076:	48 2f       	mov	r20, r24
    2078:	8b 81       	ldd	r24, Y+3	; 0x03
    207a:	28 2f       	mov	r18, r24
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	81 e0       	ldi	r24, 0x01	; 1
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	02 2e       	mov	r0, r18
    2084:	02 c0       	rjmp	.+4      	; 0x208a <DIO_u8TogglePinValue+0x78>
    2086:	88 0f       	add	r24, r24
    2088:	99 1f       	adc	r25, r25
    208a:	0a 94       	dec	r0
    208c:	e2 f7       	brpl	.-8      	; 0x2086 <DIO_u8TogglePinValue+0x74>
    208e:	84 27       	eor	r24, r20
    2090:	8c 93       	st	X, r24
    2092:	41 c0       	rjmp	.+130    	; 0x2116 <DIO_u8TogglePinValue+0x104>
			case DIO_PORTB:TOG_BIT(PORTB,Copy_u8Pin);break;
    2094:	a8 e3       	ldi	r26, 0x38	; 56
    2096:	b0 e0       	ldi	r27, 0x00	; 0
    2098:	e8 e3       	ldi	r30, 0x38	; 56
    209a:	f0 e0       	ldi	r31, 0x00	; 0
    209c:	80 81       	ld	r24, Z
    209e:	48 2f       	mov	r20, r24
    20a0:	8b 81       	ldd	r24, Y+3	; 0x03
    20a2:	28 2f       	mov	r18, r24
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	81 e0       	ldi	r24, 0x01	; 1
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	02 2e       	mov	r0, r18
    20ac:	02 c0       	rjmp	.+4      	; 0x20b2 <DIO_u8TogglePinValue+0xa0>
    20ae:	88 0f       	add	r24, r24
    20b0:	99 1f       	adc	r25, r25
    20b2:	0a 94       	dec	r0
    20b4:	e2 f7       	brpl	.-8      	; 0x20ae <DIO_u8TogglePinValue+0x9c>
    20b6:	84 27       	eor	r24, r20
    20b8:	8c 93       	st	X, r24
    20ba:	2d c0       	rjmp	.+90     	; 0x2116 <DIO_u8TogglePinValue+0x104>
			case DIO_PORTC:TOG_BIT(PORTC,Copy_u8Pin);break;
    20bc:	a5 e3       	ldi	r26, 0x35	; 53
    20be:	b0 e0       	ldi	r27, 0x00	; 0
    20c0:	e5 e3       	ldi	r30, 0x35	; 53
    20c2:	f0 e0       	ldi	r31, 0x00	; 0
    20c4:	80 81       	ld	r24, Z
    20c6:	48 2f       	mov	r20, r24
    20c8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ca:	28 2f       	mov	r18, r24
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	81 e0       	ldi	r24, 0x01	; 1
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	02 2e       	mov	r0, r18
    20d4:	02 c0       	rjmp	.+4      	; 0x20da <DIO_u8TogglePinValue+0xc8>
    20d6:	88 0f       	add	r24, r24
    20d8:	99 1f       	adc	r25, r25
    20da:	0a 94       	dec	r0
    20dc:	e2 f7       	brpl	.-8      	; 0x20d6 <DIO_u8TogglePinValue+0xc4>
    20de:	84 27       	eor	r24, r20
    20e0:	8c 93       	st	X, r24
    20e2:	19 c0       	rjmp	.+50     	; 0x2116 <DIO_u8TogglePinValue+0x104>
			case DIO_PORTD:TOG_BIT(PORTD,Copy_u8Pin);break;
    20e4:	a2 e3       	ldi	r26, 0x32	; 50
    20e6:	b0 e0       	ldi	r27, 0x00	; 0
    20e8:	e2 e3       	ldi	r30, 0x32	; 50
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	80 81       	ld	r24, Z
    20ee:	48 2f       	mov	r20, r24
    20f0:	8b 81       	ldd	r24, Y+3	; 0x03
    20f2:	28 2f       	mov	r18, r24
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	81 e0       	ldi	r24, 0x01	; 1
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	02 2e       	mov	r0, r18
    20fc:	02 c0       	rjmp	.+4      	; 0x2102 <DIO_u8TogglePinValue+0xf0>
    20fe:	88 0f       	add	r24, r24
    2100:	99 1f       	adc	r25, r25
    2102:	0a 94       	dec	r0
    2104:	e2 f7       	brpl	.-8      	; 0x20fe <DIO_u8TogglePinValue+0xec>
    2106:	84 27       	eor	r24, r20
    2108:	8c 93       	st	X, r24
    210a:	05 c0       	rjmp	.+10     	; 0x2116 <DIO_u8TogglePinValue+0x104>
			default: Local_u8ErrorState=1;
    210c:	81 e0       	ldi	r24, 0x01	; 1
    210e:	89 83       	std	Y+1, r24	; 0x01
    2110:	02 c0       	rjmp	.+4      	; 0x2116 <DIO_u8TogglePinValue+0x104>
		}
	}
	else
		Local_u8ErrorState=1;
    2112:	81 e0       	ldi	r24, 0x01	; 1
    2114:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    2116:	89 81       	ldd	r24, Y+1	; 0x01
}
    2118:	0f 90       	pop	r0
    211a:	0f 90       	pop	r0
    211c:	0f 90       	pop	r0
    211e:	0f 90       	pop	r0
    2120:	0f 90       	pop	r0
    2122:	cf 91       	pop	r28
    2124:	df 91       	pop	r29
    2126:	08 95       	ret

00002128 <LED_u8TurnOn>:
#include "../HAL/LED_private.h"
#include "../HAL/LED_config.h"
#include "../HAL/LED_interface.h"

u8 LED_u8TurnOn(LED_t * Copy_LED)
{
    2128:	df 93       	push	r29
    212a:	cf 93       	push	r28
    212c:	00 d0       	rcall	.+0      	; 0x212e <LED_u8TurnOn+0x6>
    212e:	0f 92       	push	r0
    2130:	cd b7       	in	r28, 0x3d	; 61
    2132:	de b7       	in	r29, 0x3e	; 62
    2134:	9b 83       	std	Y+3, r25	; 0x03
    2136:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    2138:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_LED->ConnType==LED_SOUCE)
    213a:	ea 81       	ldd	r30, Y+2	; 0x02
    213c:	fb 81       	ldd	r31, Y+3	; 0x03
    213e:	82 81       	ldd	r24, Z+2	; 0x02
    2140:	81 30       	cpi	r24, 0x01	; 1
    2142:	59 f4       	brne	.+22     	; 0x215a <LED_u8TurnOn+0x32>
	{
		DIO_u8SetPinValue(Copy_LED->Port,Copy_LED->Pin,DIO_PIN_HIGH);
    2144:	ea 81       	ldd	r30, Y+2	; 0x02
    2146:	fb 81       	ldd	r31, Y+3	; 0x03
    2148:	80 81       	ld	r24, Z
    214a:	ea 81       	ldd	r30, Y+2	; 0x02
    214c:	fb 81       	ldd	r31, Y+3	; 0x03
    214e:	91 81       	ldd	r25, Z+1	; 0x01
    2150:	69 2f       	mov	r22, r25
    2152:	41 e0       	ldi	r20, 0x01	; 1
    2154:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <DIO_u8SetPinValue>
    2158:	12 c0       	rjmp	.+36     	; 0x217e <LED_u8TurnOn+0x56>
	}
	else if(Copy_LED->ConnType==LED_SINK)
    215a:	ea 81       	ldd	r30, Y+2	; 0x02
    215c:	fb 81       	ldd	r31, Y+3	; 0x03
    215e:	82 81       	ldd	r24, Z+2	; 0x02
    2160:	88 23       	and	r24, r24
    2162:	59 f4       	brne	.+22     	; 0x217a <LED_u8TurnOn+0x52>
	{
		DIO_u8SetPinValue(Copy_LED->Port,Copy_LED->Pin,DIO_PIN_LOW);
    2164:	ea 81       	ldd	r30, Y+2	; 0x02
    2166:	fb 81       	ldd	r31, Y+3	; 0x03
    2168:	80 81       	ld	r24, Z
    216a:	ea 81       	ldd	r30, Y+2	; 0x02
    216c:	fb 81       	ldd	r31, Y+3	; 0x03
    216e:	91 81       	ldd	r25, Z+1	; 0x01
    2170:	69 2f       	mov	r22, r25
    2172:	40 e0       	ldi	r20, 0x00	; 0
    2174:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <DIO_u8SetPinValue>
    2178:	02 c0       	rjmp	.+4      	; 0x217e <LED_u8TurnOn+0x56>
	}
	else
		Local_u8ErrorState = NOTOK;
    217a:	81 e0       	ldi	r24, 0x01	; 1
    217c:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    217e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2180:	0f 90       	pop	r0
    2182:	0f 90       	pop	r0
    2184:	0f 90       	pop	r0
    2186:	cf 91       	pop	r28
    2188:	df 91       	pop	r29
    218a:	08 95       	ret

0000218c <LED_u8TurnOff>:
u8 LED_u8TurnOff(LED_t * Copy_LED)
{
    218c:	df 93       	push	r29
    218e:	cf 93       	push	r28
    2190:	00 d0       	rcall	.+0      	; 0x2192 <LED_u8TurnOff+0x6>
    2192:	0f 92       	push	r0
    2194:	cd b7       	in	r28, 0x3d	; 61
    2196:	de b7       	in	r29, 0x3e	; 62
    2198:	9b 83       	std	Y+3, r25	; 0x03
    219a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    219c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_LED->ConnType==LED_SOUCE)
    219e:	ea 81       	ldd	r30, Y+2	; 0x02
    21a0:	fb 81       	ldd	r31, Y+3	; 0x03
    21a2:	82 81       	ldd	r24, Z+2	; 0x02
    21a4:	81 30       	cpi	r24, 0x01	; 1
    21a6:	59 f4       	brne	.+22     	; 0x21be <LED_u8TurnOff+0x32>
	{
		DIO_u8SetPinValue(Copy_LED->Port,Copy_LED->Pin,DIO_PIN_LOW);
    21a8:	ea 81       	ldd	r30, Y+2	; 0x02
    21aa:	fb 81       	ldd	r31, Y+3	; 0x03
    21ac:	80 81       	ld	r24, Z
    21ae:	ea 81       	ldd	r30, Y+2	; 0x02
    21b0:	fb 81       	ldd	r31, Y+3	; 0x03
    21b2:	91 81       	ldd	r25, Z+1	; 0x01
    21b4:	69 2f       	mov	r22, r25
    21b6:	40 e0       	ldi	r20, 0x00	; 0
    21b8:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <DIO_u8SetPinValue>
    21bc:	12 c0       	rjmp	.+36     	; 0x21e2 <LED_u8TurnOff+0x56>
	}
	else if(Copy_LED->ConnType==LED_SINK)
    21be:	ea 81       	ldd	r30, Y+2	; 0x02
    21c0:	fb 81       	ldd	r31, Y+3	; 0x03
    21c2:	82 81       	ldd	r24, Z+2	; 0x02
    21c4:	88 23       	and	r24, r24
    21c6:	59 f4       	brne	.+22     	; 0x21de <LED_u8TurnOff+0x52>
	{
		DIO_u8SetPinValue(Copy_LED->Port,Copy_LED->Pin,DIO_PIN_HIGH);
    21c8:	ea 81       	ldd	r30, Y+2	; 0x02
    21ca:	fb 81       	ldd	r31, Y+3	; 0x03
    21cc:	80 81       	ld	r24, Z
    21ce:	ea 81       	ldd	r30, Y+2	; 0x02
    21d0:	fb 81       	ldd	r31, Y+3	; 0x03
    21d2:	91 81       	ldd	r25, Z+1	; 0x01
    21d4:	69 2f       	mov	r22, r25
    21d6:	41 e0       	ldi	r20, 0x01	; 1
    21d8:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <DIO_u8SetPinValue>
    21dc:	02 c0       	rjmp	.+4      	; 0x21e2 <LED_u8TurnOff+0x56>
	}
	else
		Local_u8ErrorState = NOTOK;
    21de:	81 e0       	ldi	r24, 0x01	; 1
    21e0:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    21e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    21e4:	0f 90       	pop	r0
    21e6:	0f 90       	pop	r0
    21e8:	0f 90       	pop	r0
    21ea:	cf 91       	pop	r28
    21ec:	df 91       	pop	r29
    21ee:	08 95       	ret

000021f0 <LED_u8TogLed>:
u8 LED_u8TogLed(LED_t *Copy_LED)
{
    21f0:	df 93       	push	r29
    21f2:	cf 93       	push	r28
    21f4:	00 d0       	rcall	.+0      	; 0x21f6 <LED_u8TogLed+0x6>
    21f6:	0f 92       	push	r0
    21f8:	cd b7       	in	r28, 0x3d	; 61
    21fa:	de b7       	in	r29, 0x3e	; 62
    21fc:	9b 83       	std	Y+3, r25	; 0x03
    21fe:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    2200:	19 82       	std	Y+1, r1	; 0x01
	static u8 Local_u8State = 0;
	if(Copy_LED->ConnType==LED_SOUCE)
    2202:	ea 81       	ldd	r30, Y+2	; 0x02
    2204:	fb 81       	ldd	r31, Y+3	; 0x03
    2206:	82 81       	ldd	r24, Z+2	; 0x02
    2208:	81 30       	cpi	r24, 0x01	; 1
    220a:	99 f4       	brne	.+38     	; 0x2232 <LED_u8TogLed+0x42>
	{
		TOG_BIT(Local_u8State,0);
    220c:	90 91 77 01 	lds	r25, 0x0177
    2210:	81 e0       	ldi	r24, 0x01	; 1
    2212:	89 27       	eor	r24, r25
    2214:	80 93 77 01 	sts	0x0177, r24
		DIO_u8SetPinValue(Copy_LED->Port,Copy_LED->Pin,Local_u8State);
    2218:	ea 81       	ldd	r30, Y+2	; 0x02
    221a:	fb 81       	ldd	r31, Y+3	; 0x03
    221c:	80 81       	ld	r24, Z
    221e:	ea 81       	ldd	r30, Y+2	; 0x02
    2220:	fb 81       	ldd	r31, Y+3	; 0x03
    2222:	91 81       	ldd	r25, Z+1	; 0x01
    2224:	20 91 77 01 	lds	r18, 0x0177
    2228:	69 2f       	mov	r22, r25
    222a:	42 2f       	mov	r20, r18
    222c:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <DIO_u8SetPinValue>
    2230:	1a c0       	rjmp	.+52     	; 0x2266 <LED_u8TogLed+0x76>
	}
	else if(Copy_LED->ConnType==LED_SINK)
    2232:	ea 81       	ldd	r30, Y+2	; 0x02
    2234:	fb 81       	ldd	r31, Y+3	; 0x03
    2236:	82 81       	ldd	r24, Z+2	; 0x02
    2238:	88 23       	and	r24, r24
    223a:	99 f4       	brne	.+38     	; 0x2262 <LED_u8TogLed+0x72>
	{
		TOG_BIT(Local_u8State,0);
    223c:	90 91 77 01 	lds	r25, 0x0177
    2240:	81 e0       	ldi	r24, 0x01	; 1
    2242:	89 27       	eor	r24, r25
    2244:	80 93 77 01 	sts	0x0177, r24
		DIO_u8SetPinValue(Copy_LED->Port,Copy_LED->Pin,Local_u8State);
    2248:	ea 81       	ldd	r30, Y+2	; 0x02
    224a:	fb 81       	ldd	r31, Y+3	; 0x03
    224c:	80 81       	ld	r24, Z
    224e:	ea 81       	ldd	r30, Y+2	; 0x02
    2250:	fb 81       	ldd	r31, Y+3	; 0x03
    2252:	91 81       	ldd	r25, Z+1	; 0x01
    2254:	20 91 77 01 	lds	r18, 0x0177
    2258:	69 2f       	mov	r22, r25
    225a:	42 2f       	mov	r20, r18
    225c:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <DIO_u8SetPinValue>
    2260:	02 c0       	rjmp	.+4      	; 0x2266 <LED_u8TogLed+0x76>
	}
	else
		Local_u8ErrorState = NOTOK;
    2262:	81 e0       	ldi	r24, 0x01	; 1
    2264:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    2266:	89 81       	ldd	r24, Y+1	; 0x01
}
    2268:	0f 90       	pop	r0
    226a:	0f 90       	pop	r0
    226c:	0f 90       	pop	r0
    226e:	cf 91       	pop	r28
    2270:	df 91       	pop	r29
    2272:	08 95       	ret

00002274 <PORT_voidInit>:
#include "../MCAL/PORT_config.h"
#include "../MCAL/PORT_register.h"
#include "../MCAL/PORT_interface.h"

void PORT_voidInit()
{
    2274:	df 93       	push	r29
    2276:	cf 93       	push	r28
    2278:	cd b7       	in	r28, 0x3d	; 61
    227a:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;	
    227c:	ea e3       	ldi	r30, 0x3A	; 58
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	80 ef       	ldi	r24, 0xF0	; 240
    2282:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
    2284:	e7 e3       	ldi	r30, 0x37	; 55
    2286:	f0 e0       	ldi	r31, 0x00	; 0
    2288:	87 e0       	ldi	r24, 0x07	; 7
    228a:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
    228c:	e4 e3       	ldi	r30, 0x34	; 52
    228e:	f0 e0       	ldi	r31, 0x00	; 0
    2290:	10 82       	st	Z, r1
	DDRD = PORTD_DIR;
    2292:	e1 e3       	ldi	r30, 0x31	; 49
    2294:	f0 e0       	ldi	r31, 0x00	; 0
    2296:	10 82       	st	Z, r1
	
	PORTA =PORTA_INIT_VALUE;
    2298:	eb e3       	ldi	r30, 0x3B	; 59
    229a:	f0 e0       	ldi	r31, 0x00	; 0
    229c:	10 82       	st	Z, r1
	PORTB =PORTB_INIT_VALUE;
    229e:	e8 e3       	ldi	r30, 0x38	; 56
    22a0:	f0 e0       	ldi	r31, 0x00	; 0
    22a2:	80 ee       	ldi	r24, 0xE0	; 224
    22a4:	80 83       	st	Z, r24
	PORTC =PORTC_INIT_VALUE;
    22a6:	e5 e3       	ldi	r30, 0x35	; 53
    22a8:	f0 e0       	ldi	r31, 0x00	; 0
    22aa:	10 82       	st	Z, r1
	PORTD =PORTD_INIT_VALUE;
    22ac:	e2 e3       	ldi	r30, 0x32	; 50
    22ae:	f0 e0       	ldi	r31, 0x00	; 0
    22b0:	10 82       	st	Z, r1
	
}
    22b2:	cf 91       	pop	r28
    22b4:	df 91       	pop	r29
    22b6:	08 95       	ret

000022b8 <SSD_u8SetNumber>:
#include "../HAL/SSD_private.h"
#include "../HAL/SSD_config.h"
#include "../HAL/SSD_interface.h"

u8 SSD_u8SetNumber(u8 Copy_u8Number,SSD_t *Copy_SSD)
{
    22b8:	df 93       	push	r29
    22ba:	cf 93       	push	r28
    22bc:	00 d0       	rcall	.+0      	; 0x22be <SSD_u8SetNumber+0x6>
    22be:	00 d0       	rcall	.+0      	; 0x22c0 <SSD_u8SetNumber+0x8>
    22c0:	cd b7       	in	r28, 0x3d	; 61
    22c2:	de b7       	in	r29, 0x3e	; 62
    22c4:	8a 83       	std	Y+2, r24	; 0x02
    22c6:	7c 83       	std	Y+4, r23	; 0x04
    22c8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState= OK;
    22ca:	19 82       	std	Y+1, r1	; 0x01
	static u8 SSD_Arr[10] = SSD_ARR_OF_NUM;
	if(Copy_SSD->ComType==ANODE)
    22cc:	eb 81       	ldd	r30, Y+3	; 0x03
    22ce:	fc 81       	ldd	r31, Y+4	; 0x04
    22d0:	80 81       	ld	r24, Z
    22d2:	88 23       	and	r24, r24
    22d4:	91 f4       	brne	.+36     	; 0x22fa <SSD_u8SetNumber+0x42>
	{
		Local_u8ErrorState = DIO_u8SetPortValue(Copy_SSD->Port,~SSD_Arr[Copy_u8Number]);
    22d6:	eb 81       	ldd	r30, Y+3	; 0x03
    22d8:	fc 81       	ldd	r31, Y+4	; 0x04
    22da:	21 81       	ldd	r18, Z+1	; 0x01
    22dc:	8a 81       	ldd	r24, Y+2	; 0x02
    22de:	88 2f       	mov	r24, r24
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	fc 01       	movw	r30, r24
    22e4:	e4 59       	subi	r30, 0x94	; 148
    22e6:	fe 4f       	sbci	r31, 0xFE	; 254
    22e8:	80 81       	ld	r24, Z
    22ea:	98 2f       	mov	r25, r24
    22ec:	90 95       	com	r25
    22ee:	82 2f       	mov	r24, r18
    22f0:	69 2f       	mov	r22, r25
    22f2:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <DIO_u8SetPortValue>
    22f6:	89 83       	std	Y+1, r24	; 0x01
    22f8:	17 c0       	rjmp	.+46     	; 0x2328 <SSD_u8SetNumber+0x70>
	}
	else if(Copy_SSD->ComType==CATHODE )
    22fa:	eb 81       	ldd	r30, Y+3	; 0x03
    22fc:	fc 81       	ldd	r31, Y+4	; 0x04
    22fe:	80 81       	ld	r24, Z
    2300:	81 30       	cpi	r24, 0x01	; 1
    2302:	81 f4       	brne	.+32     	; 0x2324 <SSD_u8SetNumber+0x6c>
	{
		Local_u8ErrorState = DIO_u8SetPortValue(Copy_SSD->Port,SSD_Arr[Copy_u8Number]);
    2304:	eb 81       	ldd	r30, Y+3	; 0x03
    2306:	fc 81       	ldd	r31, Y+4	; 0x04
    2308:	21 81       	ldd	r18, Z+1	; 0x01
    230a:	8a 81       	ldd	r24, Y+2	; 0x02
    230c:	88 2f       	mov	r24, r24
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	fc 01       	movw	r30, r24
    2312:	e4 59       	subi	r30, 0x94	; 148
    2314:	fe 4f       	sbci	r31, 0xFE	; 254
    2316:	90 81       	ld	r25, Z
    2318:	82 2f       	mov	r24, r18
    231a:	69 2f       	mov	r22, r25
    231c:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <DIO_u8SetPortValue>
    2320:	89 83       	std	Y+1, r24	; 0x01
    2322:	02 c0       	rjmp	.+4      	; 0x2328 <SSD_u8SetNumber+0x70>
	}
	else
		Local_u8ErrorState = NOTOK;
    2324:	81 e0       	ldi	r24, 0x01	; 1
    2326:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    2328:	89 81       	ldd	r24, Y+1	; 0x01

}
    232a:	0f 90       	pop	r0
    232c:	0f 90       	pop	r0
    232e:	0f 90       	pop	r0
    2330:	0f 90       	pop	r0
    2332:	cf 91       	pop	r28
    2334:	df 91       	pop	r29
    2336:	08 95       	ret

00002338 <SSD_u8Enable>:
u8 SSD_u8Enable(SSD_t *Copy_SSD)
{
    2338:	df 93       	push	r29
    233a:	cf 93       	push	r28
    233c:	00 d0       	rcall	.+0      	; 0x233e <SSD_u8Enable+0x6>
    233e:	0f 92       	push	r0
    2340:	cd b7       	in	r28, 0x3d	; 61
    2342:	de b7       	in	r29, 0x3e	; 62
    2344:	9b 83       	std	Y+3, r25	; 0x03
    2346:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState= OK;
    2348:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_SSD->ComType==ANODE)
    234a:	ea 81       	ldd	r30, Y+2	; 0x02
    234c:	fb 81       	ldd	r31, Y+3	; 0x03
    234e:	80 81       	ld	r24, Z
    2350:	88 23       	and	r24, r24
    2352:	61 f4       	brne	.+24     	; 0x236c <SSD_u8Enable+0x34>
	{
		Local_u8ErrorState = DIO_u8SetPinValue(Copy_SSD->EnablePort,Copy_SSD->EnablePin,DIO_PIN_HIGH);
    2354:	ea 81       	ldd	r30, Y+2	; 0x02
    2356:	fb 81       	ldd	r31, Y+3	; 0x03
    2358:	82 81       	ldd	r24, Z+2	; 0x02
    235a:	ea 81       	ldd	r30, Y+2	; 0x02
    235c:	fb 81       	ldd	r31, Y+3	; 0x03
    235e:	93 81       	ldd	r25, Z+3	; 0x03
    2360:	69 2f       	mov	r22, r25
    2362:	41 e0       	ldi	r20, 0x01	; 1
    2364:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <DIO_u8SetPinValue>
    2368:	89 83       	std	Y+1, r24	; 0x01
    236a:	13 c0       	rjmp	.+38     	; 0x2392 <SSD_u8Enable+0x5a>
	}
	else if(Copy_SSD->ComType==CATHODE )
    236c:	ea 81       	ldd	r30, Y+2	; 0x02
    236e:	fb 81       	ldd	r31, Y+3	; 0x03
    2370:	80 81       	ld	r24, Z
    2372:	81 30       	cpi	r24, 0x01	; 1
    2374:	61 f4       	brne	.+24     	; 0x238e <SSD_u8Enable+0x56>
	{
		Local_u8ErrorState = DIO_u8SetPinValue(Copy_SSD->EnablePort,Copy_SSD->EnablePin,DIO_PIN_LOW);
    2376:	ea 81       	ldd	r30, Y+2	; 0x02
    2378:	fb 81       	ldd	r31, Y+3	; 0x03
    237a:	82 81       	ldd	r24, Z+2	; 0x02
    237c:	ea 81       	ldd	r30, Y+2	; 0x02
    237e:	fb 81       	ldd	r31, Y+3	; 0x03
    2380:	93 81       	ldd	r25, Z+3	; 0x03
    2382:	69 2f       	mov	r22, r25
    2384:	40 e0       	ldi	r20, 0x00	; 0
    2386:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <DIO_u8SetPinValue>
    238a:	89 83       	std	Y+1, r24	; 0x01
    238c:	02 c0       	rjmp	.+4      	; 0x2392 <SSD_u8Enable+0x5a>
	}
	else
		Local_u8ErrorState = NOTOK;
    238e:	81 e0       	ldi	r24, 0x01	; 1
    2390:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    2392:	89 81       	ldd	r24, Y+1	; 0x01
}
    2394:	0f 90       	pop	r0
    2396:	0f 90       	pop	r0
    2398:	0f 90       	pop	r0
    239a:	cf 91       	pop	r28
    239c:	df 91       	pop	r29
    239e:	08 95       	ret

000023a0 <SSD_u8Disable>:

u8 SSD_u8Disable(SSD_t *Copy_SSD)
{
    23a0:	df 93       	push	r29
    23a2:	cf 93       	push	r28
    23a4:	00 d0       	rcall	.+0      	; 0x23a6 <SSD_u8Disable+0x6>
    23a6:	0f 92       	push	r0
    23a8:	cd b7       	in	r28, 0x3d	; 61
    23aa:	de b7       	in	r29, 0x3e	; 62
    23ac:	9b 83       	std	Y+3, r25	; 0x03
    23ae:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState= OK;
    23b0:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_SSD->ComType==ANODE)
    23b2:	ea 81       	ldd	r30, Y+2	; 0x02
    23b4:	fb 81       	ldd	r31, Y+3	; 0x03
    23b6:	80 81       	ld	r24, Z
    23b8:	88 23       	and	r24, r24
    23ba:	61 f4       	brne	.+24     	; 0x23d4 <SSD_u8Disable+0x34>
	{
		Local_u8ErrorState = DIO_u8SetPinValue(Copy_SSD->EnablePort,Copy_SSD->EnablePin,DIO_PIN_LOW);
    23bc:	ea 81       	ldd	r30, Y+2	; 0x02
    23be:	fb 81       	ldd	r31, Y+3	; 0x03
    23c0:	82 81       	ldd	r24, Z+2	; 0x02
    23c2:	ea 81       	ldd	r30, Y+2	; 0x02
    23c4:	fb 81       	ldd	r31, Y+3	; 0x03
    23c6:	93 81       	ldd	r25, Z+3	; 0x03
    23c8:	69 2f       	mov	r22, r25
    23ca:	40 e0       	ldi	r20, 0x00	; 0
    23cc:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <DIO_u8SetPinValue>
    23d0:	89 83       	std	Y+1, r24	; 0x01
    23d2:	13 c0       	rjmp	.+38     	; 0x23fa <SSD_u8Disable+0x5a>
	}
	else if(Copy_SSD->ComType==CATHODE )
    23d4:	ea 81       	ldd	r30, Y+2	; 0x02
    23d6:	fb 81       	ldd	r31, Y+3	; 0x03
    23d8:	80 81       	ld	r24, Z
    23da:	81 30       	cpi	r24, 0x01	; 1
    23dc:	61 f4       	brne	.+24     	; 0x23f6 <SSD_u8Disable+0x56>
	{
		Local_u8ErrorState = DIO_u8SetPinValue(Copy_SSD->EnablePort,Copy_SSD->EnablePin,DIO_PIN_HIGH);
    23de:	ea 81       	ldd	r30, Y+2	; 0x02
    23e0:	fb 81       	ldd	r31, Y+3	; 0x03
    23e2:	82 81       	ldd	r24, Z+2	; 0x02
    23e4:	ea 81       	ldd	r30, Y+2	; 0x02
    23e6:	fb 81       	ldd	r31, Y+3	; 0x03
    23e8:	93 81       	ldd	r25, Z+3	; 0x03
    23ea:	69 2f       	mov	r22, r25
    23ec:	41 e0       	ldi	r20, 0x01	; 1
    23ee:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <DIO_u8SetPinValue>
    23f2:	89 83       	std	Y+1, r24	; 0x01
    23f4:	02 c0       	rjmp	.+4      	; 0x23fa <SSD_u8Disable+0x5a>
	}
	else
		Local_u8ErrorState = NOTOK;
    23f6:	81 e0       	ldi	r24, 0x01	; 1
    23f8:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    23fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    23fc:	0f 90       	pop	r0
    23fe:	0f 90       	pop	r0
    2400:	0f 90       	pop	r0
    2402:	cf 91       	pop	r28
    2404:	df 91       	pop	r29
    2406:	08 95       	ret

00002408 <SW_u8GetState>:
 * 			Copy_SW     : Full with Port,Pin,SelfType,switch function
 * 			Copy_u8State: return State of switch as (0) Pressed , (1) Not pressed
 * use for: Get Switch by delay debouncing of switch as (0) Pressed , (1) Not pressed
 *  */
u8 SW_u8GetState(SW_t* Copy_SW,u8 *Copy_u8State)
{
    2408:	df 93       	push	r29
    240a:	cf 93       	push	r28
    240c:	cd b7       	in	r28, 0x3d	; 61
    240e:	de b7       	in	r29, 0x3e	; 62
    2410:	a1 97       	sbiw	r28, 0x21	; 33
    2412:	0f b6       	in	r0, 0x3f	; 63
    2414:	f8 94       	cli
    2416:	de bf       	out	0x3e, r29	; 62
    2418:	0f be       	out	0x3f, r0	; 63
    241a:	cd bf       	out	0x3d, r28	; 61
    241c:	9f 8f       	std	Y+31, r25	; 0x1f
    241e:	8e 8f       	std	Y+30, r24	; 0x1e
    2420:	79 a3       	std	Y+33, r23	; 0x21
    2422:	68 a3       	std	Y+32, r22	; 0x20
	u8 Local_u8ErrorState = OK;
    2424:	1d 8e       	std	Y+29, r1	; 0x1d
	//static u8 pressed_conf_level = 0;
	//static u8 released_conf_level = 0;
	//static u8 pressed = 0;
	//static u8 pressed2 = 0;
	*Copy_u8State = SW_NOT_PRESSED;
    2426:	e8 a1       	ldd	r30, Y+32	; 0x20
    2428:	f9 a1       	ldd	r31, Y+33	; 0x21
    242a:	81 e0       	ldi	r24, 0x01	; 1
    242c:	80 83       	st	Z, r24
	static u8 Local_u8SwState;
	if(Copy_SW->Pulltype == SW_PULL_UP)
    242e:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2430:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2432:	82 81       	ldd	r24, Z+2	; 0x02
    2434:	88 23       	and	r24, r24
    2436:	09 f0       	breq	.+2      	; 0x243a <SW_u8GetState+0x32>
    2438:	c3 c0       	rjmp	.+390    	; 0x25c0 <SW_u8GetState+0x1b8>
	{
		if(Copy_SW->SelfLockType == SW_SELF_LOCK)
    243a:	ee 8d       	ldd	r30, Y+30	; 0x1e
    243c:	ff 8d       	ldd	r31, Y+31	; 0x1f
    243e:	83 81       	ldd	r24, Z+3	; 0x03
    2440:	81 30       	cpi	r24, 0x01	; 1
    2442:	09 f0       	breq	.+2      	; 0x2446 <SW_u8GetState+0x3e>
    2444:	9c c0       	rjmp	.+312    	; 0x257e <SW_u8GetState+0x176>
		{
			DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,&Local_u8SwState);
    2446:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2448:	ff 8d       	ldd	r31, Y+31	; 0x1f
    244a:	80 81       	ld	r24, Z
    244c:	ee 8d       	ldd	r30, Y+30	; 0x1e
    244e:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2450:	91 81       	ldd	r25, Z+1	; 0x01
    2452:	28 e7       	ldi	r18, 0x78	; 120
    2454:	31 e0       	ldi	r19, 0x01	; 1
    2456:	69 2f       	mov	r22, r25
    2458:	a9 01       	movw	r20, r18
    245a:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <DIO_u8GetPinValue>
			if(Local_u8SwState == DIO_PIN_LOW)
    245e:	80 91 78 01 	lds	r24, 0x0178
    2462:	88 23       	and	r24, r24
    2464:	09 f0       	breq	.+2      	; 0x2468 <SW_u8GetState+0x60>
    2466:	6d c1       	rjmp	.+730    	; 0x2742 <SW_u8GetState+0x33a>
    2468:	80 e0       	ldi	r24, 0x00	; 0
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	a6 e1       	ldi	r26, 0x16	; 22
    246e:	b3 e4       	ldi	r27, 0x43	; 67
    2470:	89 8f       	std	Y+25, r24	; 0x19
    2472:	9a 8f       	std	Y+26, r25	; 0x1a
    2474:	ab 8f       	std	Y+27, r26	; 0x1b
    2476:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2478:	69 8d       	ldd	r22, Y+25	; 0x19
    247a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    247c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    247e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2480:	20 e0       	ldi	r18, 0x00	; 0
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	4a ef       	ldi	r20, 0xFA	; 250
    2486:	54 e4       	ldi	r21, 0x44	; 68
    2488:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    248c:	dc 01       	movw	r26, r24
    248e:	cb 01       	movw	r24, r22
    2490:	8d 8b       	std	Y+21, r24	; 0x15
    2492:	9e 8b       	std	Y+22, r25	; 0x16
    2494:	af 8b       	std	Y+23, r26	; 0x17
    2496:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2498:	6d 89       	ldd	r22, Y+21	; 0x15
    249a:	7e 89       	ldd	r23, Y+22	; 0x16
    249c:	8f 89       	ldd	r24, Y+23	; 0x17
    249e:	98 8d       	ldd	r25, Y+24	; 0x18
    24a0:	20 e0       	ldi	r18, 0x00	; 0
    24a2:	30 e0       	ldi	r19, 0x00	; 0
    24a4:	40 e8       	ldi	r20, 0x80	; 128
    24a6:	5f e3       	ldi	r21, 0x3F	; 63
    24a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24ac:	88 23       	and	r24, r24
    24ae:	2c f4       	brge	.+10     	; 0x24ba <SW_u8GetState+0xb2>
		__ticks = 1;
    24b0:	81 e0       	ldi	r24, 0x01	; 1
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	9c 8b       	std	Y+20, r25	; 0x14
    24b6:	8b 8b       	std	Y+19, r24	; 0x13
    24b8:	3f c0       	rjmp	.+126    	; 0x2538 <SW_u8GetState+0x130>
	else if (__tmp > 65535)
    24ba:	6d 89       	ldd	r22, Y+21	; 0x15
    24bc:	7e 89       	ldd	r23, Y+22	; 0x16
    24be:	8f 89       	ldd	r24, Y+23	; 0x17
    24c0:	98 8d       	ldd	r25, Y+24	; 0x18
    24c2:	20 e0       	ldi	r18, 0x00	; 0
    24c4:	3f ef       	ldi	r19, 0xFF	; 255
    24c6:	4f e7       	ldi	r20, 0x7F	; 127
    24c8:	57 e4       	ldi	r21, 0x47	; 71
    24ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24ce:	18 16       	cp	r1, r24
    24d0:	4c f5       	brge	.+82     	; 0x2524 <SW_u8GetState+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24d2:	69 8d       	ldd	r22, Y+25	; 0x19
    24d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24da:	20 e0       	ldi	r18, 0x00	; 0
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	40 e2       	ldi	r20, 0x20	; 32
    24e0:	51 e4       	ldi	r21, 0x41	; 65
    24e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e6:	dc 01       	movw	r26, r24
    24e8:	cb 01       	movw	r24, r22
    24ea:	bc 01       	movw	r22, r24
    24ec:	cd 01       	movw	r24, r26
    24ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f2:	dc 01       	movw	r26, r24
    24f4:	cb 01       	movw	r24, r22
    24f6:	9c 8b       	std	Y+20, r25	; 0x14
    24f8:	8b 8b       	std	Y+19, r24	; 0x13
    24fa:	0f c0       	rjmp	.+30     	; 0x251a <SW_u8GetState+0x112>
    24fc:	88 ec       	ldi	r24, 0xC8	; 200
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	9a 8b       	std	Y+18, r25	; 0x12
    2502:	89 8b       	std	Y+17, r24	; 0x11
    2504:	89 89       	ldd	r24, Y+17	; 0x11
    2506:	9a 89       	ldd	r25, Y+18	; 0x12
    2508:	01 97       	sbiw	r24, 0x01	; 1
    250a:	f1 f7       	brne	.-4      	; 0x2508 <SW_u8GetState+0x100>
    250c:	9a 8b       	std	Y+18, r25	; 0x12
    250e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2510:	8b 89       	ldd	r24, Y+19	; 0x13
    2512:	9c 89       	ldd	r25, Y+20	; 0x14
    2514:	01 97       	sbiw	r24, 0x01	; 1
    2516:	9c 8b       	std	Y+20, r25	; 0x14
    2518:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    251a:	8b 89       	ldd	r24, Y+19	; 0x13
    251c:	9c 89       	ldd	r25, Y+20	; 0x14
    251e:	00 97       	sbiw	r24, 0x00	; 0
    2520:	69 f7       	brne	.-38     	; 0x24fc <SW_u8GetState+0xf4>
    2522:	14 c0       	rjmp	.+40     	; 0x254c <SW_u8GetState+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2524:	6d 89       	ldd	r22, Y+21	; 0x15
    2526:	7e 89       	ldd	r23, Y+22	; 0x16
    2528:	8f 89       	ldd	r24, Y+23	; 0x17
    252a:	98 8d       	ldd	r25, Y+24	; 0x18
    252c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2530:	dc 01       	movw	r26, r24
    2532:	cb 01       	movw	r24, r22
    2534:	9c 8b       	std	Y+20, r25	; 0x14
    2536:	8b 8b       	std	Y+19, r24	; 0x13
    2538:	8b 89       	ldd	r24, Y+19	; 0x13
    253a:	9c 89       	ldd	r25, Y+20	; 0x14
    253c:	98 8b       	std	Y+16, r25	; 0x10
    253e:	8f 87       	std	Y+15, r24	; 0x0f
    2540:	8f 85       	ldd	r24, Y+15	; 0x0f
    2542:	98 89       	ldd	r25, Y+16	; 0x10
    2544:	01 97       	sbiw	r24, 0x01	; 1
    2546:	f1 f7       	brne	.-4      	; 0x2544 <SW_u8GetState+0x13c>
    2548:	98 8b       	std	Y+16, r25	; 0x10
    254a:	8f 87       	std	Y+15, r24	; 0x0f
			{
				_delay_ms(150);
				DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,&Local_u8SwState);
    254c:	ee 8d       	ldd	r30, Y+30	; 0x1e
    254e:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2550:	80 81       	ld	r24, Z
    2552:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2554:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2556:	91 81       	ldd	r25, Z+1	; 0x01
    2558:	28 e7       	ldi	r18, 0x78	; 120
    255a:	31 e0       	ldi	r19, 0x01	; 1
    255c:	69 2f       	mov	r22, r25
    255e:	a9 01       	movw	r20, r18
    2560:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <DIO_u8GetPinValue>
				if(Local_u8SwState == DIO_PIN_LOW )
    2564:	80 91 78 01 	lds	r24, 0x0178
    2568:	88 23       	and	r24, r24
    256a:	21 f4       	brne	.+8      	; 0x2574 <SW_u8GetState+0x16c>
				{
					*Copy_u8State = SW_PRESSED;
    256c:	e8 a1       	ldd	r30, Y+32	; 0x20
    256e:	f9 a1       	ldd	r31, Y+33	; 0x21
    2570:	10 82       	st	Z, r1
    2572:	e7 c0       	rjmp	.+462    	; 0x2742 <SW_u8GetState+0x33a>
				}
				else
				{
					*Copy_u8State = SW_NOT_PRESSED;
    2574:	e8 a1       	ldd	r30, Y+32	; 0x20
    2576:	f9 a1       	ldd	r31, Y+33	; 0x21
    2578:	81 e0       	ldi	r24, 0x01	; 1
    257a:	80 83       	st	Z, r24
    257c:	e2 c0       	rjmp	.+452    	; 0x2742 <SW_u8GetState+0x33a>
				}
			}
		}
		else if(Copy_SW->SelfLockType == SW_NOT_SELF_LOCK)
    257e:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2580:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2582:	83 81       	ldd	r24, Z+3	; 0x03
    2584:	88 23       	and	r24, r24
    2586:	c9 f4       	brne	.+50     	; 0x25ba <SW_u8GetState+0x1b2>
		{
			DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,Copy_u8State);
    2588:	ee 8d       	ldd	r30, Y+30	; 0x1e
    258a:	ff 8d       	ldd	r31, Y+31	; 0x1f
    258c:	80 81       	ld	r24, Z
    258e:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2590:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2592:	91 81       	ldd	r25, Z+1	; 0x01
    2594:	28 a1       	ldd	r18, Y+32	; 0x20
    2596:	39 a1       	ldd	r19, Y+33	; 0x21
    2598:	69 2f       	mov	r22, r25
    259a:	a9 01       	movw	r20, r18
    259c:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <DIO_u8GetPinValue>
			if (Local_u8SwState == DIO_PIN_LOW)
    25a0:	80 91 78 01 	lds	r24, 0x0178
    25a4:	88 23       	and	r24, r24
    25a6:	21 f4       	brne	.+8      	; 0x25b0 <SW_u8GetState+0x1a8>
				*Copy_u8State = SW_PRESSED;
    25a8:	e8 a1       	ldd	r30, Y+32	; 0x20
    25aa:	f9 a1       	ldd	r31, Y+33	; 0x21
    25ac:	10 82       	st	Z, r1
    25ae:	c9 c0       	rjmp	.+402    	; 0x2742 <SW_u8GetState+0x33a>
			else
				*Copy_u8State = SW_NOT_PRESSED;
    25b0:	e8 a1       	ldd	r30, Y+32	; 0x20
    25b2:	f9 a1       	ldd	r31, Y+33	; 0x21
    25b4:	81 e0       	ldi	r24, 0x01	; 1
    25b6:	80 83       	st	Z, r24
    25b8:	c4 c0       	rjmp	.+392    	; 0x2742 <SW_u8GetState+0x33a>
		}
		else
			Local_u8ErrorState = NOTOK;
    25ba:	81 e0       	ldi	r24, 0x01	; 1
    25bc:	8d 8f       	std	Y+29, r24	; 0x1d
    25be:	c1 c0       	rjmp	.+386    	; 0x2742 <SW_u8GetState+0x33a>
	}
	else if(Copy_SW->Pulltype == SW_PULL_DOWN)
    25c0:	ee 8d       	ldd	r30, Y+30	; 0x1e
    25c2:	ff 8d       	ldd	r31, Y+31	; 0x1f
    25c4:	82 81       	ldd	r24, Z+2	; 0x02
    25c6:	81 30       	cpi	r24, 0x01	; 1
    25c8:	09 f0       	breq	.+2      	; 0x25cc <SW_u8GetState+0x1c4>
    25ca:	b9 c0       	rjmp	.+370    	; 0x273e <SW_u8GetState+0x336>
	{

		if(Copy_SW->SelfLockType == SW_SELF_LOCK)
    25cc:	ee 8d       	ldd	r30, Y+30	; 0x1e
    25ce:	ff 8d       	ldd	r31, Y+31	; 0x1f
    25d0:	83 81       	ldd	r24, Z+3	; 0x03
    25d2:	81 30       	cpi	r24, 0x01	; 1
    25d4:	09 f0       	breq	.+2      	; 0x25d8 <SW_u8GetState+0x1d0>
    25d6:	97 c0       	rjmp	.+302    	; 0x2706 <SW_u8GetState+0x2fe>
		{
			DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,&Local_u8SwState);
    25d8:	ee 8d       	ldd	r30, Y+30	; 0x1e
    25da:	ff 8d       	ldd	r31, Y+31	; 0x1f
    25dc:	80 81       	ld	r24, Z
    25de:	ee 8d       	ldd	r30, Y+30	; 0x1e
    25e0:	ff 8d       	ldd	r31, Y+31	; 0x1f
    25e2:	91 81       	ldd	r25, Z+1	; 0x01
    25e4:	28 e7       	ldi	r18, 0x78	; 120
    25e6:	31 e0       	ldi	r19, 0x01	; 1
    25e8:	69 2f       	mov	r22, r25
    25ea:	a9 01       	movw	r20, r18
    25ec:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <DIO_u8GetPinValue>
			if(Local_u8SwState == DIO_PIN_HIGH)
    25f0:	80 91 78 01 	lds	r24, 0x0178
    25f4:	81 30       	cpi	r24, 0x01	; 1
    25f6:	09 f0       	breq	.+2      	; 0x25fa <SW_u8GetState+0x1f2>
    25f8:	a4 c0       	rjmp	.+328    	; 0x2742 <SW_u8GetState+0x33a>
    25fa:	80 e0       	ldi	r24, 0x00	; 0
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	a6 e1       	ldi	r26, 0x16	; 22
    2600:	b3 e4       	ldi	r27, 0x43	; 67
    2602:	8b 87       	std	Y+11, r24	; 0x0b
    2604:	9c 87       	std	Y+12, r25	; 0x0c
    2606:	ad 87       	std	Y+13, r26	; 0x0d
    2608:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    260a:	6b 85       	ldd	r22, Y+11	; 0x0b
    260c:	7c 85       	ldd	r23, Y+12	; 0x0c
    260e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2610:	9e 85       	ldd	r25, Y+14	; 0x0e
    2612:	20 e0       	ldi	r18, 0x00	; 0
    2614:	30 e0       	ldi	r19, 0x00	; 0
    2616:	4a ef       	ldi	r20, 0xFA	; 250
    2618:	54 e4       	ldi	r21, 0x44	; 68
    261a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    261e:	dc 01       	movw	r26, r24
    2620:	cb 01       	movw	r24, r22
    2622:	8f 83       	std	Y+7, r24	; 0x07
    2624:	98 87       	std	Y+8, r25	; 0x08
    2626:	a9 87       	std	Y+9, r26	; 0x09
    2628:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    262a:	6f 81       	ldd	r22, Y+7	; 0x07
    262c:	78 85       	ldd	r23, Y+8	; 0x08
    262e:	89 85       	ldd	r24, Y+9	; 0x09
    2630:	9a 85       	ldd	r25, Y+10	; 0x0a
    2632:	20 e0       	ldi	r18, 0x00	; 0
    2634:	30 e0       	ldi	r19, 0x00	; 0
    2636:	40 e8       	ldi	r20, 0x80	; 128
    2638:	5f e3       	ldi	r21, 0x3F	; 63
    263a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    263e:	88 23       	and	r24, r24
    2640:	2c f4       	brge	.+10     	; 0x264c <SW_u8GetState+0x244>
		__ticks = 1;
    2642:	81 e0       	ldi	r24, 0x01	; 1
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	9e 83       	std	Y+6, r25	; 0x06
    2648:	8d 83       	std	Y+5, r24	; 0x05
    264a:	3f c0       	rjmp	.+126    	; 0x26ca <SW_u8GetState+0x2c2>
	else if (__tmp > 65535)
    264c:	6f 81       	ldd	r22, Y+7	; 0x07
    264e:	78 85       	ldd	r23, Y+8	; 0x08
    2650:	89 85       	ldd	r24, Y+9	; 0x09
    2652:	9a 85       	ldd	r25, Y+10	; 0x0a
    2654:	20 e0       	ldi	r18, 0x00	; 0
    2656:	3f ef       	ldi	r19, 0xFF	; 255
    2658:	4f e7       	ldi	r20, 0x7F	; 127
    265a:	57 e4       	ldi	r21, 0x47	; 71
    265c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2660:	18 16       	cp	r1, r24
    2662:	4c f5       	brge	.+82     	; 0x26b6 <SW_u8GetState+0x2ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2664:	6b 85       	ldd	r22, Y+11	; 0x0b
    2666:	7c 85       	ldd	r23, Y+12	; 0x0c
    2668:	8d 85       	ldd	r24, Y+13	; 0x0d
    266a:	9e 85       	ldd	r25, Y+14	; 0x0e
    266c:	20 e0       	ldi	r18, 0x00	; 0
    266e:	30 e0       	ldi	r19, 0x00	; 0
    2670:	40 e2       	ldi	r20, 0x20	; 32
    2672:	51 e4       	ldi	r21, 0x41	; 65
    2674:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2678:	dc 01       	movw	r26, r24
    267a:	cb 01       	movw	r24, r22
    267c:	bc 01       	movw	r22, r24
    267e:	cd 01       	movw	r24, r26
    2680:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2684:	dc 01       	movw	r26, r24
    2686:	cb 01       	movw	r24, r22
    2688:	9e 83       	std	Y+6, r25	; 0x06
    268a:	8d 83       	std	Y+5, r24	; 0x05
    268c:	0f c0       	rjmp	.+30     	; 0x26ac <SW_u8GetState+0x2a4>
    268e:	88 ec       	ldi	r24, 0xC8	; 200
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	9c 83       	std	Y+4, r25	; 0x04
    2694:	8b 83       	std	Y+3, r24	; 0x03
    2696:	8b 81       	ldd	r24, Y+3	; 0x03
    2698:	9c 81       	ldd	r25, Y+4	; 0x04
    269a:	01 97       	sbiw	r24, 0x01	; 1
    269c:	f1 f7       	brne	.-4      	; 0x269a <SW_u8GetState+0x292>
    269e:	9c 83       	std	Y+4, r25	; 0x04
    26a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26a2:	8d 81       	ldd	r24, Y+5	; 0x05
    26a4:	9e 81       	ldd	r25, Y+6	; 0x06
    26a6:	01 97       	sbiw	r24, 0x01	; 1
    26a8:	9e 83       	std	Y+6, r25	; 0x06
    26aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26ac:	8d 81       	ldd	r24, Y+5	; 0x05
    26ae:	9e 81       	ldd	r25, Y+6	; 0x06
    26b0:	00 97       	sbiw	r24, 0x00	; 0
    26b2:	69 f7       	brne	.-38     	; 0x268e <SW_u8GetState+0x286>
    26b4:	14 c0       	rjmp	.+40     	; 0x26de <SW_u8GetState+0x2d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26b6:	6f 81       	ldd	r22, Y+7	; 0x07
    26b8:	78 85       	ldd	r23, Y+8	; 0x08
    26ba:	89 85       	ldd	r24, Y+9	; 0x09
    26bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    26be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c2:	dc 01       	movw	r26, r24
    26c4:	cb 01       	movw	r24, r22
    26c6:	9e 83       	std	Y+6, r25	; 0x06
    26c8:	8d 83       	std	Y+5, r24	; 0x05
    26ca:	8d 81       	ldd	r24, Y+5	; 0x05
    26cc:	9e 81       	ldd	r25, Y+6	; 0x06
    26ce:	9a 83       	std	Y+2, r25	; 0x02
    26d0:	89 83       	std	Y+1, r24	; 0x01
    26d2:	89 81       	ldd	r24, Y+1	; 0x01
    26d4:	9a 81       	ldd	r25, Y+2	; 0x02
    26d6:	01 97       	sbiw	r24, 0x01	; 1
    26d8:	f1 f7       	brne	.-4      	; 0x26d6 <SW_u8GetState+0x2ce>
    26da:	9a 83       	std	Y+2, r25	; 0x02
    26dc:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(150);
				DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,&Local_u8SwState);
    26de:	ee 8d       	ldd	r30, Y+30	; 0x1e
    26e0:	ff 8d       	ldd	r31, Y+31	; 0x1f
    26e2:	80 81       	ld	r24, Z
    26e4:	ee 8d       	ldd	r30, Y+30	; 0x1e
    26e6:	ff 8d       	ldd	r31, Y+31	; 0x1f
    26e8:	91 81       	ldd	r25, Z+1	; 0x01
    26ea:	28 e7       	ldi	r18, 0x78	; 120
    26ec:	31 e0       	ldi	r19, 0x01	; 1
    26ee:	69 2f       	mov	r22, r25
    26f0:	a9 01       	movw	r20, r18
    26f2:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <DIO_u8GetPinValue>
				if(Local_u8SwState == DIO_PIN_HIGH )
    26f6:	80 91 78 01 	lds	r24, 0x0178
    26fa:	81 30       	cpi	r24, 0x01	; 1
    26fc:	11 f5       	brne	.+68     	; 0x2742 <SW_u8GetState+0x33a>
				{
					*Copy_u8State = SW_PRESSED;
    26fe:	e8 a1       	ldd	r30, Y+32	; 0x20
    2700:	f9 a1       	ldd	r31, Y+33	; 0x21
    2702:	10 82       	st	Z, r1
    2704:	1e c0       	rjmp	.+60     	; 0x2742 <SW_u8GetState+0x33a>
				}
			}
		}
		else if(Copy_SW->SelfLockType == SW_NOT_SELF_LOCK)
    2706:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2708:	ff 8d       	ldd	r31, Y+31	; 0x1f
    270a:	83 81       	ldd	r24, Z+3	; 0x03
    270c:	88 23       	and	r24, r24
    270e:	a1 f4       	brne	.+40     	; 0x2738 <SW_u8GetState+0x330>
		{
			DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,Copy_u8State);
    2710:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2712:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2714:	80 81       	ld	r24, Z
    2716:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2718:	ff 8d       	ldd	r31, Y+31	; 0x1f
    271a:	91 81       	ldd	r25, Z+1	; 0x01
    271c:	28 a1       	ldd	r18, Y+32	; 0x20
    271e:	39 a1       	ldd	r19, Y+33	; 0x21
    2720:	69 2f       	mov	r22, r25
    2722:	a9 01       	movw	r20, r18
    2724:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <DIO_u8GetPinValue>
			if (Local_u8SwState == DIO_PIN_HIGH)
    2728:	80 91 78 01 	lds	r24, 0x0178
    272c:	81 30       	cpi	r24, 0x01	; 1
    272e:	49 f4       	brne	.+18     	; 0x2742 <SW_u8GetState+0x33a>
				*Copy_u8State = SW_PRESSED;
    2730:	e8 a1       	ldd	r30, Y+32	; 0x20
    2732:	f9 a1       	ldd	r31, Y+33	; 0x21
    2734:	10 82       	st	Z, r1
    2736:	05 c0       	rjmp	.+10     	; 0x2742 <SW_u8GetState+0x33a>
		}
		else
			Local_u8ErrorState = NOTOK;
    2738:	81 e0       	ldi	r24, 0x01	; 1
    273a:	8d 8f       	std	Y+29, r24	; 0x1d
    273c:	02 c0       	rjmp	.+4      	; 0x2742 <SW_u8GetState+0x33a>
	}
	else
		Local_u8ErrorState = NOTOK;
    273e:	81 e0       	ldi	r24, 0x01	; 1
    2740:	8d 8f       	std	Y+29, r24	; 0x1d

	return Local_u8ErrorState;
    2742:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    2744:	a1 96       	adiw	r28, 0x21	; 33
    2746:	0f b6       	in	r0, 0x3f	; 63
    2748:	f8 94       	cli
    274a:	de bf       	out	0x3e, r29	; 62
    274c:	0f be       	out	0x3f, r0	; 63
    274e:	cd bf       	out	0x3d, r28	; 61
    2750:	cf 91       	pop	r28
    2752:	df 91       	pop	r29
    2754:	08 95       	ret

00002756 <SW_u8GetState2>:
 * 			Copy_SW     : Full with Port,Pin,SelfType,switch function
 * 			Copy_u8State: return State of switch as (0) Pressed , (1) Not pressed
 * use for: Get Switch by Function Call Back i.e (switch function )
 *  */
u8 SW_u8GetState2(SW_t* Copy_SW,u8 *Copy_u8State)
{
    2756:	df 93       	push	r29
    2758:	cf 93       	push	r28
    275a:	00 d0       	rcall	.+0      	; 0x275c <SW_u8GetState2+0x6>
    275c:	00 d0       	rcall	.+0      	; 0x275e <SW_u8GetState2+0x8>
    275e:	0f 92       	push	r0
    2760:	cd b7       	in	r28, 0x3d	; 61
    2762:	de b7       	in	r29, 0x3e	; 62
    2764:	9b 83       	std	Y+3, r25	; 0x03
    2766:	8a 83       	std	Y+2, r24	; 0x02
    2768:	7d 83       	std	Y+5, r23	; 0x05
    276a:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = OK;
    276c:	19 82       	std	Y+1, r1	; 0x01
	static u8 pressed_conf_level = 0;
	static u8 released_conf_level = 0;
	static u8 pressed = 0;
	*Copy_u8State = SW_NOT_PRESSED;
    276e:	ec 81       	ldd	r30, Y+4	; 0x04
    2770:	fd 81       	ldd	r31, Y+5	; 0x05
    2772:	81 e0       	ldi	r24, 0x01	; 1
    2774:	80 83       	st	Z, r24
	static u8 Local_u8SwState;
	if(Copy_SW->Pulltype == SW_PULL_UP)
    2776:	ea 81       	ldd	r30, Y+2	; 0x02
    2778:	fb 81       	ldd	r31, Y+3	; 0x03
    277a:	82 81       	ldd	r24, Z+2	; 0x02
    277c:	88 23       	and	r24, r24
    277e:	09 f0       	breq	.+2      	; 0x2782 <SW_u8GetState2+0x2c>
    2780:	76 c0       	rjmp	.+236    	; 0x286e <SW_u8GetState2+0x118>
	{
		pressed = 0;
    2782:	10 92 7a 01 	sts	0x017A, r1
		if(Copy_SW->SelfLockType == SW_SELF_LOCK)
    2786:	ea 81       	ldd	r30, Y+2	; 0x02
    2788:	fb 81       	ldd	r31, Y+3	; 0x03
    278a:	83 81       	ldd	r24, Z+3	; 0x03
    278c:	81 30       	cpi	r24, 0x01	; 1
    278e:	09 f0       	breq	.+2      	; 0x2792 <SW_u8GetState2+0x3c>
    2790:	4d c0       	rjmp	.+154    	; 0x282c <SW_u8GetState2+0xd6>
		{
			DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,&Local_u8SwState);
    2792:	ea 81       	ldd	r30, Y+2	; 0x02
    2794:	fb 81       	ldd	r31, Y+3	; 0x03
    2796:	80 81       	ld	r24, Z
    2798:	ea 81       	ldd	r30, Y+2	; 0x02
    279a:	fb 81       	ldd	r31, Y+3	; 0x03
    279c:	91 81       	ldd	r25, Z+1	; 0x01
    279e:	29 e7       	ldi	r18, 0x79	; 121
    27a0:	31 e0       	ldi	r19, 0x01	; 1
    27a2:	69 2f       	mov	r22, r25
    27a4:	a9 01       	movw	r20, r18
    27a6:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <DIO_u8GetPinValue>
			if(Local_u8SwState == DIO_PIN_LOW)
    27aa:	80 91 79 01 	lds	r24, 0x0179
    27ae:	88 23       	and	r24, r24
    27b0:	09 f0       	breq	.+2      	; 0x27b4 <SW_u8GetState2+0x5e>
    27b2:	c4 c0       	rjmp	.+392    	; 0x293c <SW_u8GetState2+0x1e6>
			{
				DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,&Local_u8SwState);
    27b4:	ea 81       	ldd	r30, Y+2	; 0x02
    27b6:	fb 81       	ldd	r31, Y+3	; 0x03
    27b8:	80 81       	ld	r24, Z
    27ba:	ea 81       	ldd	r30, Y+2	; 0x02
    27bc:	fb 81       	ldd	r31, Y+3	; 0x03
    27be:	91 81       	ldd	r25, Z+1	; 0x01
    27c0:	29 e7       	ldi	r18, 0x79	; 121
    27c2:	31 e0       	ldi	r19, 0x01	; 1
    27c4:	69 2f       	mov	r22, r25
    27c6:	a9 01       	movw	r20, r18
    27c8:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <DIO_u8GetPinValue>
				if(Local_u8SwState == DIO_PIN_LOW)
    27cc:	80 91 79 01 	lds	r24, 0x0179
    27d0:	88 23       	and	r24, r24
    27d2:	09 f0       	breq	.+2      	; 0x27d6 <SW_u8GetState2+0x80>
    27d4:	b3 c0       	rjmp	.+358    	; 0x293c <SW_u8GetState2+0x1e6>
				{
					pressed_conf_level++;
    27d6:	80 91 7c 01 	lds	r24, 0x017C
    27da:	8f 5f       	subi	r24, 0xFF	; 255
    27dc:	80 93 7c 01 	sts	0x017C, r24
					if(pressed_conf_level>20)
    27e0:	80 91 7c 01 	lds	r24, 0x017C
    27e4:	85 31       	cpi	r24, 0x15	; 21
    27e6:	98 f0       	brcs	.+38     	; 0x280e <SW_u8GetState2+0xb8>
					{
						if(pressed==0)
    27e8:	80 91 7a 01 	lds	r24, 0x017A
    27ec:	88 23       	and	r24, r24
    27ee:	61 f4       	brne	.+24     	; 0x2808 <SW_u8GetState2+0xb2>
						{
							*Copy_u8State = SW_PRESSED;
    27f0:	ec 81       	ldd	r30, Y+4	; 0x04
    27f2:	fd 81       	ldd	r31, Y+5	; 0x05
    27f4:	10 82       	st	Z, r1
							Copy_SW->Notification();
    27f6:	ea 81       	ldd	r30, Y+2	; 0x02
    27f8:	fb 81       	ldd	r31, Y+3	; 0x03
    27fa:	04 80       	ldd	r0, Z+4	; 0x04
    27fc:	f5 81       	ldd	r31, Z+5	; 0x05
    27fe:	e0 2d       	mov	r30, r0
    2800:	09 95       	icall
							pressed=1;
    2802:	81 e0       	ldi	r24, 0x01	; 1
    2804:	80 93 7a 01 	sts	0x017A, r24
						}
						pressed_conf_level=0;
    2808:	10 92 7c 01 	sts	0x017C, r1
    280c:	97 c0       	rjmp	.+302    	; 0x293c <SW_u8GetState2+0x1e6>
					}
					else
					{
						released_conf_level++;
    280e:	80 91 7b 01 	lds	r24, 0x017B
    2812:	8f 5f       	subi	r24, 0xFF	; 255
    2814:	80 93 7b 01 	sts	0x017B, r24
						if(released_conf_level>20)
    2818:	80 91 7b 01 	lds	r24, 0x017B
    281c:	85 31       	cpi	r24, 0x15	; 21
    281e:	08 f4       	brcc	.+2      	; 0x2822 <SW_u8GetState2+0xcc>
    2820:	8d c0       	rjmp	.+282    	; 0x293c <SW_u8GetState2+0x1e6>
						{
							pressed = 0;
    2822:	10 92 7a 01 	sts	0x017A, r1
							released_conf_level = 0;
    2826:	10 92 7b 01 	sts	0x017B, r1
    282a:	88 c0       	rjmp	.+272    	; 0x293c <SW_u8GetState2+0x1e6>
						}
					}
				}
			}
		}
		else if(Copy_SW->SelfLockType == SW_NOT_SELF_LOCK)
    282c:	ea 81       	ldd	r30, Y+2	; 0x02
    282e:	fb 81       	ldd	r31, Y+3	; 0x03
    2830:	83 81       	ldd	r24, Z+3	; 0x03
    2832:	88 23       	and	r24, r24
    2834:	c9 f4       	brne	.+50     	; 0x2868 <SW_u8GetState2+0x112>
		{
			DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,Copy_u8State);
    2836:	ea 81       	ldd	r30, Y+2	; 0x02
    2838:	fb 81       	ldd	r31, Y+3	; 0x03
    283a:	80 81       	ld	r24, Z
    283c:	ea 81       	ldd	r30, Y+2	; 0x02
    283e:	fb 81       	ldd	r31, Y+3	; 0x03
    2840:	91 81       	ldd	r25, Z+1	; 0x01
    2842:	2c 81       	ldd	r18, Y+4	; 0x04
    2844:	3d 81       	ldd	r19, Y+5	; 0x05
    2846:	69 2f       	mov	r22, r25
    2848:	a9 01       	movw	r20, r18
    284a:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <DIO_u8GetPinValue>
			if (Local_u8SwState == DIO_PIN_LOW)
    284e:	80 91 79 01 	lds	r24, 0x0179
    2852:	88 23       	and	r24, r24
    2854:	21 f4       	brne	.+8      	; 0x285e <SW_u8GetState2+0x108>
				*Copy_u8State = SW_PRESSED;
    2856:	ec 81       	ldd	r30, Y+4	; 0x04
    2858:	fd 81       	ldd	r31, Y+5	; 0x05
    285a:	10 82       	st	Z, r1
    285c:	6f c0       	rjmp	.+222    	; 0x293c <SW_u8GetState2+0x1e6>
			else
				*Copy_u8State = SW_NOT_PRESSED;
    285e:	ec 81       	ldd	r30, Y+4	; 0x04
    2860:	fd 81       	ldd	r31, Y+5	; 0x05
    2862:	81 e0       	ldi	r24, 0x01	; 1
    2864:	80 83       	st	Z, r24
    2866:	6a c0       	rjmp	.+212    	; 0x293c <SW_u8GetState2+0x1e6>
		}
		else
			Local_u8ErrorState = NOTOK;
    2868:	81 e0       	ldi	r24, 0x01	; 1
    286a:	89 83       	std	Y+1, r24	; 0x01
    286c:	67 c0       	rjmp	.+206    	; 0x293c <SW_u8GetState2+0x1e6>
	}
	else if(Copy_SW->Pulltype == SW_PULL_DOWN)
    286e:	ea 81       	ldd	r30, Y+2	; 0x02
    2870:	fb 81       	ldd	r31, Y+3	; 0x03
    2872:	82 81       	ldd	r24, Z+2	; 0x02
    2874:	81 30       	cpi	r24, 0x01	; 1
    2876:	09 f0       	breq	.+2      	; 0x287a <SW_u8GetState2+0x124>
    2878:	5f c0       	rjmp	.+190    	; 0x2938 <SW_u8GetState2+0x1e2>
	{
		pressed = 1;
    287a:	81 e0       	ldi	r24, 0x01	; 1
    287c:	80 93 7a 01 	sts	0x017A, r24
		if(Copy_SW->SelfLockType == SW_SELF_LOCK)
    2880:	ea 81       	ldd	r30, Y+2	; 0x02
    2882:	fb 81       	ldd	r31, Y+3	; 0x03
    2884:	83 81       	ldd	r24, Z+3	; 0x03
    2886:	81 30       	cpi	r24, 0x01	; 1
    2888:	d9 f5       	brne	.+118    	; 0x2900 <SW_u8GetState2+0x1aa>
		{
			DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,&Local_u8SwState);
    288a:	ea 81       	ldd	r30, Y+2	; 0x02
    288c:	fb 81       	ldd	r31, Y+3	; 0x03
    288e:	80 81       	ld	r24, Z
    2890:	ea 81       	ldd	r30, Y+2	; 0x02
    2892:	fb 81       	ldd	r31, Y+3	; 0x03
    2894:	91 81       	ldd	r25, Z+1	; 0x01
    2896:	29 e7       	ldi	r18, 0x79	; 121
    2898:	31 e0       	ldi	r19, 0x01	; 1
    289a:	69 2f       	mov	r22, r25
    289c:	a9 01       	movw	r20, r18
    289e:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <DIO_u8GetPinValue>
			if(Local_u8SwState == DIO_PIN_HIGH)
    28a2:	80 91 79 01 	lds	r24, 0x0179
    28a6:	81 30       	cpi	r24, 0x01	; 1
    28a8:	09 f0       	breq	.+2      	; 0x28ac <SW_u8GetState2+0x156>
    28aa:	48 c0       	rjmp	.+144    	; 0x293c <SW_u8GetState2+0x1e6>
			{
				pressed_conf_level++;
    28ac:	80 91 7c 01 	lds	r24, 0x017C
    28b0:	8f 5f       	subi	r24, 0xFF	; 255
    28b2:	80 93 7c 01 	sts	0x017C, r24
				if(pressed_conf_level>20)
    28b6:	80 91 7c 01 	lds	r24, 0x017C
    28ba:	85 31       	cpi	r24, 0x15	; 21
    28bc:	90 f0       	brcs	.+36     	; 0x28e2 <SW_u8GetState2+0x18c>
				{
					if(pressed==1)
    28be:	80 91 7a 01 	lds	r24, 0x017A
    28c2:	81 30       	cpi	r24, 0x01	; 1
    28c4:	59 f4       	brne	.+22     	; 0x28dc <SW_u8GetState2+0x186>
					{
						*Copy_u8State = SW_PRESSED;
    28c6:	ec 81       	ldd	r30, Y+4	; 0x04
    28c8:	fd 81       	ldd	r31, Y+5	; 0x05
    28ca:	10 82       	st	Z, r1
						Copy_SW->Notification();
    28cc:	ea 81       	ldd	r30, Y+2	; 0x02
    28ce:	fb 81       	ldd	r31, Y+3	; 0x03
    28d0:	04 80       	ldd	r0, Z+4	; 0x04
    28d2:	f5 81       	ldd	r31, Z+5	; 0x05
    28d4:	e0 2d       	mov	r30, r0
    28d6:	09 95       	icall
						pressed=0;
    28d8:	10 92 7a 01 	sts	0x017A, r1
					}
					pressed_conf_level=0;
    28dc:	10 92 7c 01 	sts	0x017C, r1
    28e0:	2d c0       	rjmp	.+90     	; 0x293c <SW_u8GetState2+0x1e6>
				}
				else
				{
					released_conf_level++;
    28e2:	80 91 7b 01 	lds	r24, 0x017B
    28e6:	8f 5f       	subi	r24, 0xFF	; 255
    28e8:	80 93 7b 01 	sts	0x017B, r24
					if(released_conf_level>20)
    28ec:	80 91 7b 01 	lds	r24, 0x017B
    28f0:	85 31       	cpi	r24, 0x15	; 21
    28f2:	20 f1       	brcs	.+72     	; 0x293c <SW_u8GetState2+0x1e6>
					{
						pressed = 1;
    28f4:	81 e0       	ldi	r24, 0x01	; 1
    28f6:	80 93 7a 01 	sts	0x017A, r24
						released_conf_level = 0;
    28fa:	10 92 7b 01 	sts	0x017B, r1
    28fe:	1e c0       	rjmp	.+60     	; 0x293c <SW_u8GetState2+0x1e6>
					}
				}
			}
		}
		else if(Copy_SW->SelfLockType == SW_NOT_SELF_LOCK)
    2900:	ea 81       	ldd	r30, Y+2	; 0x02
    2902:	fb 81       	ldd	r31, Y+3	; 0x03
    2904:	83 81       	ldd	r24, Z+3	; 0x03
    2906:	88 23       	and	r24, r24
    2908:	a1 f4       	brne	.+40     	; 0x2932 <SW_u8GetState2+0x1dc>
		{
			DIO_u8GetPinValue(Copy_SW->Port,Copy_SW->Pin,Copy_u8State);
    290a:	ea 81       	ldd	r30, Y+2	; 0x02
    290c:	fb 81       	ldd	r31, Y+3	; 0x03
    290e:	80 81       	ld	r24, Z
    2910:	ea 81       	ldd	r30, Y+2	; 0x02
    2912:	fb 81       	ldd	r31, Y+3	; 0x03
    2914:	91 81       	ldd	r25, Z+1	; 0x01
    2916:	2c 81       	ldd	r18, Y+4	; 0x04
    2918:	3d 81       	ldd	r19, Y+5	; 0x05
    291a:	69 2f       	mov	r22, r25
    291c:	a9 01       	movw	r20, r18
    291e:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <DIO_u8GetPinValue>
			if (Local_u8SwState == DIO_PIN_HIGH)
    2922:	80 91 79 01 	lds	r24, 0x0179
    2926:	81 30       	cpi	r24, 0x01	; 1
    2928:	49 f4       	brne	.+18     	; 0x293c <SW_u8GetState2+0x1e6>
				*Copy_u8State = SW_PRESSED;
    292a:	ec 81       	ldd	r30, Y+4	; 0x04
    292c:	fd 81       	ldd	r31, Y+5	; 0x05
    292e:	10 82       	st	Z, r1
    2930:	05 c0       	rjmp	.+10     	; 0x293c <SW_u8GetState2+0x1e6>
		}
		else
			Local_u8ErrorState = NOTOK;
    2932:	81 e0       	ldi	r24, 0x01	; 1
    2934:	89 83       	std	Y+1, r24	; 0x01
    2936:	02 c0       	rjmp	.+4      	; 0x293c <SW_u8GetState2+0x1e6>
	}
	else
		Local_u8ErrorState = NOTOK;
    2938:	81 e0       	ldi	r24, 0x01	; 1
    293a:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    293c:	89 81       	ldd	r24, Y+1	; 0x01
}
    293e:	0f 90       	pop	r0
    2940:	0f 90       	pop	r0
    2942:	0f 90       	pop	r0
    2944:	0f 90       	pop	r0
    2946:	0f 90       	pop	r0
    2948:	cf 91       	pop	r28
    294a:	df 91       	pop	r29
    294c:	08 95       	ret

0000294e <main>:
				 0B0000100,\
				 0B0000100,\
				 0B0000100,\
				 0B0000100}
void main()
{
    294e:	ef 92       	push	r14
    2950:	ff 92       	push	r15
    2952:	0f 93       	push	r16
    2954:	1f 93       	push	r17
    2956:	df 93       	push	r29
    2958:	cf 93       	push	r28
    295a:	cd b7       	in	r28, 0x3d	; 61
    295c:	de b7       	in	r29, 0x3e	; 62
    295e:	a9 97       	sbiw	r28, 0x29	; 41
    2960:	0f b6       	in	r0, 0x3f	; 63
    2962:	f8 94       	cli
    2964:	de bf       	out	0x3e, r29	; 62
    2966:	0f be       	out	0x3f, r0	; 63
    2968:	cd bf       	out	0x3d, r28	; 61
	PORT_voidInit();
    296a:	0e 94 3a 11 	call	0x2274	; 0x2274 <PORT_voidInit>
	CLCD_voidInit();
    296e:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <CLCD_voidInit>
	u8 arr[8]= Pattern;
    2972:	88 e0       	ldi	r24, 0x08	; 8
    2974:	fe 01       	movw	r30, r28
    2976:	37 96       	adiw	r30, 0x07	; 7
    2978:	df 01       	movw	r26, r30
    297a:	28 2f       	mov	r18, r24
    297c:	1d 92       	st	X+, r1
    297e:	2a 95       	dec	r18
    2980:	e9 f7       	brne	.-6      	; 0x297c <main+0x2e>
    2982:	84 e0       	ldi	r24, 0x04	; 4
    2984:	8f 83       	std	Y+7, r24	; 0x07
    2986:	8e e0       	ldi	r24, 0x0E	; 14
    2988:	88 87       	std	Y+8, r24	; 0x08
    298a:	85 e1       	ldi	r24, 0x15	; 21
    298c:	89 87       	std	Y+9, r24	; 0x09
    298e:	84 e0       	ldi	r24, 0x04	; 4
    2990:	8a 87       	std	Y+10, r24	; 0x0a
    2992:	84 e0       	ldi	r24, 0x04	; 4
    2994:	8b 87       	std	Y+11, r24	; 0x0b
    2996:	84 e0       	ldi	r24, 0x04	; 4
    2998:	8c 87       	std	Y+12, r24	; 0x0c
    299a:	84 e0       	ldi	r24, 0x04	; 4
    299c:	8d 87       	std	Y+13, r24	; 0x0d
	SW_t enter={DIO_PORTB,DIO_PIN7,SW_PULL_UP,SW_SELF_LOCK},\
    299e:	86 e0       	ldi	r24, 0x06	; 6
    29a0:	fe 01       	movw	r30, r28
    29a2:	3f 96       	adiw	r30, 0x0f	; 15
    29a4:	df 01       	movw	r26, r30
    29a6:	28 2f       	mov	r18, r24
    29a8:	1d 92       	st	X+, r1
    29aa:	2a 95       	dec	r18
    29ac:	e9 f7       	brne	.-6      	; 0x29a8 <main+0x5a>
    29ae:	81 e0       	ldi	r24, 0x01	; 1
    29b0:	8f 87       	std	Y+15, r24	; 0x0f
    29b2:	87 e0       	ldi	r24, 0x07	; 7
    29b4:	88 8b       	std	Y+16, r24	; 0x10
    29b6:	81 e0       	ldi	r24, 0x01	; 1
    29b8:	8a 8b       	std	Y+18, r24	; 0x12
    29ba:	86 e0       	ldi	r24, 0x06	; 6
    29bc:	fe 01       	movw	r30, r28
    29be:	75 96       	adiw	r30, 0x15	; 21
    29c0:	df 01       	movw	r26, r30
    29c2:	28 2f       	mov	r18, r24
    29c4:	1d 92       	st	X+, r1
    29c6:	2a 95       	dec	r18
    29c8:	e9 f7       	brne	.-6      	; 0x29c4 <main+0x76>
    29ca:	81 e0       	ldi	r24, 0x01	; 1
    29cc:	8d 8b       	std	Y+21, r24	; 0x15
    29ce:	86 e0       	ldi	r24, 0x06	; 6
    29d0:	8e 8b       	std	Y+22, r24	; 0x16
    29d2:	81 e0       	ldi	r24, 0x01	; 1
    29d4:	88 8f       	std	Y+24, r24	; 0x18
    29d6:	86 e0       	ldi	r24, 0x06	; 6
    29d8:	fe 01       	movw	r30, r28
    29da:	7b 96       	adiw	r30, 0x1b	; 27
    29dc:	df 01       	movw	r26, r30
    29de:	28 2f       	mov	r18, r24
    29e0:	1d 92       	st	X+, r1
    29e2:	2a 95       	dec	r18
    29e4:	e9 f7       	brne	.-6      	; 0x29e0 <main+0x92>
    29e6:	81 e0       	ldi	r24, 0x01	; 1
    29e8:	8b 8f       	std	Y+27, r24	; 0x1b
    29ea:	85 e0       	ldi	r24, 0x05	; 5
    29ec:	8c 8f       	std	Y+28, r24	; 0x1c
    29ee:	81 e0       	ldi	r24, 0x01	; 1
    29f0:	8e 8f       	std	Y+30, r24	; 0x1e
		down={DIO_PORTB,DIO_PIN6,SW_PULL_UP,SW_SELF_LOCK},\
		up={DIO_PORTB,DIO_PIN5,SW_PULL_UP,SW_SELF_LOCK};
	u8 x1,x2,x3,op1=1,oper[4]={'+','-','*','/'},op2=1,op=0,result;
    29f2:	81 e0       	ldi	r24, 0x01	; 1
    29f4:	8e 83       	std	Y+6, r24	; 0x06
    29f6:	8b e2       	ldi	r24, 0x2B	; 43
    29f8:	8c a3       	std	Y+36, r24	; 0x24
    29fa:	8d e2       	ldi	r24, 0x2D	; 45
    29fc:	8d a3       	std	Y+37, r24	; 0x25
    29fe:	8a e2       	ldi	r24, 0x2A	; 42
    2a00:	8e a3       	std	Y+38, r24	; 0x26
    2a02:	8f e2       	ldi	r24, 0x2F	; 47
    2a04:	8f a3       	std	Y+39, r24	; 0x27
    2a06:	81 e0       	ldi	r24, 0x01	; 1
    2a08:	8d 83       	std	Y+5, r24	; 0x05
    2a0a:	1c 82       	std	Y+4, r1	; 0x04
	while(1)
	{
		CLCD_voidSendCommand(0x80);
    2a0c:	80 e8       	ldi	r24, 0x80	; 128
    2a0e:	0e 94 75 07 	call	0xeea	; 0xeea <CLCD_voidSendCommand>
		CLCD_voidWriteNumber(op1);
    2a12:	8e 81       	ldd	r24, Y+6	; 0x06
    2a14:	88 2f       	mov	r24, r24
    2a16:	90 e0       	ldi	r25, 0x00	; 0
    2a18:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <CLCD_voidWriteNumber>
		CLCD_voidSendData(oper[op]);
    2a1c:	8c 81       	ldd	r24, Y+4	; 0x04
    2a1e:	28 2f       	mov	r18, r24
    2a20:	30 e0       	ldi	r19, 0x00	; 0
    2a22:	ce 01       	movw	r24, r28
    2a24:	84 96       	adiw	r24, 0x24	; 36
    2a26:	fc 01       	movw	r30, r24
    2a28:	e2 0f       	add	r30, r18
    2a2a:	f3 1f       	adc	r31, r19
    2a2c:	80 81       	ld	r24, Z
    2a2e:	0e 94 53 09 	call	0x12a6	; 0x12a6 <CLCD_voidSendData>
		CLCD_voidWriteNumber(op2);
    2a32:	8d 81       	ldd	r24, Y+5	; 0x05
    2a34:	88 2f       	mov	r24, r24
    2a36:	90 e0       	ldi	r25, 0x00	; 0
    2a38:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <CLCD_voidWriteNumber>
		CLCD_voidWriteSpecialCharacter(arr,0,1,0);
    2a3c:	ce 01       	movw	r24, r28
    2a3e:	07 96       	adiw	r24, 0x07	; 7
    2a40:	60 e0       	ldi	r22, 0x00	; 0
    2a42:	41 e0       	ldi	r20, 0x01	; 1
    2a44:	20 e0       	ldi	r18, 0x00	; 0
    2a46:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <CLCD_voidWriteSpecialCharacter>
		do{
			SW_u8GetState(&enter,&x1);
    2a4a:	ce 01       	movw	r24, r28
    2a4c:	0f 96       	adiw	r24, 0x0f	; 15
    2a4e:	9e 01       	movw	r18, r28
    2a50:	2f 5d       	subi	r18, 0xDF	; 223
    2a52:	3f 4f       	sbci	r19, 0xFF	; 255
    2a54:	b9 01       	movw	r22, r18
    2a56:	0e 94 04 12 	call	0x2408	; 0x2408 <SW_u8GetState>
			SW_u8GetState(&up,&x2);
    2a5a:	ce 01       	movw	r24, r28
    2a5c:	4b 96       	adiw	r24, 0x1b	; 27
    2a5e:	9e 01       	movw	r18, r28
    2a60:	2e 5d       	subi	r18, 0xDE	; 222
    2a62:	3f 4f       	sbci	r19, 0xFF	; 255
    2a64:	b9 01       	movw	r22, r18
    2a66:	0e 94 04 12 	call	0x2408	; 0x2408 <SW_u8GetState>
			CLCD_voidGoToXY(0,0);
    2a6a:	80 e0       	ldi	r24, 0x00	; 0
    2a6c:	60 e0       	ldi	r22, 0x00	; 0
    2a6e:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <CLCD_voidGoToXY>
			CLCD_voidWriteNumber(op1);
    2a72:	8e 81       	ldd	r24, Y+6	; 0x06
    2a74:	88 2f       	mov	r24, r24
    2a76:	90 e0       	ldi	r25, 0x00	; 0
    2a78:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <CLCD_voidWriteNumber>
			if(x2==SW_PRESSED)
    2a7c:	8a a1       	ldd	r24, Y+34	; 0x22
    2a7e:	88 23       	and	r24, r24
    2a80:	39 f4       	brne	.+14     	; 0x2a90 <main+0x142>
			{
				op1++;
    2a82:	8e 81       	ldd	r24, Y+6	; 0x06
    2a84:	8f 5f       	subi	r24, 0xFF	; 255
    2a86:	8e 83       	std	Y+6, r24	; 0x06
				if(op1>=10)
    2a88:	8e 81       	ldd	r24, Y+6	; 0x06
    2a8a:	8a 30       	cpi	r24, 0x0A	; 10
    2a8c:	08 f0       	brcs	.+2      	; 0x2a90 <main+0x142>
					op1=0;
    2a8e:	1e 82       	std	Y+6, r1	; 0x06
			}
			SW_u8GetState(&down,&x3);
    2a90:	ce 01       	movw	r24, r28
    2a92:	45 96       	adiw	r24, 0x15	; 21
    2a94:	9e 01       	movw	r18, r28
    2a96:	2d 5d       	subi	r18, 0xDD	; 221
    2a98:	3f 4f       	sbci	r19, 0xFF	; 255
    2a9a:	b9 01       	movw	r22, r18
    2a9c:	0e 94 04 12 	call	0x2408	; 0x2408 <SW_u8GetState>
			if(x3==SW_PRESSED)
    2aa0:	8b a1       	ldd	r24, Y+35	; 0x23
    2aa2:	88 23       	and	r24, r24
    2aa4:	41 f4       	brne	.+16     	; 0x2ab6 <main+0x168>
			{
				op1--;
    2aa6:	8e 81       	ldd	r24, Y+6	; 0x06
    2aa8:	81 50       	subi	r24, 0x01	; 1
    2aaa:	8e 83       	std	Y+6, r24	; 0x06
				if(op1>=10)
    2aac:	8e 81       	ldd	r24, Y+6	; 0x06
    2aae:	8a 30       	cpi	r24, 0x0A	; 10
    2ab0:	10 f0       	brcs	.+4      	; 0x2ab6 <main+0x168>
					op1=9;
    2ab2:	89 e0       	ldi	r24, 0x09	; 9
    2ab4:	8e 83       	std	Y+6, r24	; 0x06
			}
		}while(x1==SW_NOT_PRESSED);
    2ab6:	89 a1       	ldd	r24, Y+33	; 0x21
    2ab8:	81 30       	cpi	r24, 0x01	; 1
    2aba:	39 f2       	breq	.-114    	; 0x2a4a <main+0xfc>
		CLCD_voidGoToXY(1,0);
    2abc:	81 e0       	ldi	r24, 0x01	; 1
    2abe:	60 e0       	ldi	r22, 0x00	; 0
    2ac0:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <CLCD_voidGoToXY>
		CLCD_voidSendData(' ');
    2ac4:	80 e2       	ldi	r24, 0x20	; 32
    2ac6:	0e 94 53 09 	call	0x12a6	; 0x12a6 <CLCD_voidSendData>
		CLCD_voidWriteSpecialCharacter(arr,0,1,1);
    2aca:	ce 01       	movw	r24, r28
    2acc:	07 96       	adiw	r24, 0x07	; 7
    2ace:	60 e0       	ldi	r22, 0x00	; 0
    2ad0:	41 e0       	ldi	r20, 0x01	; 1
    2ad2:	21 e0       	ldi	r18, 0x01	; 1
    2ad4:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <CLCD_voidWriteSpecialCharacter>
		do{
			SW_u8GetState(&enter,&x1);
    2ad8:	ce 01       	movw	r24, r28
    2ada:	0f 96       	adiw	r24, 0x0f	; 15
    2adc:	9e 01       	movw	r18, r28
    2ade:	2f 5d       	subi	r18, 0xDF	; 223
    2ae0:	3f 4f       	sbci	r19, 0xFF	; 255
    2ae2:	b9 01       	movw	r22, r18
    2ae4:	0e 94 04 12 	call	0x2408	; 0x2408 <SW_u8GetState>
			SW_u8GetState(&up,&x2);
    2ae8:	ce 01       	movw	r24, r28
    2aea:	4b 96       	adiw	r24, 0x1b	; 27
    2aec:	9e 01       	movw	r18, r28
    2aee:	2e 5d       	subi	r18, 0xDE	; 222
    2af0:	3f 4f       	sbci	r19, 0xFF	; 255
    2af2:	b9 01       	movw	r22, r18
    2af4:	0e 94 04 12 	call	0x2408	; 0x2408 <SW_u8GetState>
			CLCD_voidGoToXY(0,1);
    2af8:	80 e0       	ldi	r24, 0x00	; 0
    2afa:	61 e0       	ldi	r22, 0x01	; 1
    2afc:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <CLCD_voidGoToXY>
			CLCD_voidSendData(oper[op]);
    2b00:	8c 81       	ldd	r24, Y+4	; 0x04
    2b02:	28 2f       	mov	r18, r24
    2b04:	30 e0       	ldi	r19, 0x00	; 0
    2b06:	ce 01       	movw	r24, r28
    2b08:	84 96       	adiw	r24, 0x24	; 36
    2b0a:	fc 01       	movw	r30, r24
    2b0c:	e2 0f       	add	r30, r18
    2b0e:	f3 1f       	adc	r31, r19
    2b10:	80 81       	ld	r24, Z
    2b12:	0e 94 53 09 	call	0x12a6	; 0x12a6 <CLCD_voidSendData>
			if(x2==SW_PRESSED)
    2b16:	8a a1       	ldd	r24, Y+34	; 0x22
    2b18:	88 23       	and	r24, r24
    2b1a:	39 f4       	brne	.+14     	; 0x2b2a <main+0x1dc>
			{
				op++;
    2b1c:	8c 81       	ldd	r24, Y+4	; 0x04
    2b1e:	8f 5f       	subi	r24, 0xFF	; 255
    2b20:	8c 83       	std	Y+4, r24	; 0x04
				if(op>=4)
    2b22:	8c 81       	ldd	r24, Y+4	; 0x04
    2b24:	84 30       	cpi	r24, 0x04	; 4
    2b26:	08 f0       	brcs	.+2      	; 0x2b2a <main+0x1dc>
					op=0;
    2b28:	1c 82       	std	Y+4, r1	; 0x04
			}
			SW_u8GetState(&down,&x3);
    2b2a:	ce 01       	movw	r24, r28
    2b2c:	45 96       	adiw	r24, 0x15	; 21
    2b2e:	9e 01       	movw	r18, r28
    2b30:	2d 5d       	subi	r18, 0xDD	; 221
    2b32:	3f 4f       	sbci	r19, 0xFF	; 255
    2b34:	b9 01       	movw	r22, r18
    2b36:	0e 94 04 12 	call	0x2408	; 0x2408 <SW_u8GetState>
			if(x3==SW_PRESSED)
    2b3a:	8b a1       	ldd	r24, Y+35	; 0x23
    2b3c:	88 23       	and	r24, r24
    2b3e:	41 f4       	brne	.+16     	; 0x2b50 <main+0x202>
			{
				op--;
    2b40:	8c 81       	ldd	r24, Y+4	; 0x04
    2b42:	81 50       	subi	r24, 0x01	; 1
    2b44:	8c 83       	std	Y+4, r24	; 0x04
				if(op>=4)
    2b46:	8c 81       	ldd	r24, Y+4	; 0x04
    2b48:	84 30       	cpi	r24, 0x04	; 4
    2b4a:	10 f0       	brcs	.+4      	; 0x2b50 <main+0x202>
					op=3;
    2b4c:	83 e0       	ldi	r24, 0x03	; 3
    2b4e:	8c 83       	std	Y+4, r24	; 0x04
			}
		}while(x1==SW_NOT_PRESSED);
    2b50:	89 a1       	ldd	r24, Y+33	; 0x21
    2b52:	81 30       	cpi	r24, 0x01	; 1
    2b54:	09 f2       	breq	.-126    	; 0x2ad8 <main+0x18a>
		CLCD_voidGoToXY(1,1);
    2b56:	81 e0       	ldi	r24, 0x01	; 1
    2b58:	61 e0       	ldi	r22, 0x01	; 1
    2b5a:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <CLCD_voidGoToXY>
		CLCD_voidSendData(' ');
    2b5e:	80 e2       	ldi	r24, 0x20	; 32
    2b60:	0e 94 53 09 	call	0x12a6	; 0x12a6 <CLCD_voidSendData>
		CLCD_voidWriteSpecialCharacter(arr,0,1,2);
    2b64:	ce 01       	movw	r24, r28
    2b66:	07 96       	adiw	r24, 0x07	; 7
    2b68:	60 e0       	ldi	r22, 0x00	; 0
    2b6a:	41 e0       	ldi	r20, 0x01	; 1
    2b6c:	22 e0       	ldi	r18, 0x02	; 2
    2b6e:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <CLCD_voidWriteSpecialCharacter>
		do{
			SW_u8GetState(&enter,&x1);
    2b72:	ce 01       	movw	r24, r28
    2b74:	0f 96       	adiw	r24, 0x0f	; 15
    2b76:	9e 01       	movw	r18, r28
    2b78:	2f 5d       	subi	r18, 0xDF	; 223
    2b7a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b7c:	b9 01       	movw	r22, r18
    2b7e:	0e 94 04 12 	call	0x2408	; 0x2408 <SW_u8GetState>
			SW_u8GetState(&up,&x2);
    2b82:	ce 01       	movw	r24, r28
    2b84:	4b 96       	adiw	r24, 0x1b	; 27
    2b86:	9e 01       	movw	r18, r28
    2b88:	2e 5d       	subi	r18, 0xDE	; 222
    2b8a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b8c:	b9 01       	movw	r22, r18
    2b8e:	0e 94 04 12 	call	0x2408	; 0x2408 <SW_u8GetState>
			CLCD_voidGoToXY(0,2);
    2b92:	80 e0       	ldi	r24, 0x00	; 0
    2b94:	62 e0       	ldi	r22, 0x02	; 2
    2b96:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <CLCD_voidGoToXY>
			CLCD_voidWriteNumber(op2);
    2b9a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b9c:	88 2f       	mov	r24, r24
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <CLCD_voidWriteNumber>
			if(x2==SW_PRESSED)
    2ba4:	8a a1       	ldd	r24, Y+34	; 0x22
    2ba6:	88 23       	and	r24, r24
    2ba8:	39 f4       	brne	.+14     	; 0x2bb8 <main+0x26a>
			{
				op2++;
    2baa:	8d 81       	ldd	r24, Y+5	; 0x05
    2bac:	8f 5f       	subi	r24, 0xFF	; 255
    2bae:	8d 83       	std	Y+5, r24	; 0x05
				if(op2>=10)
    2bb0:	8d 81       	ldd	r24, Y+5	; 0x05
    2bb2:	8a 30       	cpi	r24, 0x0A	; 10
    2bb4:	08 f0       	brcs	.+2      	; 0x2bb8 <main+0x26a>
					op2=0;
    2bb6:	1d 82       	std	Y+5, r1	; 0x05
			}
			SW_u8GetState(&down,&x3);
    2bb8:	ce 01       	movw	r24, r28
    2bba:	45 96       	adiw	r24, 0x15	; 21
    2bbc:	9e 01       	movw	r18, r28
    2bbe:	2d 5d       	subi	r18, 0xDD	; 221
    2bc0:	3f 4f       	sbci	r19, 0xFF	; 255
    2bc2:	b9 01       	movw	r22, r18
    2bc4:	0e 94 04 12 	call	0x2408	; 0x2408 <SW_u8GetState>
			if(x3==SW_PRESSED)
    2bc8:	8b a1       	ldd	r24, Y+35	; 0x23
    2bca:	88 23       	and	r24, r24
    2bcc:	41 f4       	brne	.+16     	; 0x2bde <main+0x290>
			{
				op2--;
    2bce:	8d 81       	ldd	r24, Y+5	; 0x05
    2bd0:	81 50       	subi	r24, 0x01	; 1
    2bd2:	8d 83       	std	Y+5, r24	; 0x05
				if(op2>=10)
    2bd4:	8d 81       	ldd	r24, Y+5	; 0x05
    2bd6:	8a 30       	cpi	r24, 0x0A	; 10
    2bd8:	10 f0       	brcs	.+4      	; 0x2bde <main+0x290>
					op2=9;
    2bda:	89 e0       	ldi	r24, 0x09	; 9
    2bdc:	8d 83       	std	Y+5, r24	; 0x05
			}
		}while(x1==SW_NOT_PRESSED);
    2bde:	89 a1       	ldd	r24, Y+33	; 0x21
    2be0:	81 30       	cpi	r24, 0x01	; 1
    2be2:	39 f2       	breq	.-114    	; 0x2b72 <main+0x224>
		CLCD_voidGoToXY(1,2);
    2be4:	81 e0       	ldi	r24, 0x01	; 1
    2be6:	62 e0       	ldi	r22, 0x02	; 2
    2be8:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <CLCD_voidGoToXY>
		CLCD_voidSendData(' ');
    2bec:	80 e2       	ldi	r24, 0x20	; 32
    2bee:	0e 94 53 09 	call	0x12a6	; 0x12a6 <CLCD_voidSendData>
		CLCD_voidGoToXY(0,3);
    2bf2:	80 e0       	ldi	r24, 0x00	; 0
    2bf4:	63 e0       	ldi	r22, 0x03	; 3
    2bf6:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <CLCD_voidGoToXY>
		CLCD_voidSendData('=');
    2bfa:	8d e3       	ldi	r24, 0x3D	; 61
    2bfc:	0e 94 53 09 	call	0x12a6	; 0x12a6 <CLCD_voidSendData>
		switch(oper[op]){
    2c00:	8c 81       	ldd	r24, Y+4	; 0x04
    2c02:	28 2f       	mov	r18, r24
    2c04:	30 e0       	ldi	r19, 0x00	; 0
    2c06:	ce 01       	movw	r24, r28
    2c08:	84 96       	adiw	r24, 0x24	; 36
    2c0a:	fc 01       	movw	r30, r24
    2c0c:	e2 0f       	add	r30, r18
    2c0e:	f3 1f       	adc	r31, r19
    2c10:	80 81       	ld	r24, Z
    2c12:	a8 2f       	mov	r26, r24
    2c14:	b0 e0       	ldi	r27, 0x00	; 0
    2c16:	b9 a7       	std	Y+41, r27	; 0x29
    2c18:	a8 a7       	std	Y+40, r26	; 0x28
    2c1a:	28 a5       	ldd	r18, Y+40	; 0x28
    2c1c:	39 a5       	ldd	r19, Y+41	; 0x29
    2c1e:	2b 32       	cpi	r18, 0x2B	; 43
    2c20:	31 05       	cpc	r19, r1
    2c22:	b1 f0       	breq	.+44     	; 0x2c50 <main+0x302>
    2c24:	88 a5       	ldd	r24, Y+40	; 0x28
    2c26:	99 a5       	ldd	r25, Y+41	; 0x29
    2c28:	8c 32       	cpi	r24, 0x2C	; 44
    2c2a:	91 05       	cpc	r25, r1
    2c2c:	34 f4       	brge	.+12     	; 0x2c3a <main+0x2ec>
    2c2e:	a8 a5       	ldd	r26, Y+40	; 0x28
    2c30:	b9 a5       	ldd	r27, Y+41	; 0x29
    2c32:	aa 32       	cpi	r26, 0x2A	; 42
    2c34:	b1 05       	cpc	r27, r1
    2c36:	61 f1       	breq	.+88     	; 0x2c90 <main+0x342>
    2c38:	a5 c0       	rjmp	.+330    	; 0x2d84 <main+0x436>
    2c3a:	28 a5       	ldd	r18, Y+40	; 0x28
    2c3c:	39 a5       	ldd	r19, Y+41	; 0x29
    2c3e:	2d 32       	cpi	r18, 0x2D	; 45
    2c40:	31 05       	cpc	r19, r1
    2c42:	81 f0       	breq	.+32     	; 0x2c64 <main+0x316>
    2c44:	88 a5       	ldd	r24, Y+40	; 0x28
    2c46:	99 a5       	ldd	r25, Y+41	; 0x29
    2c48:	8f 32       	cpi	r24, 0x2F	; 47
    2c4a:	91 05       	cpc	r25, r1
    2c4c:	69 f1       	breq	.+90     	; 0x2ca8 <main+0x35a>
    2c4e:	9a c0       	rjmp	.+308    	; 0x2d84 <main+0x436>
		case '+':
			result = op1+op2;
    2c50:	9e 81       	ldd	r25, Y+6	; 0x06
    2c52:	8d 81       	ldd	r24, Y+5	; 0x05
    2c54:	89 0f       	add	r24, r25
    2c56:	8b 83       	std	Y+3, r24	; 0x03
			CLCD_voidWriteNumber(result);
    2c58:	8b 81       	ldd	r24, Y+3	; 0x03
    2c5a:	88 2f       	mov	r24, r24
    2c5c:	90 e0       	ldi	r25, 0x00	; 0
    2c5e:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <CLCD_voidWriteNumber>
    2c62:	90 c0       	rjmp	.+288    	; 0x2d84 <main+0x436>
			break;
		case '-':
			if(op1<op2)
    2c64:	9e 81       	ldd	r25, Y+6	; 0x06
    2c66:	8d 81       	ldd	r24, Y+5	; 0x05
    2c68:	98 17       	cp	r25, r24
    2c6a:	40 f4       	brcc	.+16     	; 0x2c7c <main+0x32e>
			{
				result = op2-op1;
    2c6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c70:	89 1b       	sub	r24, r25
    2c72:	8b 83       	std	Y+3, r24	; 0x03
				CLCD_voidSendData('-');
    2c74:	8d e2       	ldi	r24, 0x2D	; 45
    2c76:	0e 94 53 09 	call	0x12a6	; 0x12a6 <CLCD_voidSendData>
    2c7a:	04 c0       	rjmp	.+8      	; 0x2c84 <main+0x336>
			}
			else
				result = op1-op2;
    2c7c:	8e 81       	ldd	r24, Y+6	; 0x06
    2c7e:	9d 81       	ldd	r25, Y+5	; 0x05
    2c80:	89 1b       	sub	r24, r25
    2c82:	8b 83       	std	Y+3, r24	; 0x03
			CLCD_voidWriteNumber(result);
    2c84:	8b 81       	ldd	r24, Y+3	; 0x03
    2c86:	88 2f       	mov	r24, r24
    2c88:	90 e0       	ldi	r25, 0x00	; 0
    2c8a:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <CLCD_voidWriteNumber>
    2c8e:	7a c0       	rjmp	.+244    	; 0x2d84 <main+0x436>
			break;
		case '*':
			result = op1*op2;
    2c90:	9e 81       	ldd	r25, Y+6	; 0x06
    2c92:	8d 81       	ldd	r24, Y+5	; 0x05
    2c94:	98 9f       	mul	r25, r24
    2c96:	80 2d       	mov	r24, r0
    2c98:	11 24       	eor	r1, r1
    2c9a:	8b 83       	std	Y+3, r24	; 0x03
			CLCD_voidWriteNumber(result);
    2c9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c9e:	88 2f       	mov	r24, r24
    2ca0:	90 e0       	ldi	r25, 0x00	; 0
    2ca2:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <CLCD_voidWriteNumber>
    2ca6:	6e c0       	rjmp	.+220    	; 0x2d84 <main+0x436>
			break;
		case '/':
			if(op2==0)
    2ca8:	8d 81       	ldd	r24, Y+5	; 0x05
    2caa:	88 23       	and	r24, r24
    2cac:	29 f4       	brne	.+10     	; 0x2cb8 <main+0x36a>
			{
				CLCD_voidSendString("inf");
    2cae:	80 e6       	ldi	r24, 0x60	; 96
    2cb0:	90 e0       	ldi	r25, 0x00	; 0
    2cb2:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <CLCD_voidSendString>
    2cb6:	66 c0       	rjmp	.+204    	; 0x2d84 <main+0x436>
				break;
			}
			u8 e=op1/op2;
    2cb8:	8e 81       	ldd	r24, Y+6	; 0x06
    2cba:	9d 81       	ldd	r25, Y+5	; 0x05
    2cbc:	69 2f       	mov	r22, r25
    2cbe:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <__udivmodqi4>
    2cc2:	8a 83       	std	Y+2, r24	; 0x02
			u8 s=((op1/(f32)op2)-(f32)e)*1000;
    2cc4:	8e 81       	ldd	r24, Y+6	; 0x06
    2cc6:	88 2f       	mov	r24, r24
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	aa 27       	eor	r26, r26
    2ccc:	97 fd       	sbrc	r25, 7
    2cce:	a0 95       	com	r26
    2cd0:	ba 2f       	mov	r27, r26
    2cd2:	bc 01       	movw	r22, r24
    2cd4:	cd 01       	movw	r24, r26
    2cd6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2cda:	7b 01       	movw	r14, r22
    2cdc:	8c 01       	movw	r16, r24
    2cde:	8d 81       	ldd	r24, Y+5	; 0x05
    2ce0:	88 2f       	mov	r24, r24
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	a0 e0       	ldi	r26, 0x00	; 0
    2ce6:	b0 e0       	ldi	r27, 0x00	; 0
    2ce8:	bc 01       	movw	r22, r24
    2cea:	cd 01       	movw	r24, r26
    2cec:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    2cf0:	9b 01       	movw	r18, r22
    2cf2:	ac 01       	movw	r20, r24
    2cf4:	c8 01       	movw	r24, r16
    2cf6:	b7 01       	movw	r22, r14
    2cf8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2cfc:	dc 01       	movw	r26, r24
    2cfe:	cb 01       	movw	r24, r22
    2d00:	7c 01       	movw	r14, r24
    2d02:	8d 01       	movw	r16, r26
    2d04:	8a 81       	ldd	r24, Y+2	; 0x02
    2d06:	88 2f       	mov	r24, r24
    2d08:	90 e0       	ldi	r25, 0x00	; 0
    2d0a:	a0 e0       	ldi	r26, 0x00	; 0
    2d0c:	b0 e0       	ldi	r27, 0x00	; 0
    2d0e:	bc 01       	movw	r22, r24
    2d10:	cd 01       	movw	r24, r26
    2d12:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    2d16:	9b 01       	movw	r18, r22
    2d18:	ac 01       	movw	r20, r24
    2d1a:	c8 01       	movw	r24, r16
    2d1c:	b7 01       	movw	r22, r14
    2d1e:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2d22:	dc 01       	movw	r26, r24
    2d24:	cb 01       	movw	r24, r22
    2d26:	bc 01       	movw	r22, r24
    2d28:	cd 01       	movw	r24, r26
    2d2a:	20 e0       	ldi	r18, 0x00	; 0
    2d2c:	30 e0       	ldi	r19, 0x00	; 0
    2d2e:	4a e7       	ldi	r20, 0x7A	; 122
    2d30:	54 e4       	ldi	r21, 0x44	; 68
    2d32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d36:	dc 01       	movw	r26, r24
    2d38:	cb 01       	movw	r24, r22
    2d3a:	bc 01       	movw	r22, r24
    2d3c:	cd 01       	movw	r24, r26
    2d3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d42:	dc 01       	movw	r26, r24
    2d44:	cb 01       	movw	r24, r22
    2d46:	89 83       	std	Y+1, r24	; 0x01
			if(s==0)
    2d48:	89 81       	ldd	r24, Y+1	; 0x01
    2d4a:	88 23       	and	r24, r24
    2d4c:	31 f4       	brne	.+12     	; 0x2d5a <main+0x40c>
			{
				CLCD_voidWriteNumber(e);
    2d4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d50:	88 2f       	mov	r24, r24
    2d52:	90 e0       	ldi	r25, 0x00	; 0
    2d54:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <CLCD_voidWriteNumber>
    2d58:	15 c0       	rjmp	.+42     	; 0x2d84 <main+0x436>
			}
			else{
				CLCD_voidWriteNumber(e);
    2d5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d5c:	88 2f       	mov	r24, r24
    2d5e:	90 e0       	ldi	r25, 0x00	; 0
    2d60:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <CLCD_voidWriteNumber>
				CLCD_voidGoToXY(0,5);
    2d64:	80 e0       	ldi	r24, 0x00	; 0
    2d66:	65 e0       	ldi	r22, 0x05	; 5
    2d68:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <CLCD_voidGoToXY>
				CLCD_voidSendData('.');
    2d6c:	8e e2       	ldi	r24, 0x2E	; 46
    2d6e:	0e 94 53 09 	call	0x12a6	; 0x12a6 <CLCD_voidSendData>
				CLCD_voidGoToXY(0,6);
    2d72:	80 e0       	ldi	r24, 0x00	; 0
    2d74:	66 e0       	ldi	r22, 0x06	; 6
    2d76:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <CLCD_voidGoToXY>
				CLCD_voidWriteNumber(s);
    2d7a:	89 81       	ldd	r24, Y+1	; 0x01
    2d7c:	88 2f       	mov	r24, r24
    2d7e:	90 e0       	ldi	r25, 0x00	; 0
    2d80:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <CLCD_voidWriteNumber>
			}
			break;
		}
		do{
			SW_u8GetState(&enter,&x1);
    2d84:	ce 01       	movw	r24, r28
    2d86:	0f 96       	adiw	r24, 0x0f	; 15
    2d88:	9e 01       	movw	r18, r28
    2d8a:	2f 5d       	subi	r18, 0xDF	; 223
    2d8c:	3f 4f       	sbci	r19, 0xFF	; 255
    2d8e:	b9 01       	movw	r22, r18
    2d90:	0e 94 04 12 	call	0x2408	; 0x2408 <SW_u8GetState>
		}while(x1==SW_NOT_PRESSED);
    2d94:	89 a1       	ldd	r24, Y+33	; 0x21
    2d96:	81 30       	cpi	r24, 0x01	; 1
    2d98:	a9 f3       	breq	.-22     	; 0x2d84 <main+0x436>
		CLCD_voidSendCommand(1);
    2d9a:	81 e0       	ldi	r24, 0x01	; 1
    2d9c:	0e 94 75 07 	call	0xeea	; 0xeea <CLCD_voidSendCommand>
    2da0:	35 ce       	rjmp	.-918    	; 0x2a0c <main+0xbe>

00002da2 <__udivmodqi4>:
    2da2:	99 1b       	sub	r25, r25
    2da4:	79 e0       	ldi	r23, 0x09	; 9
    2da6:	04 c0       	rjmp	.+8      	; 0x2db0 <__udivmodqi4_ep>

00002da8 <__udivmodqi4_loop>:
    2da8:	99 1f       	adc	r25, r25
    2daa:	96 17       	cp	r25, r22
    2dac:	08 f0       	brcs	.+2      	; 0x2db0 <__udivmodqi4_ep>
    2dae:	96 1b       	sub	r25, r22

00002db0 <__udivmodqi4_ep>:
    2db0:	88 1f       	adc	r24, r24
    2db2:	7a 95       	dec	r23
    2db4:	c9 f7       	brne	.-14     	; 0x2da8 <__udivmodqi4_loop>
    2db6:	80 95       	com	r24
    2db8:	08 95       	ret

00002dba <__udivmodhi4>:
    2dba:	aa 1b       	sub	r26, r26
    2dbc:	bb 1b       	sub	r27, r27
    2dbe:	51 e1       	ldi	r21, 0x11	; 17
    2dc0:	07 c0       	rjmp	.+14     	; 0x2dd0 <__udivmodhi4_ep>

00002dc2 <__udivmodhi4_loop>:
    2dc2:	aa 1f       	adc	r26, r26
    2dc4:	bb 1f       	adc	r27, r27
    2dc6:	a6 17       	cp	r26, r22
    2dc8:	b7 07       	cpc	r27, r23
    2dca:	10 f0       	brcs	.+4      	; 0x2dd0 <__udivmodhi4_ep>
    2dcc:	a6 1b       	sub	r26, r22
    2dce:	b7 0b       	sbc	r27, r23

00002dd0 <__udivmodhi4_ep>:
    2dd0:	88 1f       	adc	r24, r24
    2dd2:	99 1f       	adc	r25, r25
    2dd4:	5a 95       	dec	r21
    2dd6:	a9 f7       	brne	.-22     	; 0x2dc2 <__udivmodhi4_loop>
    2dd8:	80 95       	com	r24
    2dda:	90 95       	com	r25
    2ddc:	bc 01       	movw	r22, r24
    2dde:	cd 01       	movw	r24, r26
    2de0:	08 95       	ret

00002de2 <__prologue_saves__>:
    2de2:	2f 92       	push	r2
    2de4:	3f 92       	push	r3
    2de6:	4f 92       	push	r4
    2de8:	5f 92       	push	r5
    2dea:	6f 92       	push	r6
    2dec:	7f 92       	push	r7
    2dee:	8f 92       	push	r8
    2df0:	9f 92       	push	r9
    2df2:	af 92       	push	r10
    2df4:	bf 92       	push	r11
    2df6:	cf 92       	push	r12
    2df8:	df 92       	push	r13
    2dfa:	ef 92       	push	r14
    2dfc:	ff 92       	push	r15
    2dfe:	0f 93       	push	r16
    2e00:	1f 93       	push	r17
    2e02:	cf 93       	push	r28
    2e04:	df 93       	push	r29
    2e06:	cd b7       	in	r28, 0x3d	; 61
    2e08:	de b7       	in	r29, 0x3e	; 62
    2e0a:	ca 1b       	sub	r28, r26
    2e0c:	db 0b       	sbc	r29, r27
    2e0e:	0f b6       	in	r0, 0x3f	; 63
    2e10:	f8 94       	cli
    2e12:	de bf       	out	0x3e, r29	; 62
    2e14:	0f be       	out	0x3f, r0	; 63
    2e16:	cd bf       	out	0x3d, r28	; 61
    2e18:	09 94       	ijmp

00002e1a <__epilogue_restores__>:
    2e1a:	2a 88       	ldd	r2, Y+18	; 0x12
    2e1c:	39 88       	ldd	r3, Y+17	; 0x11
    2e1e:	48 88       	ldd	r4, Y+16	; 0x10
    2e20:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e22:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e24:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e26:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e28:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e2a:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e2c:	b9 84       	ldd	r11, Y+9	; 0x09
    2e2e:	c8 84       	ldd	r12, Y+8	; 0x08
    2e30:	df 80       	ldd	r13, Y+7	; 0x07
    2e32:	ee 80       	ldd	r14, Y+6	; 0x06
    2e34:	fd 80       	ldd	r15, Y+5	; 0x05
    2e36:	0c 81       	ldd	r16, Y+4	; 0x04
    2e38:	1b 81       	ldd	r17, Y+3	; 0x03
    2e3a:	aa 81       	ldd	r26, Y+2	; 0x02
    2e3c:	b9 81       	ldd	r27, Y+1	; 0x01
    2e3e:	ce 0f       	add	r28, r30
    2e40:	d1 1d       	adc	r29, r1
    2e42:	0f b6       	in	r0, 0x3f	; 63
    2e44:	f8 94       	cli
    2e46:	de bf       	out	0x3e, r29	; 62
    2e48:	0f be       	out	0x3f, r0	; 63
    2e4a:	cd bf       	out	0x3d, r28	; 61
    2e4c:	ed 01       	movw	r28, r26
    2e4e:	08 95       	ret

00002e50 <_exit>:
    2e50:	f8 94       	cli

00002e52 <__stop_program>:
    2e52:	ff cf       	rjmp	.-2      	; 0x2e52 <__stop_program>
